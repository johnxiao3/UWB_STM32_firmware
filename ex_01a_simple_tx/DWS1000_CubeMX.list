
DWS1000_CubeMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003494  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08003640  08003640  00013640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800372c  0800372c  0001372c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08003734  08003734  00013734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800373c  0800373c  0001373c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000454  20000000  08003740  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020454  2**0
                  CONTENTS
  8 .bss          0000024c  20000454  20000454  00020454  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200006a0  200006a0  00020454  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020454  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001fcf4  00000000  00000000  00020484  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003b13  00000000  00000000  00040178  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000108fd  00000000  00000000  00043c8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fd0  00000000  00000000  00054588  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001e70  00000000  00000000  00055558  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002796a  00000000  00000000  000573c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f842  00000000  00000000  0007ed32  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e18dd  00000000  00000000  0008e574  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016fe51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036e4  00000000  00000000  0016fecc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000454 	.word	0x20000454
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003628 	.word	0x08003628

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000458 	.word	0x20000458
 80001e8:	08003628 	.word	0x08003628

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b972 	b.w	80004f8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	4688      	mov	r8, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14b      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023a:	428a      	cmp	r2, r1
 800023c:	4615      	mov	r5, r2
 800023e:	d967      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0720 	rsb	r7, r2, #32
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	fa20 f707 	lsr.w	r7, r0, r7
 8000252:	4095      	lsls	r5, r2
 8000254:	ea47 0803 	orr.w	r8, r7, r3
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbb8 f7fe 	udiv	r7, r8, lr
 8000264:	fa1f fc85 	uxth.w	ip, r5
 8000268:	fb0e 8817 	mls	r8, lr, r7, r8
 800026c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000270:	fb07 f10c 	mul.w	r1, r7, ip
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18eb      	adds	r3, r5, r3
 800027a:	f107 30ff 	add.w	r0, r7, #4294967295
 800027e:	f080 811b 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8118 	bls.w	80004b8 <__udivmoddi4+0x28c>
 8000288:	3f02      	subs	r7, #2
 800028a:	442b      	add	r3, r5
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0fe 	udiv	r0, r3, lr
 8000294:	fb0e 3310 	mls	r3, lr, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a0:	45a4      	cmp	ip, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	192c      	adds	r4, r5, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 8107 	bcs.w	80004bc <__udivmoddi4+0x290>
 80002ae:	45a4      	cmp	ip, r4
 80002b0:	f240 8104 	bls.w	80004bc <__udivmoddi4+0x290>
 80002b4:	3802      	subs	r0, #2
 80002b6:	442c      	add	r4, r5
 80002b8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002bc:	eba4 040c 	sub.w	r4, r4, ip
 80002c0:	2700      	movs	r7, #0
 80002c2:	b11e      	cbz	r6, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c6 4300 	strd	r4, r3, [r6]
 80002cc:	4639      	mov	r1, r7
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d909      	bls.n	80002ea <__udivmoddi4+0xbe>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80eb 	beq.w	80004b2 <__udivmoddi4+0x286>
 80002dc:	2700      	movs	r7, #0
 80002de:	e9c6 0100 	strd	r0, r1, [r6]
 80002e2:	4638      	mov	r0, r7
 80002e4:	4639      	mov	r1, r7
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	fab3 f783 	clz	r7, r3
 80002ee:	2f00      	cmp	r7, #0
 80002f0:	d147      	bne.n	8000382 <__udivmoddi4+0x156>
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xd0>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2c4>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb61 0303 	sbc.w	r3, r1, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4698      	mov	r8, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d0e0      	beq.n	80002cc <__udivmoddi4+0xa0>
 800030a:	e9c6 4800 	strd	r4, r8, [r6]
 800030e:	e7dd      	b.n	80002cc <__udivmoddi4+0xa0>
 8000310:	b902      	cbnz	r2, 8000314 <__udivmoddi4+0xe8>
 8000312:	deff      	udf	#255	; 0xff
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	2a00      	cmp	r2, #0
 800031a:	f040 808f 	bne.w	800043c <__udivmoddi4+0x210>
 800031e:	1b49      	subs	r1, r1, r5
 8000320:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000324:	fa1f f885 	uxth.w	r8, r5
 8000328:	2701      	movs	r7, #1
 800032a:	fbb1 fcfe 	udiv	ip, r1, lr
 800032e:	0c23      	lsrs	r3, r4, #16
 8000330:	fb0e 111c 	mls	r1, lr, ip, r1
 8000334:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000338:	fb08 f10c 	mul.w	r1, r8, ip
 800033c:	4299      	cmp	r1, r3
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x124>
 8000340:	18eb      	adds	r3, r5, r3
 8000342:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4299      	cmp	r1, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 800034e:	4684      	mov	ip, r0
 8000350:	1a59      	subs	r1, r3, r1
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb1 f0fe 	udiv	r0, r1, lr
 8000358:	fb0e 1410 	mls	r4, lr, r0, r1
 800035c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000360:	fb08 f800 	mul.w	r8, r8, r0
 8000364:	45a0      	cmp	r8, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x14c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x14a>
 8000370:	45a0      	cmp	r8, r4
 8000372:	f200 80b6 	bhi.w	80004e2 <__udivmoddi4+0x2b6>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 0408 	sub.w	r4, r4, r8
 800037c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000380:	e79f      	b.n	80002c2 <__udivmoddi4+0x96>
 8000382:	f1c7 0c20 	rsb	ip, r7, #32
 8000386:	40bb      	lsls	r3, r7
 8000388:	fa22 fe0c 	lsr.w	lr, r2, ip
 800038c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000390:	fa01 f407 	lsl.w	r4, r1, r7
 8000394:	fa20 f50c 	lsr.w	r5, r0, ip
 8000398:	fa21 f30c 	lsr.w	r3, r1, ip
 800039c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a0:	4325      	orrs	r5, r4
 80003a2:	fbb3 f9f8 	udiv	r9, r3, r8
 80003a6:	0c2c      	lsrs	r4, r5, #16
 80003a8:	fb08 3319 	mls	r3, r8, r9, r3
 80003ac:	fa1f fa8e 	uxth.w	sl, lr
 80003b0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003b4:	fb09 f40a 	mul.w	r4, r9, sl
 80003b8:	429c      	cmp	r4, r3
 80003ba:	fa02 f207 	lsl.w	r2, r2, r7
 80003be:	fa00 f107 	lsl.w	r1, r0, r7
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1e 0303 	adds.w	r3, lr, r3
 80003c8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003cc:	f080 8087 	bcs.w	80004de <__udivmoddi4+0x2b2>
 80003d0:	429c      	cmp	r4, r3
 80003d2:	f240 8084 	bls.w	80004de <__udivmoddi4+0x2b2>
 80003d6:	f1a9 0902 	sub.w	r9, r9, #2
 80003da:	4473      	add	r3, lr
 80003dc:	1b1b      	subs	r3, r3, r4
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e4:	fb08 3310 	mls	r3, r8, r0, r3
 80003e8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003ec:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f0:	45a2      	cmp	sl, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1e 0404 	adds.w	r4, lr, r4
 80003f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003fc:	d26b      	bcs.n	80004d6 <__udivmoddi4+0x2aa>
 80003fe:	45a2      	cmp	sl, r4
 8000400:	d969      	bls.n	80004d6 <__udivmoddi4+0x2aa>
 8000402:	3802      	subs	r0, #2
 8000404:	4474      	add	r4, lr
 8000406:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040a:	fba0 8902 	umull	r8, r9, r0, r2
 800040e:	eba4 040a 	sub.w	r4, r4, sl
 8000412:	454c      	cmp	r4, r9
 8000414:	46c2      	mov	sl, r8
 8000416:	464b      	mov	r3, r9
 8000418:	d354      	bcc.n	80004c4 <__udivmoddi4+0x298>
 800041a:	d051      	beq.n	80004c0 <__udivmoddi4+0x294>
 800041c:	2e00      	cmp	r6, #0
 800041e:	d069      	beq.n	80004f4 <__udivmoddi4+0x2c8>
 8000420:	ebb1 050a 	subs.w	r5, r1, sl
 8000424:	eb64 0403 	sbc.w	r4, r4, r3
 8000428:	fa04 fc0c 	lsl.w	ip, r4, ip
 800042c:	40fd      	lsrs	r5, r7
 800042e:	40fc      	lsrs	r4, r7
 8000430:	ea4c 0505 	orr.w	r5, ip, r5
 8000434:	e9c6 5400 	strd	r5, r4, [r6]
 8000438:	2700      	movs	r7, #0
 800043a:	e747      	b.n	80002cc <__udivmoddi4+0xa0>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f703 	lsr.w	r7, r0, r3
 8000444:	4095      	lsls	r5, r2
 8000446:	fa01 f002 	lsl.w	r0, r1, r2
 800044a:	fa21 f303 	lsr.w	r3, r1, r3
 800044e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000452:	4338      	orrs	r0, r7
 8000454:	0c01      	lsrs	r1, r0, #16
 8000456:	fbb3 f7fe 	udiv	r7, r3, lr
 800045a:	fa1f f885 	uxth.w	r8, r5
 800045e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb07 f308 	mul.w	r3, r7, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	fa04 f402 	lsl.w	r4, r4, r2
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x256>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f107 3cff 	add.w	ip, r7, #4294967295
 8000478:	d22f      	bcs.n	80004da <__udivmoddi4+0x2ae>
 800047a:	428b      	cmp	r3, r1
 800047c:	d92d      	bls.n	80004da <__udivmoddi4+0x2ae>
 800047e:	3f02      	subs	r7, #2
 8000480:	4429      	add	r1, r5
 8000482:	1acb      	subs	r3, r1, r3
 8000484:	b281      	uxth	r1, r0
 8000486:	fbb3 f0fe 	udiv	r0, r3, lr
 800048a:	fb0e 3310 	mls	r3, lr, r0, r3
 800048e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000492:	fb00 f308 	mul.w	r3, r0, r8
 8000496:	428b      	cmp	r3, r1
 8000498:	d907      	bls.n	80004aa <__udivmoddi4+0x27e>
 800049a:	1869      	adds	r1, r5, r1
 800049c:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a0:	d217      	bcs.n	80004d2 <__udivmoddi4+0x2a6>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d915      	bls.n	80004d2 <__udivmoddi4+0x2a6>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4429      	add	r1, r5
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b0:	e73b      	b.n	800032a <__udivmoddi4+0xfe>
 80004b2:	4637      	mov	r7, r6
 80004b4:	4630      	mov	r0, r6
 80004b6:	e709      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b8:	4607      	mov	r7, r0
 80004ba:	e6e7      	b.n	800028c <__udivmoddi4+0x60>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6fb      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004c0:	4541      	cmp	r1, r8
 80004c2:	d2ab      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004c8:	eb69 020e 	sbc.w	r2, r9, lr
 80004cc:	3801      	subs	r0, #1
 80004ce:	4613      	mov	r3, r2
 80004d0:	e7a4      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d2:	4660      	mov	r0, ip
 80004d4:	e7e9      	b.n	80004aa <__udivmoddi4+0x27e>
 80004d6:	4618      	mov	r0, r3
 80004d8:	e795      	b.n	8000406 <__udivmoddi4+0x1da>
 80004da:	4667      	mov	r7, ip
 80004dc:	e7d1      	b.n	8000482 <__udivmoddi4+0x256>
 80004de:	4681      	mov	r9, r0
 80004e0:	e77c      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e2:	3802      	subs	r0, #2
 80004e4:	442c      	add	r4, r5
 80004e6:	e747      	b.n	8000378 <__udivmoddi4+0x14c>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	442b      	add	r3, r5
 80004ee:	e72f      	b.n	8000350 <__udivmoddi4+0x124>
 80004f0:	4638      	mov	r0, r7
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xda>
 80004f4:	4637      	mov	r7, r6
 80004f6:	e6e9      	b.n	80002cc <__udivmoddi4+0xa0>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004fc:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004fe:	4b0b      	ldr	r3, [pc, #44]	; (800052c <HAL_Init+0x30>)
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000506:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000508:	681a      	ldr	r2, [r3, #0]
 800050a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800050e:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000516:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000518:	2003      	movs	r0, #3
 800051a:	f000 f82d 	bl	8000578 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800051e:	2000      	movs	r0, #0
 8000520:	f002 fd2e 	bl	8002f80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000524:	f002 fc38 	bl	8002d98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000528:	2000      	movs	r0, #0
 800052a:	bd08      	pop	{r3, pc}
 800052c:	40023c00 	.word	0x40023c00

08000530 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000530:	4a03      	ldr	r2, [pc, #12]	; (8000540 <HAL_IncTick+0x10>)
 8000532:	4b04      	ldr	r3, [pc, #16]	; (8000544 <HAL_IncTick+0x14>)
 8000534:	6811      	ldr	r1, [r2, #0]
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	440b      	add	r3, r1
 800053a:	6013      	str	r3, [r2, #0]
}
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	200004b4 	.word	0x200004b4
 8000544:	20000000 	.word	0x20000000

08000548 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000548:	4b01      	ldr	r3, [pc, #4]	; (8000550 <HAL_GetTick+0x8>)
 800054a:	6818      	ldr	r0, [r3, #0]
}
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	200004b4 	.word	0x200004b4

08000554 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000554:	b538      	push	{r3, r4, r5, lr}
 8000556:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000558:	f7ff fff6 	bl	8000548 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800055c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800055e:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8000560:	d002      	beq.n	8000568 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000562:	4b04      	ldr	r3, [pc, #16]	; (8000574 <HAL_Delay+0x20>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000568:	f7ff ffee 	bl	8000548 <HAL_GetTick>
 800056c:	1b40      	subs	r0, r0, r5
 800056e:	42a0      	cmp	r0, r4
 8000570:	d3fa      	bcc.n	8000568 <HAL_Delay+0x14>
  {
  }
}
 8000572:	bd38      	pop	{r3, r4, r5, pc}
 8000574:	20000000 	.word	0x20000000

08000578 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000578:	4a07      	ldr	r2, [pc, #28]	; (8000598 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800057a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800057c:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8000580:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000582:	0200      	lsls	r0, r0, #8
 8000584:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000588:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800058c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000590:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000592:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	e000ed00 	.word	0xe000ed00

0800059c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800059c:	4b18      	ldr	r3, [pc, #96]	; (8000600 <HAL_NVIC_SetPriority+0x64>)
 800059e:	68db      	ldr	r3, [r3, #12]
 80005a0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005a4:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005a6:	f1c3 0507 	rsb	r5, r3, #7
 80005aa:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ac:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005b0:	bf28      	it	cs
 80005b2:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005b4:	2c06      	cmp	r4, #6
 80005b6:	d919      	bls.n	80005ec <HAL_NVIC_SetPriority+0x50>
 80005b8:	3b03      	subs	r3, #3
 80005ba:	f04f 34ff 	mov.w	r4, #4294967295
 80005be:	409c      	lsls	r4, r3
 80005c0:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005c4:	f04f 32ff 	mov.w	r2, #4294967295
 80005c8:	40aa      	lsls	r2, r5
 80005ca:	ea21 0102 	bic.w	r1, r1, r2
 80005ce:	fa01 f203 	lsl.w	r2, r1, r3
 80005d2:	4322      	orrs	r2, r4
 80005d4:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 80005d6:	2800      	cmp	r0, #0
 80005d8:	b2d2      	uxtb	r2, r2
 80005da:	db0a      	blt.n	80005f2 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005dc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80005e0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80005e4:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80005e8:	bc30      	pop	{r4, r5}
 80005ea:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ec:	2400      	movs	r4, #0
 80005ee:	4623      	mov	r3, r4
 80005f0:	e7e8      	b.n	80005c4 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f2:	4b04      	ldr	r3, [pc, #16]	; (8000604 <HAL_NVIC_SetPriority+0x68>)
 80005f4:	f000 000f 	and.w	r0, r0, #15
 80005f8:	4403      	add	r3, r0
 80005fa:	761a      	strb	r2, [r3, #24]
 80005fc:	bc30      	pop	{r4, r5}
 80005fe:	4770      	bx	lr
 8000600:	e000ed00 	.word	0xe000ed00
 8000604:	e000ecfc 	.word	0xe000ecfc

08000608 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000608:	2800      	cmp	r0, #0
 800060a:	db07      	blt.n	800061c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800060c:	f000 011f 	and.w	r1, r0, #31
 8000610:	2301      	movs	r3, #1
 8000612:	0940      	lsrs	r0, r0, #5
 8000614:	4a02      	ldr	r2, [pc, #8]	; (8000620 <HAL_NVIC_EnableIRQ+0x18>)
 8000616:	408b      	lsls	r3, r1
 8000618:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	e000e100 	.word	0xe000e100

08000624 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000624:	2800      	cmp	r0, #0
 8000626:	db0d      	blt.n	8000644 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000628:	0943      	lsrs	r3, r0, #5
 800062a:	3320      	adds	r3, #32
 800062c:	2201      	movs	r2, #1
 800062e:	4906      	ldr	r1, [pc, #24]	; (8000648 <HAL_NVIC_DisableIRQ+0x24>)
 8000630:	f000 001f 	and.w	r0, r0, #31
 8000634:	fa02 f000 	lsl.w	r0, r2, r0
 8000638:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800063c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000640:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	e000e100 	.word	0xe000e100

0800064c <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800064c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000650:	2b02      	cmp	r3, #2
 8000652:	d003      	beq.n	800065c <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000654:	2380      	movs	r3, #128	; 0x80
 8000656:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000658:	2001      	movs	r0, #1
 800065a:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800065c:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800065e:	2305      	movs	r3, #5
 8000660:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000664:	6813      	ldr	r3, [r2, #0]
 8000666:	f023 0301 	bic.w	r3, r3, #1
 800066a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800066c:	2000      	movs	r0, #0
}
 800066e:	4770      	bx	lr

08000670 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000674:	f8df c260 	ldr.w	ip, [pc, #608]	; 80008d8 <HAL_GPIO_Init+0x268>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000678:	f8df 8260 	ldr.w	r8, [pc, #608]	; 80008dc <HAL_GPIO_Init+0x26c>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800067c:	f8d1 e000 	ldr.w	lr, [r1]
{
 8000680:	b083      	sub	sp, #12
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000682:	2500      	movs	r5, #0
 8000684:	e003      	b.n	800068e <HAL_GPIO_Init+0x1e>
 8000686:	3501      	adds	r5, #1
 8000688:	2d10      	cmp	r5, #16
 800068a:	f000 80a4 	beq.w	80007d6 <HAL_GPIO_Init+0x166>
    ioposition = 0x01U << position;
 800068e:	2301      	movs	r3, #1
 8000690:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000692:	ea0e 0403 	and.w	r4, lr, r3
    if(iocurrent == ioposition)
 8000696:	42a3      	cmp	r3, r4
 8000698:	d1f5      	bne.n	8000686 <HAL_GPIO_Init+0x16>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800069a:	684e      	ldr	r6, [r1, #4]
 800069c:	f026 0a10 	bic.w	sl, r6, #16
 80006a0:	f1ba 0f02 	cmp.w	sl, #2
 80006a4:	f000 809a 	beq.w	80007dc <HAL_GPIO_Init+0x16c>
 80006a8:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006ac:	2203      	movs	r2, #3
      temp = GPIOx->MODER;
 80006ae:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006b2:	fa02 f209 	lsl.w	r2, r2, r9
 80006b6:	43d2      	mvns	r2, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006b8:	f006 0703 	and.w	r7, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006bc:	ea02 0b0b 	and.w	fp, r2, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006c0:	fa07 f709 	lsl.w	r7, r7, r9
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006c4:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006c8:	ea47 070b 	orr.w	r7, r7, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006cc:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 80006d0:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006d2:	f240 80a9 	bls.w	8000828 <HAL_GPIO_Init+0x1b8>
      temp = GPIOx->PUPDR;
 80006d6:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006d8:	688b      	ldr	r3, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006da:	403a      	ands	r2, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006dc:	fa03 f309 	lsl.w	r3, r3, r9
 80006e0:	4313      	orrs	r3, r2
      GPIOx->PUPDR = temp;
 80006e2:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006e4:	00f3      	lsls	r3, r6, #3
 80006e6:	d5ce      	bpl.n	8000686 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006e8:	2300      	movs	r3, #0
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 80006f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f4:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
 80006f8:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 80006fc:	f025 0203 	bic.w	r2, r5, #3
 8000700:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8000704:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000708:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 800070c:	9301      	str	r3, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800070e:	f005 0703 	and.w	r7, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000712:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000714:	f8d2 9008 	ldr.w	r9, [r2, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000718:	00bf      	lsls	r7, r7, #2
 800071a:	230f      	movs	r3, #15
 800071c:	40bb      	lsls	r3, r7
 800071e:	ea29 0a03 	bic.w	sl, r9, r3
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000722:	4b67      	ldr	r3, [pc, #412]	; (80008c0 <HAL_GPIO_Init+0x250>)
 8000724:	4298      	cmp	r0, r3
 8000726:	d02e      	beq.n	8000786 <HAL_GPIO_Init+0x116>
 8000728:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800072c:	4298      	cmp	r0, r3
 800072e:	f000 808e 	beq.w	800084e <HAL_GPIO_Init+0x1de>
 8000732:	4b64      	ldr	r3, [pc, #400]	; (80008c4 <HAL_GPIO_Init+0x254>)
 8000734:	4298      	cmp	r0, r3
 8000736:	f000 8091 	beq.w	800085c <HAL_GPIO_Init+0x1ec>
 800073a:	4b63      	ldr	r3, [pc, #396]	; (80008c8 <HAL_GPIO_Init+0x258>)
 800073c:	4298      	cmp	r0, r3
 800073e:	f000 8094 	beq.w	800086a <HAL_GPIO_Init+0x1fa>
 8000742:	4b62      	ldr	r3, [pc, #392]	; (80008cc <HAL_GPIO_Init+0x25c>)
 8000744:	4298      	cmp	r0, r3
 8000746:	f000 8097 	beq.w	8000878 <HAL_GPIO_Init+0x208>
 800074a:	4b61      	ldr	r3, [pc, #388]	; (80008d0 <HAL_GPIO_Init+0x260>)
 800074c:	4298      	cmp	r0, r3
 800074e:	f000 80a1 	beq.w	8000894 <HAL_GPIO_Init+0x224>
 8000752:	4b60      	ldr	r3, [pc, #384]	; (80008d4 <HAL_GPIO_Init+0x264>)
 8000754:	4298      	cmp	r0, r3
 8000756:	f000 80a4 	beq.w	80008a2 <HAL_GPIO_Init+0x232>
 800075a:	f8df 9184 	ldr.w	r9, [pc, #388]	; 80008e0 <HAL_GPIO_Init+0x270>
 800075e:	4548      	cmp	r0, r9
 8000760:	f000 8091 	beq.w	8000886 <HAL_GPIO_Init+0x216>
 8000764:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80008e4 <HAL_GPIO_Init+0x274>
 8000768:	4548      	cmp	r0, r9
 800076a:	f000 80a1 	beq.w	80008b0 <HAL_GPIO_Init+0x240>
 800076e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80008e8 <HAL_GPIO_Init+0x278>
 8000772:	4548      	cmp	r0, r9
 8000774:	bf0c      	ite	eq
 8000776:	f04f 0909 	moveq.w	r9, #9
 800077a:	f04f 090a 	movne.w	r9, #10
 800077e:	fa09 f707 	lsl.w	r7, r9, r7
 8000782:	ea4a 0a07 	orr.w	sl, sl, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000786:	f8c2 a008 	str.w	sl, [r2, #8]
        temp = EXTI->IMR;
 800078a:	f8dc 3000 	ldr.w	r3, [ip]
        temp &= ~((uint32_t)iocurrent);
 800078e:	43e2      	mvns	r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000790:	03f7      	lsls	r7, r6, #15
        temp &= ~((uint32_t)iocurrent);
 8000792:	bf54      	ite	pl
 8000794:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8000796:	4323      	orrmi	r3, r4
        }
        EXTI->IMR = temp;
 8000798:	f8cc 3000 	str.w	r3, [ip]

        temp = EXTI->EMR;
 800079c:	f8dc 3004 	ldr.w	r3, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007a0:	03b7      	lsls	r7, r6, #14
        temp &= ~((uint32_t)iocurrent);
 80007a2:	bf54      	ite	pl
 80007a4:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 80007a6:	4323      	orrmi	r3, r4
        }
        EXTI->EMR = temp;
 80007a8:	f8cc 3004 	str.w	r3, [ip, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007ac:	f8dc 3008 	ldr.w	r3, [ip, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007b0:	02f7      	lsls	r7, r6, #11
        temp &= ~((uint32_t)iocurrent);
 80007b2:	bf54      	ite	pl
 80007b4:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 80007b6:	4323      	orrmi	r3, r4
        }
        EXTI->RTSR = temp;
 80007b8:	f8cc 3008 	str.w	r3, [ip, #8]

        temp = EXTI->FTSR;
 80007bc:	f8dc 300c 	ldr.w	r3, [ip, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007c0:	02b6      	lsls	r6, r6, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007c2:	f105 0501 	add.w	r5, r5, #1
        temp &= ~((uint32_t)iocurrent);
 80007c6:	bf54      	ite	pl
 80007c8:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 80007ca:	4323      	orrmi	r3, r4
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007cc:	2d10      	cmp	r5, #16
        }
        EXTI->FTSR = temp;
 80007ce:	f8cc 300c 	str.w	r3, [ip, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007d2:	f47f af5c 	bne.w	800068e <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 80007d6:	b003      	add	sp, #12
 80007d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->AFR[position >> 3U];
 80007dc:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 80007e0:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007e4:	f005 0707 	and.w	r7, r5, #7
        temp = GPIOx->AFR[position >> 3U];
 80007e8:	f8d9 2020 	ldr.w	r2, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007ec:	00bf      	lsls	r7, r7, #2
 80007ee:	f04f 0b0f 	mov.w	fp, #15
 80007f2:	fa0b fb07 	lsl.w	fp, fp, r7
 80007f6:	ea22 0a0b 	bic.w	sl, r2, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80007fa:	690a      	ldr	r2, [r1, #16]
 80007fc:	40ba      	lsls	r2, r7
 80007fe:	ea42 020a 	orr.w	r2, r2, sl
        GPIOx->AFR[position >> 3U] = temp;
 8000802:	f8c9 2020 	str.w	r2, [r9, #32]
 8000806:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800080a:	2203      	movs	r2, #3
      temp = GPIOx->MODER;
 800080c:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000810:	fa02 f209 	lsl.w	r2, r2, r9
 8000814:	43d2      	mvns	r2, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000816:	f006 0703 	and.w	r7, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800081a:	ea0a 0a02 	and.w	sl, sl, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800081e:	fa07 f709 	lsl.w	r7, r7, r9
 8000822:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->MODER = temp;
 8000826:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 8000828:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800082a:	ea07 0a02 	and.w	sl, r7, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 800082e:	68cf      	ldr	r7, [r1, #12]
 8000830:	fa07 f709 	lsl.w	r7, r7, r9
 8000834:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8000838:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800083a:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800083e:	f3c6 1700 	ubfx	r7, r6, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000842:	ea2a 0303 	bic.w	r3, sl, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000846:	40af      	lsls	r7, r5
 8000848:	431f      	orrs	r7, r3
        GPIOx->OTYPER = temp;
 800084a:	6047      	str	r7, [r0, #4]
 800084c:	e743      	b.n	80006d6 <HAL_GPIO_Init+0x66>
 800084e:	f04f 0901 	mov.w	r9, #1
 8000852:	fa09 f707 	lsl.w	r7, r9, r7
 8000856:	ea4a 0a07 	orr.w	sl, sl, r7
 800085a:	e794      	b.n	8000786 <HAL_GPIO_Init+0x116>
 800085c:	f04f 0902 	mov.w	r9, #2
 8000860:	fa09 f707 	lsl.w	r7, r9, r7
 8000864:	ea4a 0a07 	orr.w	sl, sl, r7
 8000868:	e78d      	b.n	8000786 <HAL_GPIO_Init+0x116>
 800086a:	f04f 0903 	mov.w	r9, #3
 800086e:	fa09 f707 	lsl.w	r7, r9, r7
 8000872:	ea4a 0a07 	orr.w	sl, sl, r7
 8000876:	e786      	b.n	8000786 <HAL_GPIO_Init+0x116>
 8000878:	f04f 0904 	mov.w	r9, #4
 800087c:	fa09 f707 	lsl.w	r7, r9, r7
 8000880:	ea4a 0a07 	orr.w	sl, sl, r7
 8000884:	e77f      	b.n	8000786 <HAL_GPIO_Init+0x116>
 8000886:	f04f 0907 	mov.w	r9, #7
 800088a:	fa09 f707 	lsl.w	r7, r9, r7
 800088e:	ea4a 0a07 	orr.w	sl, sl, r7
 8000892:	e778      	b.n	8000786 <HAL_GPIO_Init+0x116>
 8000894:	f04f 0905 	mov.w	r9, #5
 8000898:	fa09 f707 	lsl.w	r7, r9, r7
 800089c:	ea4a 0a07 	orr.w	sl, sl, r7
 80008a0:	e771      	b.n	8000786 <HAL_GPIO_Init+0x116>
 80008a2:	f04f 0906 	mov.w	r9, #6
 80008a6:	fa09 f707 	lsl.w	r7, r9, r7
 80008aa:	ea4a 0a07 	orr.w	sl, sl, r7
 80008ae:	e76a      	b.n	8000786 <HAL_GPIO_Init+0x116>
 80008b0:	f04f 0908 	mov.w	r9, #8
 80008b4:	fa09 f707 	lsl.w	r7, r9, r7
 80008b8:	ea4a 0a07 	orr.w	sl, sl, r7
 80008bc:	e763      	b.n	8000786 <HAL_GPIO_Init+0x116>
 80008be:	bf00      	nop
 80008c0:	40020000 	.word	0x40020000
 80008c4:	40020800 	.word	0x40020800
 80008c8:	40020c00 	.word	0x40020c00
 80008cc:	40021000 	.word	0x40021000
 80008d0:	40021400 	.word	0x40021400
 80008d4:	40021800 	.word	0x40021800
 80008d8:	40013c00 	.word	0x40013c00
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40021c00 	.word	0x40021c00
 80008e4:	40022000 	.word	0x40022000
 80008e8:	40022400 	.word	0x40022400

080008ec <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80008ec:	6903      	ldr	r3, [r0, #16]
 80008ee:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80008f0:	bf14      	ite	ne
 80008f2:	2001      	movne	r0, #1
 80008f4:	2000      	moveq	r0, #0
 80008f6:	4770      	bx	lr

080008f8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80008f8:	b902      	cbnz	r2, 80008fc <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80008fa:	0409      	lsls	r1, r1, #16
 80008fc:	6181      	str	r1, [r0, #24]
  }
}
 80008fe:	4770      	bx	lr

08000900 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000900:	4a04      	ldr	r2, [pc, #16]	; (8000914 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000902:	6951      	ldr	r1, [r2, #20]
 8000904:	4201      	tst	r1, r0
 8000906:	d100      	bne.n	800090a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8000908:	4770      	bx	lr
{
 800090a:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800090c:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800090e:	f002 fd4f 	bl	80033b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8000912:	bd08      	pop	{r3, pc}
 8000914:	40013c00 	.word	0x40013c00

08000918 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000918:	2800      	cmp	r0, #0
 800091a:	f000 8132 	beq.w	8000b82 <HAL_RCC_OscConfig+0x26a>
{
 800091e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000922:	6803      	ldr	r3, [r0, #0]
 8000924:	07dd      	lsls	r5, r3, #31
{
 8000926:	b082      	sub	sp, #8
 8000928:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800092a:	d52f      	bpl.n	800098c <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800092c:	49ac      	ldr	r1, [pc, #688]	; (8000be0 <HAL_RCC_OscConfig+0x2c8>)
 800092e:	688a      	ldr	r2, [r1, #8]
 8000930:	f002 020c 	and.w	r2, r2, #12
 8000934:	2a04      	cmp	r2, #4
 8000936:	f000 80ea 	beq.w	8000b0e <HAL_RCC_OscConfig+0x1f6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800093a:	688a      	ldr	r2, [r1, #8]
 800093c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000940:	2a08      	cmp	r2, #8
 8000942:	f000 80e0 	beq.w	8000b06 <HAL_RCC_OscConfig+0x1ee>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000946:	6863      	ldr	r3, [r4, #4]
 8000948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800094c:	f000 80e9 	beq.w	8000b22 <HAL_RCC_OscConfig+0x20a>
 8000950:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000954:	f000 8154 	beq.w	8000c00 <HAL_RCC_OscConfig+0x2e8>
 8000958:	4da1      	ldr	r5, [pc, #644]	; (8000be0 <HAL_RCC_OscConfig+0x2c8>)
 800095a:	682a      	ldr	r2, [r5, #0]
 800095c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000960:	602a      	str	r2, [r5, #0]
 8000962:	682a      	ldr	r2, [r5, #0]
 8000964:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000968:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800096a:	2b00      	cmp	r3, #0
 800096c:	f040 80de 	bne.w	8000b2c <HAL_RCC_OscConfig+0x214>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000970:	f7ff fdea 	bl	8000548 <HAL_GetTick>
 8000974:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000976:	e005      	b.n	8000984 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000978:	f7ff fde6 	bl	8000548 <HAL_GetTick>
 800097c:	1b80      	subs	r0, r0, r6
 800097e:	2864      	cmp	r0, #100	; 0x64
 8000980:	f200 80f2 	bhi.w	8000b68 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000984:	682b      	ldr	r3, [r5, #0]
 8000986:	039b      	lsls	r3, r3, #14
 8000988:	d4f6      	bmi.n	8000978 <HAL_RCC_OscConfig+0x60>
 800098a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800098c:	079f      	lsls	r7, r3, #30
 800098e:	d475      	bmi.n	8000a7c <HAL_RCC_OscConfig+0x164>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000990:	071a      	lsls	r2, r3, #28
 8000992:	d515      	bpl.n	80009c0 <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000994:	6963      	ldr	r3, [r4, #20]
 8000996:	2b00      	cmp	r3, #0
 8000998:	f000 80a5 	beq.w	8000ae6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800099c:	4b91      	ldr	r3, [pc, #580]	; (8000be4 <HAL_RCC_OscConfig+0x2cc>)

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800099e:	4d90      	ldr	r5, [pc, #576]	; (8000be0 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 80009a0:	2201      	movs	r2, #1
 80009a2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009a4:	f7ff fdd0 	bl	8000548 <HAL_GetTick>
 80009a8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009aa:	e005      	b.n	80009b8 <HAL_RCC_OscConfig+0xa0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009ac:	f7ff fdcc 	bl	8000548 <HAL_GetTick>
 80009b0:	1b80      	subs	r0, r0, r6
 80009b2:	2802      	cmp	r0, #2
 80009b4:	f200 80d8 	bhi.w	8000b68 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009b8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80009ba:	079b      	lsls	r3, r3, #30
 80009bc:	d5f6      	bpl.n	80009ac <HAL_RCC_OscConfig+0x94>
 80009be:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009c0:	0758      	lsls	r0, r3, #29
 80009c2:	d53b      	bpl.n	8000a3c <HAL_RCC_OscConfig+0x124>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009c4:	4a86      	ldr	r2, [pc, #536]	; (8000be0 <HAL_RCC_OscConfig+0x2c8>)
 80009c6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80009c8:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 80009cc:	f040 80db 	bne.w	8000b86 <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80009d0:	9301      	str	r3, [sp, #4]
 80009d2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80009d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d8:	6413      	str	r3, [r2, #64]	; 0x40
 80009da:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80009dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e0:	9301      	str	r3, [sp, #4]
 80009e2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80009e4:	2601      	movs	r6, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009e6:	4d80      	ldr	r5, [pc, #512]	; (8000be8 <HAL_RCC_OscConfig+0x2d0>)
 80009e8:	682a      	ldr	r2, [r5, #0]
 80009ea:	05d1      	lsls	r1, r2, #23
 80009ec:	f140 80ac 	bpl.w	8000b48 <HAL_RCC_OscConfig+0x230>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009f0:	68a3      	ldr	r3, [r4, #8]
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	f000 80c9 	beq.w	8000b8a <HAL_RCC_OscConfig+0x272>
 80009f8:	2b05      	cmp	r3, #5
 80009fa:	f000 810b 	beq.w	8000c14 <HAL_RCC_OscConfig+0x2fc>
 80009fe:	4d78      	ldr	r5, [pc, #480]	; (8000be0 <HAL_RCC_OscConfig+0x2c8>)
 8000a00:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a02:	f022 0201 	bic.w	r2, r2, #1
 8000a06:	672a      	str	r2, [r5, #112]	; 0x70
 8000a08:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a0a:	f022 0204 	bic.w	r2, r2, #4
 8000a0e:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	f040 80bf 	bne.w	8000b94 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a16:	f7ff fd97 	bl	8000548 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a1a:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000a1e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a20:	e006      	b.n	8000a30 <HAL_RCC_OscConfig+0x118>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a22:	f7ff fd91 	bl	8000548 <HAL_GetTick>
 8000a26:	eba0 0008 	sub.w	r0, r0, r8
 8000a2a:	42b8      	cmp	r0, r7
 8000a2c:	f200 809c 	bhi.w	8000b68 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a30:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a32:	0798      	lsls	r0, r3, #30
 8000a34:	d4f5      	bmi.n	8000a22 <HAL_RCC_OscConfig+0x10a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000a36:	2e00      	cmp	r6, #0
 8000a38:	f040 80dc 	bne.w	8000bf4 <HAL_RCC_OscConfig+0x2dc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000a3c:	69a2      	ldr	r2, [r4, #24]
 8000a3e:	b1ca      	cbz	r2, 8000a74 <HAL_RCC_OscConfig+0x15c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000a40:	4d67      	ldr	r5, [pc, #412]	; (8000be0 <HAL_RCC_OscConfig+0x2c8>)
 8000a42:	68a9      	ldr	r1, [r5, #8]
 8000a44:	f001 010c 	and.w	r1, r1, #12
 8000a48:	2908      	cmp	r1, #8
 8000a4a:	d048      	beq.n	8000ade <HAL_RCC_OscConfig+0x1c6>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a4c:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000a4e:	4a67      	ldr	r2, [pc, #412]	; (8000bec <HAL_RCC_OscConfig+0x2d4>)
 8000a50:	f04f 0100 	mov.w	r1, #0
 8000a54:	6011      	str	r1, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a56:	f000 80e7 	beq.w	8000c28 <HAL_RCC_OscConfig+0x310>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a5a:	f7ff fd75 	bl	8000548 <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000a5e:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8000a60:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000a62:	e004      	b.n	8000a6e <HAL_RCC_OscConfig+0x156>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a64:	f7ff fd70 	bl	8000548 <HAL_GetTick>
 8000a68:	1b40      	subs	r0, r0, r5
 8000a6a:	2802      	cmp	r0, #2
 8000a6c:	d87c      	bhi.n	8000b68 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000a6e:	6823      	ldr	r3, [r4, #0]
 8000a70:	019b      	lsls	r3, r3, #6
 8000a72:	d4f7      	bmi.n	8000a64 <HAL_RCC_OscConfig+0x14c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000a74:	2000      	movs	r0, #0
}
 8000a76:	b002      	add	sp, #8
 8000a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000a7c:	4a58      	ldr	r2, [pc, #352]	; (8000be0 <HAL_RCC_OscConfig+0x2c8>)
 8000a7e:	6891      	ldr	r1, [r2, #8]
 8000a80:	f011 0f0c 	tst.w	r1, #12
 8000a84:	d024      	beq.n	8000ad0 <HAL_RCC_OscConfig+0x1b8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000a86:	6891      	ldr	r1, [r2, #8]
 8000a88:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000a8c:	2908      	cmp	r1, #8
 8000a8e:	d01c      	beq.n	8000aca <HAL_RCC_OscConfig+0x1b2>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000a90:	68e3      	ldr	r3, [r4, #12]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	f000 8092 	beq.w	8000bbc <HAL_RCC_OscConfig+0x2a4>
        __HAL_RCC_HSI_ENABLE();
 8000a98:	4b55      	ldr	r3, [pc, #340]	; (8000bf0 <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a9a:	4d51      	ldr	r5, [pc, #324]	; (8000be0 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000aa0:	f7ff fd52 	bl	8000548 <HAL_GetTick>
 8000aa4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000aa6:	e004      	b.n	8000ab2 <HAL_RCC_OscConfig+0x19a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000aa8:	f7ff fd4e 	bl	8000548 <HAL_GetTick>
 8000aac:	1b80      	subs	r0, r0, r6
 8000aae:	2802      	cmp	r0, #2
 8000ab0:	d85a      	bhi.n	8000b68 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ab2:	682b      	ldr	r3, [r5, #0]
 8000ab4:	0798      	lsls	r0, r3, #30
 8000ab6:	d5f7      	bpl.n	8000aa8 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ab8:	682b      	ldr	r3, [r5, #0]
 8000aba:	6922      	ldr	r2, [r4, #16]
 8000abc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000ac0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000ac4:	602b      	str	r3, [r5, #0]
 8000ac6:	6823      	ldr	r3, [r4, #0]
 8000ac8:	e762      	b.n	8000990 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000aca:	6852      	ldr	r2, [r2, #4]
 8000acc:	0256      	lsls	r6, r2, #9
 8000ace:	d4df      	bmi.n	8000a90 <HAL_RCC_OscConfig+0x178>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ad0:	4a43      	ldr	r2, [pc, #268]	; (8000be0 <HAL_RCC_OscConfig+0x2c8>)
 8000ad2:	6812      	ldr	r2, [r2, #0]
 8000ad4:	0795      	lsls	r5, r2, #30
 8000ad6:	d54b      	bpl.n	8000b70 <HAL_RCC_OscConfig+0x258>
 8000ad8:	68e2      	ldr	r2, [r4, #12]
 8000ada:	2a01      	cmp	r2, #1
 8000adc:	d048      	beq.n	8000b70 <HAL_RCC_OscConfig+0x258>
    return HAL_ERROR;
 8000ade:	2001      	movs	r0, #1
}
 8000ae0:	b002      	add	sp, #8
 8000ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8000ae6:	4a3f      	ldr	r2, [pc, #252]	; (8000be4 <HAL_RCC_OscConfig+0x2cc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ae8:	4d3d      	ldr	r5, [pc, #244]	; (8000be0 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 8000aea:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000aec:	f7ff fd2c 	bl	8000548 <HAL_GetTick>
 8000af0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000af2:	e004      	b.n	8000afe <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000af4:	f7ff fd28 	bl	8000548 <HAL_GetTick>
 8000af8:	1b80      	subs	r0, r0, r6
 8000afa:	2802      	cmp	r0, #2
 8000afc:	d834      	bhi.n	8000b68 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000afe:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000b00:	079f      	lsls	r7, r3, #30
 8000b02:	d4f7      	bmi.n	8000af4 <HAL_RCC_OscConfig+0x1dc>
 8000b04:	e75b      	b.n	80009be <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b06:	684a      	ldr	r2, [r1, #4]
 8000b08:	0250      	lsls	r0, r2, #9
 8000b0a:	f57f af1c 	bpl.w	8000946 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b0e:	4a34      	ldr	r2, [pc, #208]	; (8000be0 <HAL_RCC_OscConfig+0x2c8>)
 8000b10:	6812      	ldr	r2, [r2, #0]
 8000b12:	0391      	lsls	r1, r2, #14
 8000b14:	f57f af3a 	bpl.w	800098c <HAL_RCC_OscConfig+0x74>
 8000b18:	6862      	ldr	r2, [r4, #4]
 8000b1a:	2a00      	cmp	r2, #0
 8000b1c:	f47f af36 	bne.w	800098c <HAL_RCC_OscConfig+0x74>
 8000b20:	e7dd      	b.n	8000ade <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b22:	4a2f      	ldr	r2, [pc, #188]	; (8000be0 <HAL_RCC_OscConfig+0x2c8>)
 8000b24:	6813      	ldr	r3, [r2, #0]
 8000b26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b2a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000b2c:	f7ff fd0c 	bl	8000548 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b30:	4d2b      	ldr	r5, [pc, #172]	; (8000be0 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000b32:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b34:	e004      	b.n	8000b40 <HAL_RCC_OscConfig+0x228>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b36:	f7ff fd07 	bl	8000548 <HAL_GetTick>
 8000b3a:	1b80      	subs	r0, r0, r6
 8000b3c:	2864      	cmp	r0, #100	; 0x64
 8000b3e:	d813      	bhi.n	8000b68 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b40:	682b      	ldr	r3, [r5, #0]
 8000b42:	039a      	lsls	r2, r3, #14
 8000b44:	d5f7      	bpl.n	8000b36 <HAL_RCC_OscConfig+0x21e>
 8000b46:	e720      	b.n	800098a <HAL_RCC_OscConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b48:	682a      	ldr	r2, [r5, #0]
 8000b4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b4e:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 8000b50:	f7ff fcfa 	bl	8000548 <HAL_GetTick>
 8000b54:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b56:	682b      	ldr	r3, [r5, #0]
 8000b58:	05da      	lsls	r2, r3, #23
 8000b5a:	f53f af49 	bmi.w	80009f0 <HAL_RCC_OscConfig+0xd8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b5e:	f7ff fcf3 	bl	8000548 <HAL_GetTick>
 8000b62:	1bc0      	subs	r0, r0, r7
 8000b64:	2802      	cmp	r0, #2
 8000b66:	d9f6      	bls.n	8000b56 <HAL_RCC_OscConfig+0x23e>
            return HAL_TIMEOUT;
 8000b68:	2003      	movs	r0, #3
}
 8000b6a:	b002      	add	sp, #8
 8000b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b70:	491b      	ldr	r1, [pc, #108]	; (8000be0 <HAL_RCC_OscConfig+0x2c8>)
 8000b72:	6920      	ldr	r0, [r4, #16]
 8000b74:	680a      	ldr	r2, [r1, #0]
 8000b76:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000b7a:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8000b7e:	600a      	str	r2, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b80:	e706      	b.n	8000990 <HAL_RCC_OscConfig+0x78>
    return HAL_ERROR;
 8000b82:	2001      	movs	r0, #1
}
 8000b84:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 8000b86:	2600      	movs	r6, #0
 8000b88:	e72d      	b.n	80009e6 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b8a:	4a15      	ldr	r2, [pc, #84]	; (8000be0 <HAL_RCC_OscConfig+0x2c8>)
 8000b8c:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8000b8e:	f043 0301 	orr.w	r3, r3, #1
 8000b92:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000b94:	f7ff fcd8 	bl	8000548 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b98:	4d11      	ldr	r5, [pc, #68]	; (8000be0 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000b9a:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b9c:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ba0:	e005      	b.n	8000bae <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ba2:	f7ff fcd1 	bl	8000548 <HAL_GetTick>
 8000ba6:	eba0 0008 	sub.w	r0, r0, r8
 8000baa:	42b8      	cmp	r0, r7
 8000bac:	d8dc      	bhi.n	8000b68 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bae:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000bb0:	079b      	lsls	r3, r3, #30
 8000bb2:	d5f6      	bpl.n	8000ba2 <HAL_RCC_OscConfig+0x28a>
    if(pwrclkchanged == SET)
 8000bb4:	2e00      	cmp	r6, #0
 8000bb6:	f43f af41 	beq.w	8000a3c <HAL_RCC_OscConfig+0x124>
 8000bba:	e01b      	b.n	8000bf4 <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_HSI_DISABLE();
 8000bbc:	4a0c      	ldr	r2, [pc, #48]	; (8000bf0 <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bbe:	4d08      	ldr	r5, [pc, #32]	; (8000be0 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 8000bc0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000bc2:	f7ff fcc1 	bl	8000548 <HAL_GetTick>
 8000bc6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bc8:	e004      	b.n	8000bd4 <HAL_RCC_OscConfig+0x2bc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bca:	f7ff fcbd 	bl	8000548 <HAL_GetTick>
 8000bce:	1b80      	subs	r0, r0, r6
 8000bd0:	2802      	cmp	r0, #2
 8000bd2:	d8c9      	bhi.n	8000b68 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bd4:	682b      	ldr	r3, [r5, #0]
 8000bd6:	0799      	lsls	r1, r3, #30
 8000bd8:	d4f7      	bmi.n	8000bca <HAL_RCC_OscConfig+0x2b2>
 8000bda:	6823      	ldr	r3, [r4, #0]
 8000bdc:	e6d8      	b.n	8000990 <HAL_RCC_OscConfig+0x78>
 8000bde:	bf00      	nop
 8000be0:	40023800 	.word	0x40023800
 8000be4:	42470e80 	.word	0x42470e80
 8000be8:	40007000 	.word	0x40007000
 8000bec:	42470060 	.word	0x42470060
 8000bf0:	42470000 	.word	0x42470000
      __HAL_RCC_PWR_CLK_DISABLE();
 8000bf4:	4a23      	ldr	r2, [pc, #140]	; (8000c84 <HAL_RCC_OscConfig+0x36c>)
 8000bf6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000bf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfe:	e71d      	b.n	8000a3c <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c00:	4b20      	ldr	r3, [pc, #128]	; (8000c84 <HAL_RCC_OscConfig+0x36c>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	e78b      	b.n	8000b2c <HAL_RCC_OscConfig+0x214>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c14:	4b1b      	ldr	r3, [pc, #108]	; (8000c84 <HAL_RCC_OscConfig+0x36c>)
 8000c16:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000c18:	f042 0204 	orr.w	r2, r2, #4
 8000c1c:	671a      	str	r2, [r3, #112]	; 0x70
 8000c1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000c20:	f042 0201 	orr.w	r2, r2, #1
 8000c24:	671a      	str	r2, [r3, #112]	; 0x70
 8000c26:	e7b5      	b.n	8000b94 <HAL_RCC_OscConfig+0x27c>
        tickstart = HAL_GetTick();
 8000c28:	f7ff fc8e 	bl	8000548 <HAL_GetTick>
 8000c2c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c2e:	e004      	b.n	8000c3a <HAL_RCC_OscConfig+0x322>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c30:	f7ff fc8a 	bl	8000548 <HAL_GetTick>
 8000c34:	1b80      	subs	r0, r0, r6
 8000c36:	2802      	cmp	r0, #2
 8000c38:	d896      	bhi.n	8000b68 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c3a:	682b      	ldr	r3, [r5, #0]
 8000c3c:	0199      	lsls	r1, r3, #6
 8000c3e:	d4f7      	bmi.n	8000c30 <HAL_RCC_OscConfig+0x318>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000c40:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 8000c44:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8000c48:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c4a:	4c0e      	ldr	r4, [pc, #56]	; (8000c84 <HAL_RCC_OscConfig+0x36c>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000c4c:	4333      	orrs	r3, r6
 8000c4e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8000c52:	0852      	lsrs	r2, r2, #1
 8000c54:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8000c58:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8000c5a:	490b      	ldr	r1, [pc, #44]	; (8000c88 <HAL_RCC_OscConfig+0x370>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000c5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8000c60:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000c62:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000c64:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8000c66:	f7ff fc6f 	bl	8000548 <HAL_GetTick>
 8000c6a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c6c:	e005      	b.n	8000c7a <HAL_RCC_OscConfig+0x362>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c6e:	f7ff fc6b 	bl	8000548 <HAL_GetTick>
 8000c72:	1b40      	subs	r0, r0, r5
 8000c74:	2802      	cmp	r0, #2
 8000c76:	f63f af77 	bhi.w	8000b68 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c7a:	6823      	ldr	r3, [r4, #0]
 8000c7c:	019a      	lsls	r2, r3, #6
 8000c7e:	d5f6      	bpl.n	8000c6e <HAL_RCC_OscConfig+0x356>
 8000c80:	e6f8      	b.n	8000a74 <HAL_RCC_OscConfig+0x15c>
 8000c82:	bf00      	nop
 8000c84:	40023800 	.word	0x40023800
 8000c88:	42470060 	.word	0x42470060

08000c8c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c8c:	4917      	ldr	r1, [pc, #92]	; (8000cec <HAL_RCC_GetSysClockFreq+0x60>)
{
 8000c8e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c90:	688b      	ldr	r3, [r1, #8]
 8000c92:	f003 030c 	and.w	r3, r3, #12
 8000c96:	2b04      	cmp	r3, #4
 8000c98:	d01b      	beq.n	8000cd2 <HAL_RCC_GetSysClockFreq+0x46>
 8000c9a:	2b08      	cmp	r3, #8
 8000c9c:	d117      	bne.n	8000cce <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c9e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000ca0:	684b      	ldr	r3, [r1, #4]
 8000ca2:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000ca6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000caa:	d114      	bne.n	8000cd6 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000cac:	6849      	ldr	r1, [r1, #4]
 8000cae:	4810      	ldr	r0, [pc, #64]	; (8000cf0 <HAL_RCC_GetSysClockFreq+0x64>)
 8000cb0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000cb4:	fba1 0100 	umull	r0, r1, r1, r0
 8000cb8:	f7ff faa0 	bl	80001fc <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <HAL_RCC_GetSysClockFreq+0x60>)
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8000cc8:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000ccc:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8000cce:	4808      	ldr	r0, [pc, #32]	; (8000cf0 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8000cd0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000cd2:	4808      	ldr	r0, [pc, #32]	; (8000cf4 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8000cd4:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000cd6:	684b      	ldr	r3, [r1, #4]
 8000cd8:	4806      	ldr	r0, [pc, #24]	; (8000cf4 <HAL_RCC_GetSysClockFreq+0x68>)
 8000cda:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8000cde:	fba3 0100 	umull	r0, r1, r3, r0
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	f7ff fa8a 	bl	80001fc <__aeabi_uldivmod>
 8000ce8:	e7e8      	b.n	8000cbc <HAL_RCC_GetSysClockFreq+0x30>
 8000cea:	bf00      	nop
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	00f42400 	.word	0x00f42400
 8000cf4:	007a1200 	.word	0x007a1200

08000cf8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8000cf8:	b160      	cbz	r0, 8000d14 <HAL_RCC_ClockConfig+0x1c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000cfa:	4a48      	ldr	r2, [pc, #288]	; (8000e1c <HAL_RCC_ClockConfig+0x124>)
 8000cfc:	6813      	ldr	r3, [r2, #0]
 8000cfe:	f003 030f 	and.w	r3, r3, #15
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d208      	bcs.n	8000d18 <HAL_RCC_ClockConfig+0x20>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d06:	b2cb      	uxtb	r3, r1
 8000d08:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d0a:	6813      	ldr	r3, [r2, #0]
 8000d0c:	f003 030f 	and.w	r3, r3, #15
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d001      	beq.n	8000d18 <HAL_RCC_ClockConfig+0x20>
    return HAL_ERROR;
 8000d14:	2001      	movs	r0, #1
}
 8000d16:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d18:	6803      	ldr	r3, [r0, #0]
{
 8000d1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d1e:	079d      	lsls	r5, r3, #30
 8000d20:	d514      	bpl.n	8000d4c <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d22:	075c      	lsls	r4, r3, #29
 8000d24:	d504      	bpl.n	8000d30 <HAL_RCC_ClockConfig+0x38>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d26:	4c3e      	ldr	r4, [pc, #248]	; (8000e20 <HAL_RCC_ClockConfig+0x128>)
 8000d28:	68a2      	ldr	r2, [r4, #8]
 8000d2a:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8000d2e:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d30:	071a      	lsls	r2, r3, #28
 8000d32:	d504      	bpl.n	8000d3e <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d34:	4c3a      	ldr	r4, [pc, #232]	; (8000e20 <HAL_RCC_ClockConfig+0x128>)
 8000d36:	68a2      	ldr	r2, [r4, #8]
 8000d38:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8000d3c:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d3e:	4c38      	ldr	r4, [pc, #224]	; (8000e20 <HAL_RCC_ClockConfig+0x128>)
 8000d40:	6885      	ldr	r5, [r0, #8]
 8000d42:	68a2      	ldr	r2, [r4, #8]
 8000d44:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000d48:	432a      	orrs	r2, r5
 8000d4a:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d4c:	07df      	lsls	r7, r3, #31
 8000d4e:	4604      	mov	r4, r0
 8000d50:	460d      	mov	r5, r1
 8000d52:	d522      	bpl.n	8000d9a <HAL_RCC_ClockConfig+0xa2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d54:	6842      	ldr	r2, [r0, #4]
 8000d56:	2a01      	cmp	r2, #1
 8000d58:	d056      	beq.n	8000e08 <HAL_RCC_ClockConfig+0x110>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d5a:	1e93      	subs	r3, r2, #2
 8000d5c:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d5e:	4b30      	ldr	r3, [pc, #192]	; (8000e20 <HAL_RCC_ClockConfig+0x128>)
 8000d60:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d62:	d958      	bls.n	8000e16 <HAL_RCC_ClockConfig+0x11e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d64:	0799      	lsls	r1, r3, #30
 8000d66:	d525      	bpl.n	8000db4 <HAL_RCC_ClockConfig+0xbc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d68:	4e2d      	ldr	r6, [pc, #180]	; (8000e20 <HAL_RCC_ClockConfig+0x128>)
 8000d6a:	68b3      	ldr	r3, [r6, #8]
 8000d6c:	f023 0303 	bic.w	r3, r3, #3
 8000d70:	4313      	orrs	r3, r2
 8000d72:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000d74:	f7ff fbe8 	bl	8000548 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d78:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d7c:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d7e:	e005      	b.n	8000d8c <HAL_RCC_ClockConfig+0x94>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d80:	f7ff fbe2 	bl	8000548 <HAL_GetTick>
 8000d84:	eba0 0008 	sub.w	r0, r0, r8
 8000d88:	42b8      	cmp	r0, r7
 8000d8a:	d842      	bhi.n	8000e12 <HAL_RCC_ClockConfig+0x11a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d8c:	68b3      	ldr	r3, [r6, #8]
 8000d8e:	6862      	ldr	r2, [r4, #4]
 8000d90:	f003 030c 	and.w	r3, r3, #12
 8000d94:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000d98:	d1f2      	bne.n	8000d80 <HAL_RCC_ClockConfig+0x88>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000d9a:	4a20      	ldr	r2, [pc, #128]	; (8000e1c <HAL_RCC_ClockConfig+0x124>)
 8000d9c:	6813      	ldr	r3, [r2, #0]
 8000d9e:	f003 030f 	and.w	r3, r3, #15
 8000da2:	42ab      	cmp	r3, r5
 8000da4:	d909      	bls.n	8000dba <HAL_RCC_ClockConfig+0xc2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000da6:	b2eb      	uxtb	r3, r5
 8000da8:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000daa:	6813      	ldr	r3, [r2, #0]
 8000dac:	f003 030f 	and.w	r3, r3, #15
 8000db0:	42ab      	cmp	r3, r5
 8000db2:	d002      	beq.n	8000dba <HAL_RCC_ClockConfig+0xc2>
    return HAL_ERROR;
 8000db4:	2001      	movs	r0, #1
}
 8000db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000dba:	6823      	ldr	r3, [r4, #0]
 8000dbc:	075a      	lsls	r2, r3, #29
 8000dbe:	d506      	bpl.n	8000dce <HAL_RCC_ClockConfig+0xd6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000dc0:	4917      	ldr	r1, [pc, #92]	; (8000e20 <HAL_RCC_ClockConfig+0x128>)
 8000dc2:	68e0      	ldr	r0, [r4, #12]
 8000dc4:	688a      	ldr	r2, [r1, #8]
 8000dc6:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8000dca:	4302      	orrs	r2, r0
 8000dcc:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000dce:	071b      	lsls	r3, r3, #28
 8000dd0:	d411      	bmi.n	8000df6 <HAL_RCC_ClockConfig+0xfe>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000dd2:	f7ff ff5b 	bl	8000c8c <HAL_RCC_GetSysClockFreq>
 8000dd6:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <HAL_RCC_ClockConfig+0x128>)
 8000dd8:	4912      	ldr	r1, [pc, #72]	; (8000e24 <HAL_RCC_ClockConfig+0x12c>)
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	4a12      	ldr	r2, [pc, #72]	; (8000e28 <HAL_RCC_ClockConfig+0x130>)
 8000dde:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000de2:	5ccb      	ldrb	r3, [r1, r3]
 8000de4:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (TICK_INT_PRIORITY);
 8000de8:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000dea:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000dec:	f002 f8c8 	bl	8002f80 <HAL_InitTick>
  return HAL_OK;
 8000df0:	2000      	movs	r0, #0
}
 8000df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000df6:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <HAL_RCC_ClockConfig+0x128>)
 8000df8:	6921      	ldr	r1, [r4, #16]
 8000dfa:	6893      	ldr	r3, [r2, #8]
 8000dfc:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000e00:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000e04:	6093      	str	r3, [r2, #8]
 8000e06:	e7e4      	b.n	8000dd2 <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <HAL_RCC_ClockConfig+0x128>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	039e      	lsls	r6, r3, #14
 8000e0e:	d4ab      	bmi.n	8000d68 <HAL_RCC_ClockConfig+0x70>
 8000e10:	e7d0      	b.n	8000db4 <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 8000e12:	2003      	movs	r0, #3
 8000e14:	e7ed      	b.n	8000df2 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e16:	0198      	lsls	r0, r3, #6
 8000e18:	d4a6      	bmi.n	8000d68 <HAL_RCC_ClockConfig+0x70>
 8000e1a:	e7cb      	b.n	8000db4 <HAL_RCC_ClockConfig+0xbc>
 8000e1c:	40023c00 	.word	0x40023c00
 8000e20:	40023800 	.word	0x40023800
 8000e24:	080036f4 	.word	0x080036f4
 8000e28:	20000024 	.word	0x20000024

08000e2c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000e2c:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000e2e:	4a05      	ldr	r2, [pc, #20]	; (8000e44 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000e30:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8000e32:	4905      	ldr	r1, [pc, #20]	; (8000e48 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000e34:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000e38:	6808      	ldr	r0, [r1, #0]
 8000e3a:	5cd3      	ldrb	r3, [r2, r3]
}
 8000e3c:	40d8      	lsrs	r0, r3
 8000e3e:	4770      	bx	lr
 8000e40:	40023800 	.word	0x40023800
 8000e44:	08003704 	.word	0x08003704
 8000e48:	20000024 	.word	0x20000024

08000e4c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000e4c:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000e4e:	4a05      	ldr	r2, [pc, #20]	; (8000e64 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000e50:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8000e52:	4905      	ldr	r1, [pc, #20]	; (8000e68 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000e54:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000e58:	6808      	ldr	r0, [r1, #0]
 8000e5a:	5cd3      	ldrb	r3, [r2, r3]
}
 8000e5c:	40d8      	lsrs	r0, r3
 8000e5e:	4770      	bx	lr
 8000e60:	40023800 	.word	0x40023800
 8000e64:	08003704 	.word	0x08003704
 8000e68:	20000024 	.word	0x20000024

08000e6c <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000e6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000e6e:	220f      	movs	r2, #15
 8000e70:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000e72:	689a      	ldr	r2, [r3, #8]
 8000e74:	f002 0203 	and.w	r2, r2, #3
 8000e78:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000e7a:	689a      	ldr	r2, [r3, #8]
 8000e7c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000e80:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000e82:	689a      	ldr	r2, [r3, #8]
 8000e84:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8000e88:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	08db      	lsrs	r3, r3, #3
{
 8000e8e:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000e90:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000e94:	4c05      	ldr	r4, [pc, #20]	; (8000eac <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000e96:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000e98:	6823      	ldr	r3, [r4, #0]
}
 8000e9a:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000e9e:	f003 030f 	and.w	r3, r3, #15
 8000ea2:	600b      	str	r3, [r1, #0]
}
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40023c00 	.word	0x40023c00

08000eb0 <SPI_WaitFlagStateUntilTimeout.constprop.7>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8000eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000eb4:	4607      	mov	r7, r0
 8000eb6:	460d      	mov	r5, r1
 8000eb8:	4616      	mov	r6, r2
 8000eba:	4698      	mov	r8, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000ebc:	683c      	ldr	r4, [r7, #0]
 8000ebe:	e001      	b.n	8000ec4 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x14>
  {
    if (Timeout != HAL_MAX_DELAY)
 8000ec0:	1c73      	adds	r3, r6, #1
 8000ec2:	d106      	bne.n	8000ed2 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x22>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000ec4:	68a0      	ldr	r0, [r4, #8]
 8000ec6:	ea35 0300 	bics.w	r3, r5, r0
 8000eca:	d0f9      	beq.n	8000ec0 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000ecc:	2000      	movs	r0, #0
}
 8000ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8000ed2:	f7ff fb39 	bl	8000548 <HAL_GetTick>
 8000ed6:	eba0 0008 	sub.w	r0, r0, r8
 8000eda:	4286      	cmp	r6, r0
 8000edc:	d8ee      	bhi.n	8000ebc <SPI_WaitFlagStateUntilTimeout.constprop.7+0xc>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000ede:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000ee2:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000ee4:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000ee8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000eec:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000eee:	d014      	beq.n	8000f1a <SPI_WaitFlagStateUntilTimeout.constprop.7+0x6a>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000ef0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ef2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000ef6:	d007      	beq.n	8000f08 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x58>
        hspi->State = HAL_SPI_STATE_READY;
 8000ef8:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8000efa:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8000efc:	f887 2051 	strb.w	r2, [r7, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8000f00:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8000f04:	2003      	movs	r0, #3
 8000f06:	e7e2      	b.n	8000ece <SPI_WaitFlagStateUntilTimeout.constprop.7+0x1e>
          SPI_RESET_CRC(hspi);
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	e7ee      	b.n	8000ef8 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x48>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000f1a:	68ba      	ldr	r2, [r7, #8]
 8000f1c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000f20:	d002      	beq.n	8000f28 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000f22:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000f26:	d1e3      	bne.n	8000ef0 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x40>
          __HAL_SPI_DISABLE(hspi);
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	e7de      	b.n	8000ef0 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x40>
 8000f32:	bf00      	nop

08000f34 <SPI_EndRxTxTransaction>:
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8000f34:	4b16      	ldr	r3, [pc, #88]	; (8000f90 <SPI_EndRxTxTransaction+0x5c>)
{
 8000f36:	b530      	push	{r4, r5, lr}
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4d16      	ldr	r5, [pc, #88]	; (8000f94 <SPI_EndRxTxTransaction+0x60>)
 8000f3c:	fba5 5303 	umull	r5, r3, r5, r3
 8000f40:	0d5b      	lsrs	r3, r3, #21
 8000f42:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8000f46:	fb05 f303 	mul.w	r3, r5, r3
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000f4a:	6845      	ldr	r5, [r0, #4]
{
 8000f4c:	b083      	sub	sp, #12
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000f4e:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
{
 8000f52:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8000f54:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000f56:	d107      	bne.n	8000f68 <SPI_EndRxTxTransaction+0x34>
 8000f58:	e00c      	b.n	8000f74 <SPI_EndRxTxTransaction+0x40>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 8000f5a:	9b01      	ldr	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8000f5c:	6822      	ldr	r2, [r4, #0]
      count--;
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8000f62:	6893      	ldr	r3, [r2, #8]
 8000f64:	061b      	lsls	r3, r3, #24
 8000f66:	d502      	bpl.n	8000f6e <SPI_EndRxTxTransaction+0x3a>
      if (count == 0U)
 8000f68:	9b01      	ldr	r3, [sp, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d1f5      	bne.n	8000f5a <SPI_EndRxTxTransaction+0x26>
  }

  return HAL_OK;
 8000f6e:	2000      	movs	r0, #0
}
 8000f70:	b003      	add	sp, #12
 8000f72:	bd30      	pop	{r4, r5, pc}
 8000f74:	4613      	mov	r3, r2
 8000f76:	460a      	mov	r2, r1
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000f78:	2180      	movs	r1, #128	; 0x80
 8000f7a:	f7ff ff99 	bl	8000eb0 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 8000f7e:	2800      	cmp	r0, #0
 8000f80:	d0f5      	beq.n	8000f6e <SPI_EndRxTxTransaction+0x3a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000f82:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000f84:	f043 0320 	orr.w	r3, r3, #32
 8000f88:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8000f8a:	2003      	movs	r0, #3
 8000f8c:	e7f0      	b.n	8000f70 <SPI_EndRxTxTransaction+0x3c>
 8000f8e:	bf00      	nop
 8000f90:	20000024 	.word	0x20000024
 8000f94:	165e9f81 	.word	0x165e9f81

08000f98 <HAL_SPI_Init>:
  if (hspi == NULL)
 8000f98:	2800      	cmp	r0, #0
 8000f9a:	d03b      	beq.n	8001014 <HAL_SPI_Init+0x7c>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000f9c:	f890 2051 	ldrb.w	r2, [r0, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fa0:	2300      	movs	r3, #0
{
 8000fa2:	b570      	push	{r4, r5, r6, lr}
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000fa4:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8000fa8:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000faa:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000fac:	b362      	cbz	r2, 8001008 <HAL_SPI_Init+0x70>
 8000fae:	4618      	mov	r0, r3
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000fb0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8000fb4:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 8000fb8:	432b      	orrs	r3, r5
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	6962      	ldr	r2, [r4, #20]
 8000fbe:	69e5      	ldr	r5, [r4, #28]
 8000fc0:	6a26      	ldr	r6, [r4, #32]
 8000fc2:	430b      	orrs	r3, r1
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	69a2      	ldr	r2, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 8000fc8:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000fca:	432b      	orrs	r3, r5
  hspi->State = HAL_SPI_STATE_BUSY;
 8000fcc:	2502      	movs	r5, #2
 8000fce:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000fd2:	4333      	orrs	r3, r6
 8000fd4:	f402 7500 	and.w	r5, r2, #512	; 0x200
  __HAL_SPI_DISABLE(hspi);
 8000fd8:	680e      	ldr	r6, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000fda:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000fdc:	0c12      	lsrs	r2, r2, #16
 8000fde:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8000fe0:	f002 0204 	and.w	r2, r2, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000fe4:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000fe6:	432a      	orrs	r2, r5
  __HAL_SPI_DISABLE(hspi);
 8000fe8:	f026 0640 	bic.w	r6, r6, #64	; 0x40
 8000fec:	600e      	str	r6, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000fee:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000ff0:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000ff2:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000ff4:	2200      	movs	r2, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000ff6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8000ffa:	2501      	movs	r5, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000ffc:	61cb      	str	r3, [r1, #28]
  return HAL_OK;
 8000ffe:	4610      	mov	r0, r2
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001000:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001002:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
}
 8001006:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 8001008:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800100c:	f001 fee0 	bl	8002dd0 <HAL_SPI_MspInit>
 8001010:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001012:	e7cd      	b.n	8000fb0 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8001014:	2001      	movs	r0, #1
}
 8001016:	4770      	bx	lr

08001018 <HAL_SPI_Transmit>:
{
 8001018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hspi);
 800101c:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 8001020:	2c01      	cmp	r4, #1
{
 8001022:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8001024:	d073      	beq.n	800110e <HAL_SPI_Transmit+0xf6>
 8001026:	461d      	mov	r5, r3
 8001028:	2301      	movs	r3, #1
 800102a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 800102e:	4604      	mov	r4, r0
 8001030:	4617      	mov	r7, r2
 8001032:	4688      	mov	r8, r1
  tickstart = HAL_GetTick();
 8001034:	f7ff fa88 	bl	8000548 <HAL_GetTick>
 8001038:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800103a:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 800103e:	b2c0      	uxtb	r0, r0
 8001040:	2801      	cmp	r0, #1
 8001042:	d009      	beq.n	8001058 <HAL_SPI_Transmit+0x40>
    errorcode = HAL_BUSY;
 8001044:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8001046:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8001048:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800104a:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800104e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001052:	b002      	add	sp, #8
 8001054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 8001058:	f1b8 0f00 	cmp.w	r8, #0
 800105c:	d0f3      	beq.n	8001046 <HAL_SPI_Transmit+0x2e>
 800105e:	2f00      	cmp	r7, #0
 8001060:	d0f1      	beq.n	8001046 <HAL_SPI_Transmit+0x2e>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001062:	68a2      	ldr	r2, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001064:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001068:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800106a:	2103      	movs	r1, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800106c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001070:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001074:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001076:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxXferSize  = 0U;
 8001078:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 800107a:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 800107e:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001080:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->RxXferCount = 0U;
 8001082:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001084:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001086:	d103      	bne.n	8001090 <HAL_SPI_Transmit+0x78>
    SPI_1LINE_TX(hspi);
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800108e:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	0652      	lsls	r2, r2, #25
 8001094:	d53f      	bpl.n	8001116 <HAL_SPI_Transmit+0xfe>
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001096:	68e2      	ldr	r2, [r4, #12]
 8001098:	6861      	ldr	r1, [r4, #4]
 800109a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800109e:	d04b      	beq.n	8001138 <HAL_SPI_Transmit+0x120>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80010a0:	2900      	cmp	r1, #0
 80010a2:	d13d      	bne.n	8001120 <HAL_SPI_Transmit+0x108>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80010a4:	f898 2000 	ldrb.w	r2, [r8]
 80010a8:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 80010aa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80010ac:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80010ae:	3b01      	subs	r3, #1
 80010b0:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80010b2:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 80010b4:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80010b6:	6322      	str	r2, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 80010b8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	b18b      	cbz	r3, 80010e2 <HAL_SPI_Transmit+0xca>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80010be:	6823      	ldr	r3, [r4, #0]
 80010c0:	689a      	ldr	r2, [r3, #8]
 80010c2:	0792      	lsls	r2, r2, #30
 80010c4:	d52f      	bpl.n	8001126 <HAL_SPI_Transmit+0x10e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80010c6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80010c8:	7812      	ldrb	r2, [r2, #0]
 80010ca:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80010cc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80010ce:	6b21      	ldr	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80010d0:	3b01      	subs	r3, #1
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80010d6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80010d8:	3101      	adds	r1, #1
    while (hspi->TxXferCount > 0U)
 80010da:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80010dc:	6321      	str	r1, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1ed      	bne.n	80010be <HAL_SPI_Transmit+0xa6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80010e2:	4632      	mov	r2, r6
 80010e4:	4629      	mov	r1, r5
 80010e6:	4620      	mov	r0, r4
 80010e8:	f7ff ff24 	bl	8000f34 <SPI_EndRxTxTransaction>
 80010ec:	b108      	cbz	r0, 80010f2 <HAL_SPI_Transmit+0xda>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80010ee:	2320      	movs	r3, #32
 80010f0:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80010f2:	68a3      	ldr	r3, [r4, #8]
 80010f4:	b933      	cbnz	r3, 8001104 <HAL_SPI_Transmit+0xec>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80010f6:	6822      	ldr	r2, [r4, #0]
 80010f8:	9301      	str	r3, [sp, #4]
 80010fa:	68d3      	ldr	r3, [r2, #12]
 80010fc:	9301      	str	r3, [sp, #4]
 80010fe:	6893      	ldr	r3, [r2, #8]
 8001100:	9301      	str	r3, [sp, #4]
 8001102:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001104:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8001106:	3000      	adds	r0, #0
 8001108:	bf18      	it	ne
 800110a:	2001      	movne	r0, #1
error:
 800110c:	e79b      	b.n	8001046 <HAL_SPI_Transmit+0x2e>
  __HAL_LOCK(hspi);
 800110e:	2002      	movs	r0, #2
}
 8001110:	b002      	add	sp, #8
 8001112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_SPI_ENABLE(hspi);
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	e7ba      	b.n	8001096 <HAL_SPI_Transmit+0x7e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001120:	2f01      	cmp	r7, #1
 8001122:	d1c9      	bne.n	80010b8 <HAL_SPI_Transmit+0xa0>
 8001124:	e7be      	b.n	80010a4 <HAL_SPI_Transmit+0x8c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001126:	f7ff fa0f 	bl	8000548 <HAL_GetTick>
 800112a:	1b80      	subs	r0, r0, r6
 800112c:	42a8      	cmp	r0, r5
 800112e:	d3c3      	bcc.n	80010b8 <HAL_SPI_Transmit+0xa0>
 8001130:	1c6b      	adds	r3, r5, #1
 8001132:	d0c1      	beq.n	80010b8 <HAL_SPI_Transmit+0xa0>
          errorcode = HAL_TIMEOUT;
 8001134:	2003      	movs	r0, #3
 8001136:	e786      	b.n	8001046 <HAL_SPI_Transmit+0x2e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001138:	b311      	cbz	r1, 8001180 <HAL_SPI_Transmit+0x168>
 800113a:	2f01      	cmp	r7, #1
 800113c:	d020      	beq.n	8001180 <HAL_SPI_Transmit+0x168>
    while (hspi->TxXferCount > 0U)
 800113e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001140:	b29b      	uxth	r3, r3
 8001142:	2b00      	cmp	r3, #0
 8001144:	d0cd      	beq.n	80010e2 <HAL_SPI_Transmit+0xca>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001146:	6823      	ldr	r3, [r4, #0]
 8001148:	689a      	ldr	r2, [r3, #8]
 800114a:	0790      	lsls	r0, r2, #30
 800114c:	d510      	bpl.n	8001170 <HAL_SPI_Transmit+0x158>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800114e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001150:	f832 1b02 	ldrh.w	r1, [r2], #2
 8001154:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 8001156:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001158:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800115a:	3b01      	subs	r3, #1
 800115c:	b29b      	uxth	r3, r3
 800115e:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001160:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001162:	b29b      	uxth	r3, r3
 8001164:	2b00      	cmp	r3, #0
 8001166:	d0bc      	beq.n	80010e2 <HAL_SPI_Transmit+0xca>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001168:	6823      	ldr	r3, [r4, #0]
 800116a:	689a      	ldr	r2, [r3, #8]
 800116c:	0790      	lsls	r0, r2, #30
 800116e:	d4ee      	bmi.n	800114e <HAL_SPI_Transmit+0x136>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001170:	f7ff f9ea 	bl	8000548 <HAL_GetTick>
 8001174:	1b80      	subs	r0, r0, r6
 8001176:	42a8      	cmp	r0, r5
 8001178:	d3e1      	bcc.n	800113e <HAL_SPI_Transmit+0x126>
 800117a:	1c69      	adds	r1, r5, #1
 800117c:	d0df      	beq.n	800113e <HAL_SPI_Transmit+0x126>
 800117e:	e7d9      	b.n	8001134 <HAL_SPI_Transmit+0x11c>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001180:	4641      	mov	r1, r8
 8001182:	f831 2b02 	ldrh.w	r2, [r1], #2
 8001186:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001188:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800118a:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800118c:	3b01      	subs	r3, #1
 800118e:	b29b      	uxth	r3, r3
 8001190:	86e3      	strh	r3, [r4, #54]	; 0x36
 8001192:	e7d4      	b.n	800113e <HAL_SPI_Transmit+0x126>

08001194 <HAL_SPI_GetState>:
  return hspi->State;
 8001194:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop

0800119c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800119c:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800119e:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80011a0:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 80011a2:	680e      	ldr	r6, [r1, #0]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80011a4:	4d14      	ldr	r5, [pc, #80]	; (80011f8 <TIM_OC1_SetConfig+0x5c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80011a6:	f024 0401 	bic.w	r4, r4, #1
 80011aa:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 80011ac:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80011ae:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80011b0:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 80011b2:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80011b6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80011ba:	42a8      	cmp	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 80011bc:	ea43 0307 	orr.w	r3, r3, r7
  tmpccmrx |= OC_Config->OCMode;
 80011c0:	ea42 0206 	orr.w	r2, r2, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80011c4:	d00a      	beq.n	80011dc <TIM_OC1_SetConfig+0x40>
 80011c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011ca:	42a8      	cmp	r0, r5
 80011cc:	d006      	beq.n	80011dc <TIM_OC1_SetConfig+0x40>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80011ce:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80011d0:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80011d2:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80011d4:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR1 = OC_Config->Pulse;
 80011d6:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 80011d8:	6203      	str	r3, [r0, #32]
}
 80011da:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 80011dc:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80011de:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80011e2:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 80011e4:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80011e8:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80011ec:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80011ee:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80011f2:	432c      	orrs	r4, r5
 80011f4:	e7eb      	b.n	80011ce <TIM_OC1_SetConfig+0x32>
 80011f6:	bf00      	nop
 80011f8:	40010000 	.word	0x40010000

080011fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80011fc:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80011fe:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001200:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 8001202:	680e      	ldr	r6, [r1, #0]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001204:	4d15      	ldr	r5, [pc, #84]	; (800125c <TIM_OC3_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001206:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 800120a:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 800120c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800120e:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8001210:	69c2      	ldr	r2, [r0, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8001212:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001216:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800121a:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800121c:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8001220:	ea42 0206 	orr.w	r2, r2, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001224:	d00a      	beq.n	800123c <TIM_OC3_SetConfig+0x40>
 8001226:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800122a:	42a8      	cmp	r0, r5
 800122c:	d006      	beq.n	800123c <TIM_OC3_SetConfig+0x40>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800122e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001230:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001232:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8001234:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR3 = OC_Config->Pulse;
 8001236:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8001238:	6203      	str	r3, [r0, #32]
}
 800123a:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800123c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800123e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001242:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001246:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800124a:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800124e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001250:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001254:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 8001258:	e7e9      	b.n	800122e <TIM_OC3_SetConfig+0x32>
 800125a:	bf00      	nop
 800125c:	40010000 	.word	0x40010000

08001260 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001260:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001262:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001264:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001266:	680e      	ldr	r6, [r1, #0]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001268:	4d10      	ldr	r5, [pc, #64]	; (80012ac <TIM_OC4_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800126a:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 800126e:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 8001270:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001272:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8001274:	69c2      	ldr	r2, [r0, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8001276:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800127a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800127e:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001280:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001284:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001288:	d00a      	beq.n	80012a0 <TIM_OC4_SetConfig+0x40>
 800128a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800128e:	42a8      	cmp	r0, r5
 8001290:	d006      	beq.n	80012a0 <TIM_OC4_SetConfig+0x40>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001292:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001294:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001296:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8001298:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR4 = OC_Config->Pulse;
 800129a:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800129c:	6203      	str	r3, [r0, #32]
}
 800129e:	4770      	bx	lr
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80012a0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80012a2:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80012a6:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80012aa:	e7f2      	b.n	8001292 <TIM_OC4_SetConfig+0x32>
 80012ac:	40010000 	.word	0x40010000

080012b0 <TIM_SlaveTimer_SetConfig>:
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80012b0:	6802      	ldr	r2, [r0, #0]
{
 80012b2:	b470      	push	{r4, r5, r6}
  tmpsmcr = htim->Instance->SMCR;
 80012b4:	6893      	ldr	r3, [r2, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80012b6:	e9d1 4000 	ldrd	r4, r0, [r1]
  tmpsmcr &= ~TIM_SMCR_TS;
 80012ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80012be:	4303      	orrs	r3, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 80012c0:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80012c4:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80012c6:	2850      	cmp	r0, #80	; 0x50
  htim->Instance->SMCR = tmpsmcr;
 80012c8:	6093      	str	r3, [r2, #8]
  switch (sSlaveConfig->InputTrigger)
 80012ca:	d03e      	beq.n	800134a <TIM_SlaveTimer_SetConfig+0x9a>
 80012cc:	d926      	bls.n	800131c <TIM_SlaveTimer_SetConfig+0x6c>
 80012ce:	2860      	cmp	r0, #96	; 0x60
 80012d0:	d00f      	beq.n	80012f2 <TIM_SlaveTimer_SetConfig+0x42>
 80012d2:	2870      	cmp	r0, #112	; 0x70
 80012d4:	d136      	bne.n	8001344 <TIM_SlaveTimer_SetConfig+0x94>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80012d6:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 80012da:	6908      	ldr	r0, [r1, #16]
  tmpsmcr = TIMx->SMCR;
 80012dc:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80012de:	4323      	orrs	r3, r4
 80012e0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80012e4:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80012e8:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80012ea:	6093      	str	r3, [r2, #8]
  return HAL_OK;
 80012ec:	2000      	movs	r0, #0
}
 80012ee:	bc70      	pop	{r4, r5, r6}
 80012f0:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80012f2:	6a10      	ldr	r0, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80012f4:	688c      	ldr	r4, [r1, #8]
 80012f6:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80012f8:	f020 0010 	bic.w	r0, r0, #16
 80012fc:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80012fe:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;
 8001300:	6a13      	ldr	r3, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001302:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001306:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800130a:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800130e:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8001312:	6191      	str	r1, [r2, #24]
  return HAL_OK;
 8001314:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer;
 8001316:	6213      	str	r3, [r2, #32]
}
 8001318:	bc70      	pop	{r4, r5, r6}
 800131a:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 800131c:	2840      	cmp	r0, #64	; 0x40
 800131e:	d111      	bne.n	8001344 <TIM_SlaveTimer_SetConfig+0x94>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8001320:	2c05      	cmp	r4, #5
 8001322:	d026      	beq.n	8001372 <TIM_SlaveTimer_SetConfig+0xc2>
      tmpccer = htim->Instance->CCER;
 8001324:	6a14      	ldr	r4, [r2, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8001326:	6a10      	ldr	r0, [r2, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001328:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800132a:	f020 0001 	bic.w	r0, r0, #1
 800132e:	6210      	str	r0, [r2, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8001330:	6993      	ldr	r3, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001332:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001336:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 800133a:	6193      	str	r3, [r2, #24]
  return HAL_OK;
 800133c:	2000      	movs	r0, #0
      htim->Instance->CCER = tmpccer;
 800133e:	6214      	str	r4, [r2, #32]
}
 8001340:	bc70      	pop	{r4, r5, r6}
 8001342:	4770      	bx	lr
  return HAL_OK;
 8001344:	2000      	movs	r0, #0
}
 8001346:	bc70      	pop	{r4, r5, r6}
 8001348:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 800134a:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800134c:	6a15      	ldr	r5, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800134e:	6888      	ldr	r0, [r1, #8]
 8001350:	690e      	ldr	r6, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001352:	f025 0501 	bic.w	r5, r5, #1
 8001356:	6215      	str	r5, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001358:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800135a:	f024 010a 	bic.w	r1, r4, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800135e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8001362:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001364:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001368:	6193      	str	r3, [r2, #24]
  return HAL_OK;
 800136a:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer;
 800136c:	6211      	str	r1, [r2, #32]
}
 800136e:	bc70      	pop	{r4, r5, r6}
 8001370:	4770      	bx	lr
        return HAL_ERROR;
 8001372:	2001      	movs	r0, #1
 8001374:	e7bb      	b.n	80012ee <TIM_SlaveTimer_SetConfig+0x3e>
 8001376:	bf00      	nop

08001378 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001378:	6803      	ldr	r3, [r0, #0]
 800137a:	68da      	ldr	r2, [r3, #12]
 800137c:	f042 0201 	orr.w	r2, r2, #1
 8001380:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001382:	689a      	ldr	r2, [r3, #8]
 8001384:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001388:	2a06      	cmp	r2, #6
 800138a:	d003      	beq.n	8001394 <HAL_TIM_Base_Start_IT+0x1c>
    __HAL_TIM_ENABLE(htim);
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	f042 0201 	orr.w	r2, r2, #1
 8001392:	601a      	str	r2, [r3, #0]
}
 8001394:	2000      	movs	r0, #0
 8001396:	4770      	bx	lr

08001398 <HAL_TIM_OC_MspInit>:
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop

0800139c <HAL_TIM_SlaveConfigSynchro>:
{
 800139c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800139e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d01e      	beq.n	80013e4 <HAL_TIM_SlaveConfigSynchro+0x48>
 80013a6:	2501      	movs	r5, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80013a8:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 80013aa:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80013ae:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 80013b2:	4604      	mov	r4, r0
  if(TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80013b4:	f7ff ff7c 	bl	80012b0 <TIM_SlaveTimer_SetConfig>
 80013b8:	b968      	cbnz	r0, 80013d6 <HAL_TIM_SlaveConfigSynchro+0x3a>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80013ba:	6823      	ldr	r3, [r4, #0]
 80013bc:	68da      	ldr	r2, [r3, #12]
 80013be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013c2:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80013c4:	68da      	ldr	r2, [r3, #12]
 80013c6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80013ca:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 80013cc:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80013d0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80013d4:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(htim);
 80013d6:	2300      	movs	r3, #0
      htim->State = HAL_TIM_STATE_READY;
 80013d8:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    return HAL_ERROR;
 80013dc:	4628      	mov	r0, r5
    __HAL_UNLOCK(htim);
 80013de:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80013e2:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 80013e4:	2002      	movs	r0, #2
}
 80013e6:	bd38      	pop	{r3, r4, r5, pc}

080013e8 <HAL_TIM_OC_DelayElapsedCallback>:
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop

080013ec <HAL_TIM_IC_CaptureCallback>:
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop

080013f0 <HAL_TIM_PWM_PulseFinishedCallback>:
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop

080013f4 <HAL_TIM_TriggerCallback>:
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop

080013f8 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80013f8:	6803      	ldr	r3, [r0, #0]
 80013fa:	691a      	ldr	r2, [r3, #16]
 80013fc:	0791      	lsls	r1, r2, #30
{
 80013fe:	b510      	push	{r4, lr}
 8001400:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001402:	d502      	bpl.n	800140a <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001404:	68da      	ldr	r2, [r3, #12]
 8001406:	0792      	lsls	r2, r2, #30
 8001408:	d45f      	bmi.n	80014ca <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800140a:	691a      	ldr	r2, [r3, #16]
 800140c:	0750      	lsls	r0, r2, #29
 800140e:	d502      	bpl.n	8001416 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001410:	68da      	ldr	r2, [r3, #12]
 8001412:	0751      	lsls	r1, r2, #29
 8001414:	d446      	bmi.n	80014a4 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001416:	691a      	ldr	r2, [r3, #16]
 8001418:	0712      	lsls	r2, r2, #28
 800141a:	d502      	bpl.n	8001422 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800141c:	68da      	ldr	r2, [r3, #12]
 800141e:	0710      	lsls	r0, r2, #28
 8001420:	d42e      	bmi.n	8001480 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001422:	691a      	ldr	r2, [r3, #16]
 8001424:	06d2      	lsls	r2, r2, #27
 8001426:	d502      	bpl.n	800142e <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001428:	68da      	ldr	r2, [r3, #12]
 800142a:	06d0      	lsls	r0, r2, #27
 800142c:	d418      	bmi.n	8001460 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800142e:	691a      	ldr	r2, [r3, #16]
 8001430:	07d1      	lsls	r1, r2, #31
 8001432:	d502      	bpl.n	800143a <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001434:	68da      	ldr	r2, [r3, #12]
 8001436:	07d2      	lsls	r2, r2, #31
 8001438:	d45d      	bmi.n	80014f6 <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800143a:	691a      	ldr	r2, [r3, #16]
 800143c:	0610      	lsls	r0, r2, #24
 800143e:	d502      	bpl.n	8001446 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001440:	68da      	ldr	r2, [r3, #12]
 8001442:	0611      	lsls	r1, r2, #24
 8001444:	d45f      	bmi.n	8001506 <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001446:	691a      	ldr	r2, [r3, #16]
 8001448:	0652      	lsls	r2, r2, #25
 800144a:	d502      	bpl.n	8001452 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800144c:	68da      	ldr	r2, [r3, #12]
 800144e:	0650      	lsls	r0, r2, #25
 8001450:	d461      	bmi.n	8001516 <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001452:	691a      	ldr	r2, [r3, #16]
 8001454:	0691      	lsls	r1, r2, #26
 8001456:	d502      	bpl.n	800145e <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001458:	68da      	ldr	r2, [r3, #12]
 800145a:	0692      	lsls	r2, r2, #26
 800145c:	d443      	bmi.n	80014e6 <HAL_TIM_IRQHandler+0xee>
}
 800145e:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001460:	f06f 0210 	mvn.w	r2, #16
 8001464:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001466:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001468:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800146a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800146e:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001470:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001472:	d064      	beq.n	800153e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8001474:	f7ff ffba 	bl	80013ec <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001478:	2200      	movs	r2, #0
 800147a:	6823      	ldr	r3, [r4, #0]
 800147c:	7722      	strb	r2, [r4, #28]
 800147e:	e7d6      	b.n	800142e <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001480:	f06f 0208 	mvn.w	r2, #8
 8001484:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001486:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001488:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800148a:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800148c:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800148e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001490:	d152      	bne.n	8001538 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001492:	f7ff ffa9 	bl	80013e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001496:	4620      	mov	r0, r4
 8001498:	f7ff ffaa 	bl	80013f0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800149c:	2200      	movs	r2, #0
 800149e:	6823      	ldr	r3, [r4, #0]
 80014a0:	7722      	strb	r2, [r4, #28]
 80014a2:	e7be      	b.n	8001422 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80014a4:	f06f 0204 	mvn.w	r2, #4
 80014a8:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80014aa:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80014ac:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80014ae:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80014b2:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80014b4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80014b6:	d13c      	bne.n	8001532 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014b8:	f7ff ff96 	bl	80013e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014bc:	4620      	mov	r0, r4
 80014be:	f7ff ff97 	bl	80013f0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014c2:	2200      	movs	r2, #0
 80014c4:	6823      	ldr	r3, [r4, #0]
 80014c6:	7722      	strb	r2, [r4, #28]
 80014c8:	e7a5      	b.n	8001416 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80014ca:	f06f 0202 	mvn.w	r2, #2
 80014ce:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80014d0:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80014d2:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80014d4:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80014d6:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80014d8:	d025      	beq.n	8001526 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 80014da:	f7ff ff87 	bl	80013ec <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014de:	2200      	movs	r2, #0
 80014e0:	6823      	ldr	r3, [r4, #0]
 80014e2:	7722      	strb	r2, [r4, #28]
 80014e4:	e791      	b.n	800140a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80014e6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80014ea:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80014ec:	611a      	str	r2, [r3, #16]
}
 80014ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80014f2:	f000 b983 	b.w	80017fc <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80014f6:	f06f 0201 	mvn.w	r2, #1
 80014fa:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80014fc:	4620      	mov	r0, r4
 80014fe:	f001 fc41 	bl	8002d84 <HAL_TIM_PeriodElapsedCallback>
 8001502:	6823      	ldr	r3, [r4, #0]
 8001504:	e799      	b.n	800143a <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001506:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800150a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800150c:	4620      	mov	r0, r4
 800150e:	f000 f977 	bl	8001800 <HAL_TIMEx_BreakCallback>
 8001512:	6823      	ldr	r3, [r4, #0]
 8001514:	e797      	b.n	8001446 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001516:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800151a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800151c:	4620      	mov	r0, r4
 800151e:	f7ff ff69 	bl	80013f4 <HAL_TIM_TriggerCallback>
 8001522:	6823      	ldr	r3, [r4, #0]
 8001524:	e795      	b.n	8001452 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001526:	f7ff ff5f 	bl	80013e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800152a:	4620      	mov	r0, r4
 800152c:	f7ff ff60 	bl	80013f0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001530:	e7d5      	b.n	80014de <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8001532:	f7ff ff5b 	bl	80013ec <HAL_TIM_IC_CaptureCallback>
 8001536:	e7c4      	b.n	80014c2 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8001538:	f7ff ff58 	bl	80013ec <HAL_TIM_IC_CaptureCallback>
 800153c:	e7ae      	b.n	800149c <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800153e:	f7ff ff53 	bl	80013e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001542:	4620      	mov	r0, r4
 8001544:	f7ff ff54 	bl	80013f0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001548:	e796      	b.n	8001478 <HAL_TIM_IRQHandler+0x80>
 800154a:	bf00      	nop

0800154c <TIM_Base_SetConfig>:
{
 800154c:	b4f0      	push	{r4, r5, r6, r7}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800154e:	4e36      	ldr	r6, [pc, #216]	; (8001628 <TIM_Base_SetConfig+0xdc>)
  tmpcr1 = TIMx->CR1;
 8001550:	6803      	ldr	r3, [r0, #0]
 8001552:	694d      	ldr	r5, [r1, #20]
 8001554:	688c      	ldr	r4, [r1, #8]
 8001556:	680a      	ldr	r2, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001558:	42b0      	cmp	r0, r6
 800155a:	d055      	beq.n	8001608 <TIM_Base_SetConfig+0xbc>
 800155c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001560:	d029      	beq.n	80015b6 <TIM_Base_SetConfig+0x6a>
 8001562:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 8001566:	42b0      	cmp	r0, r6
 8001568:	d037      	beq.n	80015da <TIM_Base_SetConfig+0x8e>
 800156a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800156e:	42b0      	cmp	r0, r6
 8001570:	d033      	beq.n	80015da <TIM_Base_SetConfig+0x8e>
 8001572:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001576:	42b0      	cmp	r0, r6
 8001578:	d02f      	beq.n	80015da <TIM_Base_SetConfig+0x8e>
 800157a:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 800157e:	42b0      	cmp	r0, r6
 8001580:	d02b      	beq.n	80015da <TIM_Base_SetConfig+0x8e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001582:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 8001586:	42b0      	cmp	r0, r6
 8001588:	d013      	beq.n	80015b2 <TIM_Base_SetConfig+0x66>
 800158a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800158e:	42b0      	cmp	r0, r6
 8001590:	d00f      	beq.n	80015b2 <TIM_Base_SetConfig+0x66>
 8001592:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001596:	42b0      	cmp	r0, r6
 8001598:	d00b      	beq.n	80015b2 <TIM_Base_SetConfig+0x66>
 800159a:	f5a6 3698 	sub.w	r6, r6, #77824	; 0x13000
 800159e:	42b0      	cmp	r0, r6
 80015a0:	d007      	beq.n	80015b2 <TIM_Base_SetConfig+0x66>
 80015a2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80015a6:	42b0      	cmp	r0, r6
 80015a8:	d003      	beq.n	80015b2 <TIM_Base_SetConfig+0x66>
 80015aa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80015ae:	42b0      	cmp	r0, r6
 80015b0:	d109      	bne.n	80015c6 <TIM_Base_SetConfig+0x7a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80015b2:	68c9      	ldr	r1, [r1, #12]
 80015b4:	e004      	b.n	80015c0 <TIM_Base_SetConfig+0x74>
    tmpcr1 |= Structure->CounterMode;
 80015b6:	684e      	ldr	r6, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80015b8:	68c9      	ldr	r1, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80015ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80015be:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 80015c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80015c4:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80015c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015ca:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80015cc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80015ce:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80015d0:	6282      	str	r2, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80015d2:	2301      	movs	r3, #1
 80015d4:	6143      	str	r3, [r0, #20]
}
 80015d6:	bcf0      	pop	{r4, r5, r6, r7}
 80015d8:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80015da:	684e      	ldr	r6, [r1, #4]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80015dc:	4f13      	ldr	r7, [pc, #76]	; (800162c <TIM_Base_SetConfig+0xe0>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80015de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80015e2:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80015e4:	68ce      	ldr	r6, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80015e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80015ea:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80015ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015f0:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80015f2:	42b8      	cmp	r0, r7
  TIMx->CR1 = tmpcr1;
 80015f4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80015f6:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80015f8:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80015fa:	d1ea      	bne.n	80015d2 <TIM_Base_SetConfig+0x86>
    TIMx->RCR = Structure->RepetitionCounter;
 80015fc:	690b      	ldr	r3, [r1, #16]
 80015fe:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001600:	2301      	movs	r3, #1
 8001602:	6143      	str	r3, [r0, #20]
}
 8001604:	bcf0      	pop	{r4, r5, r6, r7}
 8001606:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8001608:	684f      	ldr	r7, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800160a:	68ce      	ldr	r6, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800160c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001610:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8001612:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001616:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001618:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800161c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800161e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001620:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001622:	6282      	str	r2, [r0, #40]	; 0x28
 8001624:	e7ea      	b.n	80015fc <TIM_Base_SetConfig+0xb0>
 8001626:	bf00      	nop
 8001628:	40010000 	.word	0x40010000
 800162c:	40010400 	.word	0x40010400

08001630 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8001630:	b1b8      	cbz	r0, 8001662 <HAL_TIM_Base_Init+0x32>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001632:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8001636:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8001638:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800163c:	4604      	mov	r4, r0
 800163e:	b15b      	cbz	r3, 8001658 <HAL_TIM_Base_Init+0x28>
  htim->State = HAL_TIM_STATE_BUSY;
 8001640:	2302      	movs	r3, #2
 8001642:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001646:	6820      	ldr	r0, [r4, #0]
 8001648:	1d21      	adds	r1, r4, #4
 800164a:	f7ff ff7f 	bl	800154c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800164e:	2301      	movs	r3, #1
 8001650:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001654:	2000      	movs	r0, #0
}
 8001656:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001658:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800165c:	f001 fc04 	bl	8002e68 <HAL_TIM_Base_MspInit>
 8001660:	e7ee      	b.n	8001640 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8001662:	2001      	movs	r0, #1
}
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop

08001668 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8001668:	b1b8      	cbz	r0, 800169a <HAL_TIM_OC_Init+0x32>
  if (htim->State == HAL_TIM_STATE_RESET)
 800166a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 800166e:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8001670:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001674:	4604      	mov	r4, r0
 8001676:	b15b      	cbz	r3, 8001690 <HAL_TIM_OC_Init+0x28>
  htim->State = HAL_TIM_STATE_BUSY;
 8001678:	2302      	movs	r3, #2
 800167a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800167e:	6820      	ldr	r0, [r4, #0]
 8001680:	1d21      	adds	r1, r4, #4
 8001682:	f7ff ff63 	bl	800154c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001686:	2301      	movs	r3, #1
 8001688:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800168c:	2000      	movs	r0, #0
}
 800168e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001690:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8001694:	f7ff fe80 	bl	8001398 <HAL_TIM_OC_MspInit>
 8001698:	e7ee      	b.n	8001678 <HAL_TIM_OC_Init+0x10>
    return HAL_ERROR;
 800169a:	2001      	movs	r0, #1
}
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop

080016a0 <TIM_OC2_SetConfig>:
{
 80016a0:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80016a2:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80016a4:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80016a6:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80016a8:	4d15      	ldr	r5, [pc, #84]	; (8001700 <TIM_OC2_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80016aa:	f024 0410 	bic.w	r4, r4, #16
 80016ae:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 80016b0:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80016b2:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80016b4:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 80016b6:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80016ba:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80016be:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80016c0:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80016c4:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80016c8:	d00a      	beq.n	80016e0 <TIM_OC2_SetConfig+0x40>
 80016ca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80016ce:	42a8      	cmp	r0, r5
 80016d0:	d006      	beq.n	80016e0 <TIM_OC2_SetConfig+0x40>
  TIMx->CCR2 = OC_Config->Pulse;
 80016d2:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80016d4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80016d6:	6182      	str	r2, [r0, #24]
}
 80016d8:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = OC_Config->Pulse;
 80016da:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80016dc:	6203      	str	r3, [r0, #32]
}
 80016de:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80016e0:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80016e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80016e6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80016ea:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80016ee:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80016f2:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80016f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80016f8:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 80016fc:	e7e9      	b.n	80016d2 <TIM_OC2_SetConfig+0x32>
 80016fe:	bf00      	nop
 8001700:	40010000 	.word	0x40010000

08001704 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8001704:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001708:	2b01      	cmp	r3, #1
 800170a:	d028      	beq.n	800175e <HAL_TIM_OC_ConfigChannel+0x5a>
{
 800170c:	b510      	push	{r4, lr}
 800170e:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8001710:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8001712:	2001      	movs	r0, #1
 8001714:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001718:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  switch (Channel)
 800171c:	2a0c      	cmp	r2, #12
 800171e:	d80b      	bhi.n	8001738 <HAL_TIM_OC_ConfigChannel+0x34>
 8001720:	e8df f002 	tbb	[pc, r2]
 8001724:	0a0a0a07 	.word	0x0a0a0a07
 8001728:	0a0a0a15 	.word	0x0a0a0a15
 800172c:	0a0a0a19 	.word	0x0a0a0a19
 8001730:	11          	.byte	0x11
 8001731:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001732:	6820      	ldr	r0, [r4, #0]
 8001734:	f7ff fd32 	bl	800119c <TIM_OC1_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001738:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800173a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800173c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001740:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001744:	bd10      	pop	{r4, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001746:	6820      	ldr	r0, [r4, #0]
 8001748:	f7ff fd8a 	bl	8001260 <TIM_OC4_SetConfig>
      break;
 800174c:	e7f4      	b.n	8001738 <HAL_TIM_OC_ConfigChannel+0x34>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800174e:	6820      	ldr	r0, [r4, #0]
 8001750:	f7ff ffa6 	bl	80016a0 <TIM_OC2_SetConfig>
      break;
 8001754:	e7f0      	b.n	8001738 <HAL_TIM_OC_ConfigChannel+0x34>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001756:	6820      	ldr	r0, [r4, #0]
 8001758:	f7ff fd50 	bl	80011fc <TIM_OC3_SetConfig>
      break;
 800175c:	e7ec      	b.n	8001738 <HAL_TIM_OC_ConfigChannel+0x34>
  __HAL_LOCK(htim);
 800175e:	2002      	movs	r0, #2
}
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop

08001764 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001764:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8001768:	2a01      	cmp	r2, #1
 800176a:	d01a      	beq.n	80017a2 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
{
 800176c:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800176e:	2202      	movs	r2, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001770:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001772:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001776:	e9d1 6500 	ldrd	r6, r5, [r1]
 800177a:	4603      	mov	r3, r0
  tmpcr2 = htim->Instance->CR2;
 800177c:	6860      	ldr	r0, [r4, #4]
  tmpsmcr = htim->Instance->SMCR;
 800177e:	68a2      	ldr	r2, [r4, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001780:	f020 0170 	bic.w	r1, r0, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001784:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001788:	4331      	orrs	r1, r6
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800178a:	432a      	orrs	r2, r5

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800178c:	2601      	movs	r6, #1

  __HAL_UNLOCK(htim);
 800178e:	2500      	movs	r5, #0
  htim->Instance->CR2 = tmpcr2;
 8001790:	6061      	str	r1, [r4, #4]

  return HAL_OK;
 8001792:	4628      	mov	r0, r5
  htim->Instance->SMCR = tmpsmcr;
 8001794:	60a2      	str	r2, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8001796:	f883 603d 	strb.w	r6, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800179a:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c
}
 800179e:	bc70      	pop	{r4, r5, r6}
 80017a0:	4770      	bx	lr
  __HAL_LOCK(htim);
 80017a2:	2002      	movs	r0, #2
}
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop

080017a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80017a8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d021      	beq.n	80017f4 <HAL_TIMEx_ConfigBreakDeadTime+0x4c>
{
 80017b0:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80017b2:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80017b6:	e9d1 2400 	ldrd	r2, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80017ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017be:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80017c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80017c4:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80017c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80017ca:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80017ce:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80017d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80017d4:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80017d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80017da:	69c9      	ldr	r1, [r1, #28]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80017dc:	6802      	ldr	r2, [r0, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80017de:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80017e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017e4:	430b      	orrs	r3, r1

  __HAL_UNLOCK(htim);
 80017e6:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 80017e8:	6453      	str	r3, [r2, #68]	; 0x44

  return HAL_OK;
}
 80017ea:	bc30      	pop	{r4, r5}
  __HAL_UNLOCK(htim);
 80017ec:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
}
 80017f0:	4608      	mov	r0, r1
 80017f2:	4770      	bx	lr
  __HAL_LOCK(htim);
 80017f4:	2302      	movs	r3, #2
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop

080017fc <HAL_TIMEx_CommutCallback>:
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop

08001800 <HAL_TIMEx_BreakCallback>:
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop

08001804 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001804:	6802      	ldr	r2, [r0, #0]
 8001806:	6911      	ldr	r1, [r2, #16]
{
 8001808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800180c:	68c5      	ldr	r5, [r0, #12]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800180e:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001810:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
{
 8001814:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001816:	4329      	orrs	r1, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001818:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800181a:	6111      	str	r1, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
 800181c:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800181e:	6965      	ldr	r5, [r4, #20]
 8001820:	4303      	orrs	r3, r0
 8001822:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8001824:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001828:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1,
 800182a:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800182e:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8001830:	430b      	orrs	r3, r1
 8001832:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001834:	6953      	ldr	r3, [r2, #20]
 8001836:	69a1      	ldr	r1, [r4, #24]
 8001838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800183c:	430b      	orrs	r3, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800183e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001842:	6153      	str	r3, [r2, #20]
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001844:	4b9b      	ldr	r3, [pc, #620]	; (8001ab4 <UART_SetConfig+0x2b0>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001846:	f000 809a 	beq.w	800197e <UART_SetConfig+0x17a>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800184a:	429a      	cmp	r2, r3
 800184c:	d059      	beq.n	8001902 <UART_SetConfig+0xfe>
 800184e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001852:	429a      	cmp	r2, r3
 8001854:	d055      	beq.n	8001902 <UART_SetConfig+0xfe>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001856:	f7ff fae9 	bl	8000e2c <HAL_RCC_GetPCLK1Freq>
 800185a:	4f97      	ldr	r7, [pc, #604]	; (8001ab8 <UART_SetConfig+0x2b4>)
 800185c:	6863      	ldr	r3, [r4, #4]
 800185e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001862:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	fbb0 f3f3 	udiv	r3, r0, r3
 800186c:	fba7 2303 	umull	r2, r3, r7, r3
 8001870:	095b      	lsrs	r3, r3, #5
 8001872:	011d      	lsls	r5, r3, #4
 8001874:	f7ff fada 	bl	8000e2c <HAL_RCC_GetPCLK1Freq>
 8001878:	6866      	ldr	r6, [r4, #4]
 800187a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800187e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001882:	00b6      	lsls	r6, r6, #2
 8001884:	fbb0 f6f6 	udiv	r6, r0, r6
 8001888:	f7ff fad0 	bl	8000e2c <HAL_RCC_GetPCLK1Freq>
 800188c:	6863      	ldr	r3, [r4, #4]
 800188e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001892:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	fbb0 f3f3 	udiv	r3, r0, r3
 800189c:	fba7 2303 	umull	r2, r3, r7, r3
 80018a0:	095b      	lsrs	r3, r3, #5
 80018a2:	f04f 0964 	mov.w	r9, #100	; 0x64
 80018a6:	fb09 6313 	mls	r3, r9, r3, r6
 80018aa:	011b      	lsls	r3, r3, #4
 80018ac:	3332      	adds	r3, #50	; 0x32
 80018ae:	fba7 2303 	umull	r2, r3, r7, r3
 80018b2:	095b      	lsrs	r3, r3, #5
 80018b4:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 80018b8:	f7ff fab8 	bl	8000e2c <HAL_RCC_GetPCLK1Freq>
 80018bc:	6862      	ldr	r2, [r4, #4]
 80018be:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80018c2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80018c6:	0093      	lsls	r3, r2, #2
 80018c8:	fbb0 f8f3 	udiv	r8, r0, r3
 80018cc:	f7ff faae 	bl	8000e2c <HAL_RCC_GetPCLK1Freq>
 80018d0:	e9d4 2300 	ldrd	r2, r3, [r4]
 80018d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80018de:	fbb0 f0f3 	udiv	r0, r0, r3
 80018e2:	fba7 3000 	umull	r3, r0, r7, r0
 80018e6:	0940      	lsrs	r0, r0, #5
 80018e8:	fb09 8310 	mls	r3, r9, r0, r8
 80018ec:	011b      	lsls	r3, r3, #4
 80018ee:	3332      	adds	r3, #50	; 0x32
 80018f0:	fba7 1303 	umull	r1, r3, r7, r3
 80018f4:	f3c3 1343 	ubfx	r3, r3, #5, #4
 80018f8:	4333      	orrs	r3, r6
 80018fa:	442b      	add	r3, r5
 80018fc:	6093      	str	r3, [r2, #8]
    }
  }
}
 80018fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001902:	f7ff faa3 	bl	8000e4c <HAL_RCC_GetPCLK2Freq>
 8001906:	4f6c      	ldr	r7, [pc, #432]	; (8001ab8 <UART_SetConfig+0x2b4>)
 8001908:	6863      	ldr	r3, [r4, #4]
 800190a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800190e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	fbb0 f3f3 	udiv	r3, r0, r3
 8001918:	fba7 2303 	umull	r2, r3, r7, r3
 800191c:	095b      	lsrs	r3, r3, #5
 800191e:	011d      	lsls	r5, r3, #4
 8001920:	f7ff fa94 	bl	8000e4c <HAL_RCC_GetPCLK2Freq>
 8001924:	6866      	ldr	r6, [r4, #4]
 8001926:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800192a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800192e:	00b6      	lsls	r6, r6, #2
 8001930:	fbb0 f6f6 	udiv	r6, r0, r6
 8001934:	f7ff fa8a 	bl	8000e4c <HAL_RCC_GetPCLK2Freq>
 8001938:	6863      	ldr	r3, [r4, #4]
 800193a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800193e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	fbb0 f3f3 	udiv	r3, r0, r3
 8001948:	fba7 2303 	umull	r2, r3, r7, r3
 800194c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001950:	095b      	lsrs	r3, r3, #5
 8001952:	fb09 6313 	mls	r3, r9, r3, r6
 8001956:	011b      	lsls	r3, r3, #4
 8001958:	3332      	adds	r3, #50	; 0x32
 800195a:	fba7 2303 	umull	r2, r3, r7, r3
 800195e:	095b      	lsrs	r3, r3, #5
 8001960:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 8001964:	f7ff fa72 	bl	8000e4c <HAL_RCC_GetPCLK2Freq>
 8001968:	6862      	ldr	r2, [r4, #4]
 800196a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800196e:	0093      	lsls	r3, r2, #2
 8001970:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001974:	fbb0 f8f3 	udiv	r8, r0, r3
 8001978:	f7ff fa68 	bl	8000e4c <HAL_RCC_GetPCLK2Freq>
 800197c:	e7a8      	b.n	80018d0 <UART_SetConfig+0xcc>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800197e:	429a      	cmp	r2, r3
 8001980:	d059      	beq.n	8001a36 <UART_SetConfig+0x232>
 8001982:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001986:	429a      	cmp	r2, r3
 8001988:	d055      	beq.n	8001a36 <UART_SetConfig+0x232>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800198a:	f7ff fa4f 	bl	8000e2c <HAL_RCC_GetPCLK1Freq>
 800198e:	4f4a      	ldr	r7, [pc, #296]	; (8001ab8 <UART_SetConfig+0x2b4>)
 8001990:	6863      	ldr	r3, [r4, #4]
 8001992:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001996:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	fbb0 f3f3 	udiv	r3, r0, r3
 80019a0:	fba7 2303 	umull	r2, r3, r7, r3
 80019a4:	095b      	lsrs	r3, r3, #5
 80019a6:	011e      	lsls	r6, r3, #4
 80019a8:	f7ff fa40 	bl	8000e2c <HAL_RCC_GetPCLK1Freq>
 80019ac:	6865      	ldr	r5, [r4, #4]
 80019ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80019b2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80019b6:	006d      	lsls	r5, r5, #1
 80019b8:	fbb0 f5f5 	udiv	r5, r0, r5
 80019bc:	f7ff fa36 	bl	8000e2c <HAL_RCC_GetPCLK1Freq>
 80019c0:	6863      	ldr	r3, [r4, #4]
 80019c2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80019c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80019d0:	fba7 2303 	umull	r2, r3, r7, r3
 80019d4:	095b      	lsrs	r3, r3, #5
 80019d6:	f04f 0964 	mov.w	r9, #100	; 0x64
 80019da:	fb09 5313 	mls	r3, r9, r3, r5
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	3332      	adds	r3, #50	; 0x32
 80019e2:	fba7 2303 	umull	r2, r3, r7, r3
 80019e6:	091b      	lsrs	r3, r3, #4
 80019e8:	f403 75f8 	and.w	r5, r3, #496	; 0x1f0
 80019ec:	f7ff fa1e 	bl	8000e2c <HAL_RCC_GetPCLK1Freq>
 80019f0:	6862      	ldr	r2, [r4, #4]
 80019f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80019f6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80019fa:	0053      	lsls	r3, r2, #1
 80019fc:	fbb0 f8f3 	udiv	r8, r0, r3
 8001a00:	f7ff fa14 	bl	8000e2c <HAL_RCC_GetPCLK1Freq>
 8001a04:	e9d4 2300 	ldrd	r2, r3, [r4]
 8001a08:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a0c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a16:	fba7 1303 	umull	r1, r3, r7, r3
 8001a1a:	095b      	lsrs	r3, r3, #5
 8001a1c:	fb09 8313 	mls	r3, r9, r3, r8
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	3332      	adds	r3, #50	; 0x32
 8001a24:	fba7 1303 	umull	r1, r3, r7, r3
 8001a28:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001a2c:	4433      	add	r3, r6
 8001a2e:	442b      	add	r3, r5
 8001a30:	6093      	str	r3, [r2, #8]
}
 8001a32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001a36:	f7ff fa09 	bl	8000e4c <HAL_RCC_GetPCLK2Freq>
 8001a3a:	4f1f      	ldr	r7, [pc, #124]	; (8001ab8 <UART_SetConfig+0x2b4>)
 8001a3c:	6863      	ldr	r3, [r4, #4]
 8001a3e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a42:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a4c:	fba7 2303 	umull	r2, r3, r7, r3
 8001a50:	095b      	lsrs	r3, r3, #5
 8001a52:	011e      	lsls	r6, r3, #4
 8001a54:	f7ff f9fa 	bl	8000e4c <HAL_RCC_GetPCLK2Freq>
 8001a58:	6865      	ldr	r5, [r4, #4]
 8001a5a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a5e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a62:	006d      	lsls	r5, r5, #1
 8001a64:	fbb0 f5f5 	udiv	r5, r0, r5
 8001a68:	f7ff f9f0 	bl	8000e4c <HAL_RCC_GetPCLK2Freq>
 8001a6c:	6863      	ldr	r3, [r4, #4]
 8001a6e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a72:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a7c:	fba7 2303 	umull	r2, r3, r7, r3
 8001a80:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001a84:	095b      	lsrs	r3, r3, #5
 8001a86:	fb09 5313 	mls	r3, r9, r3, r5
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	3332      	adds	r3, #50	; 0x32
 8001a8e:	fba7 2303 	umull	r2, r3, r7, r3
 8001a92:	091b      	lsrs	r3, r3, #4
 8001a94:	f403 75f8 	and.w	r5, r3, #496	; 0x1f0
 8001a98:	f7ff f9d8 	bl	8000e4c <HAL_RCC_GetPCLK2Freq>
 8001a9c:	6862      	ldr	r2, [r4, #4]
 8001a9e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001aa2:	0053      	lsls	r3, r2, #1
 8001aa4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001aa8:	fbb0 f8f3 	udiv	r8, r0, r3
 8001aac:	f7ff f9ce 	bl	8000e4c <HAL_RCC_GetPCLK2Freq>
 8001ab0:	e7a8      	b.n	8001a04 <UART_SetConfig+0x200>
 8001ab2:	bf00      	nop
 8001ab4:	40011000 	.word	0x40011000
 8001ab8:	51eb851f 	.word	0x51eb851f

08001abc <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ac0:	4607      	mov	r7, r0
 8001ac2:	460e      	mov	r6, r1
 8001ac4:	4690      	mov	r8, r2
 8001ac6:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ac8:	683c      	ldr	r4, [r7, #0]
 8001aca:	e001      	b.n	8001ad0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x14>
    if (Timeout != HAL_MAX_DELAY)
 8001acc:	1c6b      	adds	r3, r5, #1
 8001ace:	d106      	bne.n	8001ade <UART_WaitOnFlagUntilTimeout.constprop.3+0x22>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ad0:	6820      	ldr	r0, [r4, #0]
 8001ad2:	ea36 0300 	bics.w	r3, r6, r0
 8001ad6:	d1f9      	bne.n	8001acc <UART_WaitOnFlagUntilTimeout.constprop.3+0x10>
  return HAL_OK;
 8001ad8:	2000      	movs	r0, #0
}
 8001ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001ade:	b135      	cbz	r5, 8001aee <UART_WaitOnFlagUntilTimeout.constprop.3+0x32>
 8001ae0:	f7fe fd32 	bl	8000548 <HAL_GetTick>
 8001ae4:	eba0 0008 	sub.w	r0, r0, r8
 8001ae8:	4285      	cmp	r5, r0
 8001aea:	d2ed      	bcs.n	8001ac8 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
 8001aec:	683c      	ldr	r4, [r7, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001aee:	68e3      	ldr	r3, [r4, #12]
 8001af0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001af4:	60e3      	str	r3, [r4, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001af6:	6963      	ldr	r3, [r4, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001af8:	2220      	movs	r2, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001afa:	f023 0301 	bic.w	r3, r3, #1
        __HAL_UNLOCK(huart);
 8001afe:	2100      	movs	r1, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b00:	6163      	str	r3, [r4, #20]
        __HAL_UNLOCK(huart);
 8001b02:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 8001b04:	f887 2039 	strb.w	r2, [r7, #57]	; 0x39
        __HAL_UNLOCK(huart);
 8001b08:	f887 1038 	strb.w	r1, [r7, #56]	; 0x38
        huart->RxState = HAL_UART_STATE_READY;
 8001b0c:	f887 203a 	strb.w	r2, [r7, #58]	; 0x3a
 8001b10:	e7e3      	b.n	8001ada <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>
 8001b12:	bf00      	nop

08001b14 <HAL_UART_Init>:
  if (huart == NULL)
 8001b14:	b360      	cbz	r0, 8001b70 <HAL_UART_Init+0x5c>
{
 8001b16:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8001b18:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001b1c:	4604      	mov	r4, r0
 8001b1e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001b22:	b303      	cbz	r3, 8001b66 <HAL_UART_Init+0x52>
  __HAL_UART_DISABLE(huart);
 8001b24:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001b26:	2324      	movs	r3, #36	; 0x24
 8001b28:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001b2c:	68d3      	ldr	r3, [r2, #12]
 8001b2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001b32:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001b34:	4620      	mov	r0, r4
 8001b36:	f7ff fe65 	bl	8001804 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b3a:	6823      	ldr	r3, [r4, #0]
 8001b3c:	691a      	ldr	r2, [r3, #16]
 8001b3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b42:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b44:	695a      	ldr	r2, [r3, #20]
 8001b46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b4a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001b4c:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b4e:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8001b50:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8001b52:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b56:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 8001b58:	4628      	mov	r0, r5
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b5a:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001b5c:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001b60:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 8001b64:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 8001b66:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001b6a:	f001 f9c7 	bl	8002efc <HAL_UART_MspInit>
 8001b6e:	e7d9      	b.n	8001b24 <HAL_UART_Init+0x10>
    return HAL_ERROR;
 8001b70:	2001      	movs	r0, #1
}
 8001b72:	4770      	bx	lr

08001b74 <HAL_UART_Transmit>:
{
 8001b74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b78:	460f      	mov	r7, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8001b7a:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8001b7e:	2920      	cmp	r1, #32
{
 8001b80:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8001b82:	d12d      	bne.n	8001be0 <HAL_UART_Transmit+0x6c>
    if ((pData == NULL) || (Size == 0U))
 8001b84:	b387      	cbz	r7, 8001be8 <HAL_UART_Transmit+0x74>
 8001b86:	9201      	str	r2, [sp, #4]
 8001b88:	b372      	cbz	r2, 8001be8 <HAL_UART_Transmit+0x74>
 8001b8a:	4698      	mov	r8, r3
    __HAL_LOCK(huart);
 8001b8c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	4604      	mov	r4, r0
 8001b94:	d024      	beq.n	8001be0 <HAL_UART_Transmit+0x6c>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_LOCK(huart);
 8001b9a:	2101      	movs	r1, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b9c:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 8001b9e:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ba2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001ba6:	f7fe fccf 	bl	8000548 <HAL_GetTick>
    huart->TxXferSize = Size;
 8001baa:	9a01      	ldr	r2, [sp, #4]
 8001bac:	84a2      	strh	r2, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8001bae:	4681      	mov	r9, r0
    huart->TxXferCount = Size;
 8001bb0:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001bb2:	8ce5      	ldrh	r5, [r4, #38]	; 0x26
 8001bb4:	b2ad      	uxth	r5, r5
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bb6:	4643      	mov	r3, r8
 8001bb8:	464a      	mov	r2, r9
 8001bba:	2180      	movs	r1, #128	; 0x80
 8001bbc:	4620      	mov	r0, r4
    while (huart->TxXferCount > 0U)
 8001bbe:	b355      	cbz	r5, 8001c16 <HAL_UART_Transmit+0xa2>
      huart->TxXferCount--;
 8001bc0:	8ce5      	ldrh	r5, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001bc2:	68a6      	ldr	r6, [r4, #8]
      huart->TxXferCount--;
 8001bc4:	3d01      	subs	r5, #1
 8001bc6:	b2ad      	uxth	r5, r5
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001bc8:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
      huart->TxXferCount--;
 8001bcc:	84e5      	strh	r5, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001bce:	d00f      	beq.n	8001bf0 <HAL_UART_Transmit+0x7c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bd0:	f7ff ff74 	bl	8001abc <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001bd4:	b9e8      	cbnz	r0, 8001c12 <HAL_UART_Transmit+0x9e>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001bd6:	6823      	ldr	r3, [r4, #0]
 8001bd8:	783a      	ldrb	r2, [r7, #0]
 8001bda:	605a      	str	r2, [r3, #4]
 8001bdc:	3701      	adds	r7, #1
 8001bde:	e7e8      	b.n	8001bb2 <HAL_UART_Transmit+0x3e>
    return HAL_BUSY;
 8001be0:	2002      	movs	r0, #2
}
 8001be2:	b003      	add	sp, #12
 8001be4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8001be8:	2001      	movs	r0, #1
}
 8001bea:	b003      	add	sp, #12
 8001bec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bf0:	4643      	mov	r3, r8
 8001bf2:	464a      	mov	r2, r9
 8001bf4:	2180      	movs	r1, #128	; 0x80
 8001bf6:	4620      	mov	r0, r4
 8001bf8:	f7ff ff60 	bl	8001abc <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001bfc:	b948      	cbnz	r0, 8001c12 <HAL_UART_Transmit+0x9e>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001bfe:	883b      	ldrh	r3, [r7, #0]
 8001c00:	6821      	ldr	r1, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001c02:	6922      	ldr	r2, [r4, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001c04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c08:	604b      	str	r3, [r1, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001c0a:	2a00      	cmp	r2, #0
 8001c0c:	d1e6      	bne.n	8001bdc <HAL_UART_Transmit+0x68>
          pData += 2U;
 8001c0e:	3702      	adds	r7, #2
 8001c10:	e7cf      	b.n	8001bb2 <HAL_UART_Transmit+0x3e>
          return HAL_TIMEOUT;
 8001c12:	2003      	movs	r0, #3
 8001c14:	e7e5      	b.n	8001be2 <HAL_UART_Transmit+0x6e>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c16:	2140      	movs	r1, #64	; 0x40
 8001c18:	f7ff ff50 	bl	8001abc <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001c1c:	2800      	cmp	r0, #0
 8001c1e:	d1f8      	bne.n	8001c12 <HAL_UART_Transmit+0x9e>
    huart->gState = HAL_UART_STATE_READY;
 8001c20:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001c22:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8001c26:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8001c2a:	e7da      	b.n	8001be2 <HAL_UART_Transmit+0x6e>

08001c2c <HAL_UART_TxCpltCallback>:
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop

08001c30 <HAL_UART_RxCpltCallback>:
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop

08001c34 <UART_Receive_IT.part.1>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8001c34:	b510      	push	{r4, lr}
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001c36:	6884      	ldr	r4, [r0, #8]
 8001c38:	6901      	ldr	r1, [r0, #16]
 8001c3a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001c3c:	6802      	ldr	r2, [r0, #0]
 8001c3e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8001c42:	d020      	beq.n	8001c86 <UART_Receive_IT.part.1+0x52>
 8001c44:	1c5c      	adds	r4, r3, #1
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001c46:	6852      	ldr	r2, [r2, #4]
 8001c48:	6284      	str	r4, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001c4a:	b9c9      	cbnz	r1, 8001c80 <UART_Receive_IT.part.1+0x4c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001c4c:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 8001c4e:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8001c50:	3b01      	subs	r3, #1
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8001c56:	b98b      	cbnz	r3, 8001c7c <UART_Receive_IT.part.1+0x48>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001c58:	6802      	ldr	r2, [r0, #0]
 8001c5a:	68d1      	ldr	r1, [r2, #12]
 8001c5c:	f021 0120 	bic.w	r1, r1, #32
 8001c60:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001c62:	68d1      	ldr	r1, [r2, #12]
 8001c64:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8001c68:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001c6a:	6951      	ldr	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001c6c:	2420      	movs	r4, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001c6e:	f021 0101 	bic.w	r1, r1, #1
 8001c72:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001c74:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001c78:	f7ff ffda 	bl	8001c30 <HAL_UART_RxCpltCallback>
}
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	bd10      	pop	{r4, pc}
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001c80:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c84:	e7e2      	b.n	8001c4c <UART_Receive_IT.part.1+0x18>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001c86:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001c88:	b929      	cbnz	r1, 8001c96 <UART_Receive_IT.part.1+0x62>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001c8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c8e:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 2U;
 8001c92:	6283      	str	r3, [r0, #40]	; 0x28
 8001c94:	e7db      	b.n	8001c4e <UART_Receive_IT.part.1+0x1a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	f823 2b01 	strh.w	r2, [r3], #1
        huart->pRxBuffPtr += 1U;
 8001c9c:	6283      	str	r3, [r0, #40]	; 0x28
 8001c9e:	e7d6      	b.n	8001c4e <UART_Receive_IT.part.1+0x1a>

08001ca0 <HAL_UART_ErrorCallback>:
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop

08001ca4 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001ca4:	6803      	ldr	r3, [r0, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
{
 8001ca8:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8001caa:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001cac:	68dd      	ldr	r5, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001cae:	6959      	ldr	r1, [r3, #20]
{
 8001cb0:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8001cb2:	d04a      	beq.n	8001d4a <HAL_UART_IRQHandler+0xa6>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001cb4:	f011 0101 	ands.w	r1, r1, #1
 8001cb8:	461e      	mov	r6, r3
 8001cba:	d04f      	beq.n	8001d5c <HAL_UART_IRQHandler+0xb8>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001cbc:	07d0      	lsls	r0, r2, #31
 8001cbe:	d505      	bpl.n	8001ccc <HAL_UART_IRQHandler+0x28>
 8001cc0:	05eb      	lsls	r3, r5, #23
 8001cc2:	d503      	bpl.n	8001ccc <HAL_UART_IRQHandler+0x28>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001cc4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001cc6:	f043 0301 	orr.w	r3, r3, #1
 8001cca:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ccc:	0750      	lsls	r0, r2, #29
 8001cce:	f002 0302 	and.w	r3, r2, #2
 8001cd2:	d575      	bpl.n	8001dc0 <HAL_UART_IRQHandler+0x11c>
 8001cd4:	b161      	cbz	r1, 8001cf0 <HAL_UART_IRQHandler+0x4c>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001cd6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001cd8:	f041 0102 	orr.w	r1, r1, #2
 8001cdc:	63e1      	str	r1, [r4, #60]	; 0x3c
 8001cde:	f002 0108 	and.w	r1, r2, #8
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d171      	bne.n	8001dca <HAL_UART_IRQHandler+0x126>
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ce6:	b119      	cbz	r1, 8001cf0 <HAL_UART_IRQHandler+0x4c>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001ce8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001cea:	f043 0308 	orr.w	r3, r3, #8
 8001cee:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001cf0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d031      	beq.n	8001d5a <HAL_UART_IRQHandler+0xb6>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001cf6:	0690      	lsls	r0, r2, #26
 8001cf8:	d501      	bpl.n	8001cfe <HAL_UART_IRQHandler+0x5a>
 8001cfa:	06a9      	lsls	r1, r5, #26
 8001cfc:	d471      	bmi.n	8001de2 <HAL_UART_IRQHandler+0x13e>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001cfe:	6975      	ldr	r5, [r6, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001d00:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001d02:	0712      	lsls	r2, r2, #28
 8001d04:	d402      	bmi.n	8001d0c <HAL_UART_IRQHandler+0x68>
 8001d06:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001d0a:	d077      	beq.n	8001dfc <HAL_UART_IRQHandler+0x158>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d0c:	68f3      	ldr	r3, [r6, #12]
 8001d0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001d12:	60f3      	str	r3, [r6, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d14:	6973      	ldr	r3, [r6, #20]
  huart->RxState = HAL_UART_STATE_READY;
 8001d16:	2220      	movs	r2, #32
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d18:	f023 0301 	bic.w	r3, r3, #1
 8001d1c:	6173      	str	r3, [r6, #20]
  huart->RxState = HAL_UART_STATE_READY;
 8001d1e:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d22:	6973      	ldr	r3, [r6, #20]
 8001d24:	065b      	lsls	r3, r3, #25
 8001d26:	d558      	bpl.n	8001dda <HAL_UART_IRQHandler+0x136>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d28:	6973      	ldr	r3, [r6, #20]
          if (huart->hdmarx != NULL)
 8001d2a:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d30:	6173      	str	r3, [r6, #20]
          if (huart->hdmarx != NULL)
 8001d32:	2800      	cmp	r0, #0
 8001d34:	d051      	beq.n	8001dda <HAL_UART_IRQHandler+0x136>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001d36:	4b3a      	ldr	r3, [pc, #232]	; (8001e20 <HAL_UART_IRQHandler+0x17c>)
 8001d38:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001d3a:	f7fe fc87 	bl	800064c <HAL_DMA_Abort_IT>
 8001d3e:	b160      	cbz	r0, 8001d5a <HAL_UART_IRQHandler+0xb6>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001d40:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8001d42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001d46:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001d48:	4718      	bx	r3
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d4a:	0691      	lsls	r1, r2, #26
 8001d4c:	d509      	bpl.n	8001d62 <HAL_UART_IRQHandler+0xbe>
 8001d4e:	06ae      	lsls	r6, r5, #26
 8001d50:	d507      	bpl.n	8001d62 <HAL_UART_IRQHandler+0xbe>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001d52:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001d56:	2b22      	cmp	r3, #34	; 0x22
 8001d58:	d04c      	beq.n	8001df4 <HAL_UART_IRQHandler+0x150>
}
 8001d5a:	bd70      	pop	{r4, r5, r6, pc}
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001d5c:	f415 7f90 	tst.w	r5, #288	; 0x120
 8001d60:	d1ac      	bne.n	8001cbc <HAL_UART_IRQHandler+0x18>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001d62:	0616      	lsls	r6, r2, #24
 8001d64:	d40e      	bmi.n	8001d84 <HAL_UART_IRQHandler+0xe0>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001d66:	0651      	lsls	r1, r2, #25
 8001d68:	d5f7      	bpl.n	8001d5a <HAL_UART_IRQHandler+0xb6>
 8001d6a:	066a      	lsls	r2, r5, #25
 8001d6c:	d5f5      	bpl.n	8001d5a <HAL_UART_IRQHandler+0xb6>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001d6e:	68da      	ldr	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001d70:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001d72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d76:	60da      	str	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8001d78:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8001d7a:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001d7e:	f7ff ff55 	bl	8001c2c <HAL_UART_TxCpltCallback>
}
 8001d82:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001d84:	0628      	lsls	r0, r5, #24
 8001d86:	d5ee      	bpl.n	8001d66 <HAL_UART_IRQHandler+0xc2>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001d88:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001d8c:	2a21      	cmp	r2, #33	; 0x21
 8001d8e:	d1e4      	bne.n	8001d5a <HAL_UART_IRQHandler+0xb6>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001d90:	68a1      	ldr	r1, [r4, #8]
 8001d92:	6a22      	ldr	r2, [r4, #32]
 8001d94:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8001d98:	d035      	beq.n	8001e06 <HAL_UART_IRQHandler+0x162>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001d9a:	1c51      	adds	r1, r2, #1
 8001d9c:	6221      	str	r1, [r4, #32]
 8001d9e:	7812      	ldrb	r2, [r2, #0]
 8001da0:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8001da2:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001da4:	3a01      	subs	r2, #1
 8001da6:	b292      	uxth	r2, r2
 8001da8:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001daa:	2a00      	cmp	r2, #0
 8001dac:	d1d5      	bne.n	8001d5a <HAL_UART_IRQHandler+0xb6>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001dae:	68da      	ldr	r2, [r3, #12]
 8001db0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001db4:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001db6:	68da      	ldr	r2, [r3, #12]
 8001db8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dbc:	60da      	str	r2, [r3, #12]
}
 8001dbe:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001dc0:	b143      	cbz	r3, 8001dd4 <HAL_UART_IRQHandler+0x130>
 8001dc2:	2900      	cmp	r1, #0
 8001dc4:	d094      	beq.n	8001cf0 <HAL_UART_IRQHandler+0x4c>
 8001dc6:	f002 0108 	and.w	r1, r2, #8
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001dca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001dcc:	f043 0304 	orr.w	r3, r3, #4
 8001dd0:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001dd2:	e788      	b.n	8001ce6 <HAL_UART_IRQHandler+0x42>
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001dd4:	0713      	lsls	r3, r2, #28
 8001dd6:	d58b      	bpl.n	8001cf0 <HAL_UART_IRQHandler+0x4c>
 8001dd8:	e785      	b.n	8001ce6 <HAL_UART_IRQHandler+0x42>
            HAL_UART_ErrorCallback(huart);
 8001dda:	4620      	mov	r0, r4
 8001ddc:	f7ff ff60 	bl	8001ca0 <HAL_UART_ErrorCallback>
}
 8001de0:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001de2:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8001de6:	2b22      	cmp	r3, #34	; 0x22
 8001de8:	d189      	bne.n	8001cfe <HAL_UART_IRQHandler+0x5a>
 8001dea:	4620      	mov	r0, r4
 8001dec:	f7ff ff22 	bl	8001c34 <UART_Receive_IT.part.1>
 8001df0:	6826      	ldr	r6, [r4, #0]
 8001df2:	e784      	b.n	8001cfe <HAL_UART_IRQHandler+0x5a>
}
 8001df4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001df8:	f7ff bf1c 	b.w	8001c34 <UART_Receive_IT.part.1>
        HAL_UART_ErrorCallback(huart);
 8001dfc:	4620      	mov	r0, r4
 8001dfe:	f7ff ff4f 	bl	8001ca0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e02:	63e5      	str	r5, [r4, #60]	; 0x3c
}
 8001e04:	bd70      	pop	{r4, r5, r6, pc}
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001e06:	8811      	ldrh	r1, [r2, #0]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001e08:	6920      	ldr	r0, [r4, #16]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001e0a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001e0e:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001e10:	b910      	cbnz	r0, 8001e18 <HAL_UART_IRQHandler+0x174>
        huart->pTxBuffPtr += 2U;
 8001e12:	3202      	adds	r2, #2
 8001e14:	6222      	str	r2, [r4, #32]
 8001e16:	e7c4      	b.n	8001da2 <HAL_UART_IRQHandler+0xfe>
        huart->pTxBuffPtr += 1U;
 8001e18:	3201      	adds	r2, #1
 8001e1a:	6222      	str	r2, [r4, #32]
 8001e1c:	e7c1      	b.n	8001da2 <HAL_UART_IRQHandler+0xfe>
 8001e1e:	bf00      	nop
 8001e20:	08001e25 	.word	0x08001e25

08001e24 <UART_DMAAbortOnError>:
{
 8001e24:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e26:	6b83      	ldr	r3, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8001e28:	2200      	movs	r2, #0
 8001e2a:	85da      	strh	r2, [r3, #46]	; 0x2e
  HAL_UART_ErrorCallback(huart);
 8001e2c:	4618      	mov	r0, r3
  huart->TxXferCount = 0x00U;
 8001e2e:	84da      	strh	r2, [r3, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001e30:	f7ff ff36 	bl	8001ca0 <HAL_UART_ErrorCallback>
}
 8001e34:	bd08      	pop	{r3, pc}
 8001e36:	bf00      	nop

08001e38 <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 8001e38:	b500      	push	{lr}
 8001e3a:	b2c0      	uxtb	r0, r0
 8001e3c:	b083      	sub	sp, #12
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8001e3e:	b1e9      	cbz	r1, 8001e7c <dwt_writetodevice+0x44>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8001e40:	f060 003f 	orn	r0, r0, #63	; 0x3f

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8001e44:	297f      	cmp	r1, #127	; 0x7f
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8001e46:	f88d 0004 	strb.w	r0, [sp, #4]
 8001e4a:	b2c8      	uxtb	r0, r1
        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8001e4c:	d90d      	bls.n	8001e6a <dwt_writetodevice+0x32>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8001e4e:	f060 007f 	orn	r0, r0, #127	; 0x7f
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8001e52:	09c9      	lsrs	r1, r1, #7
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8001e54:	f88d 0005 	strb.w	r0, [sp, #5]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8001e58:	f88d 1006 	strb.w	r1, [sp, #6]
 8001e5c:	2003      	movs	r0, #3
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 8001e5e:	a901      	add	r1, sp, #4
 8001e60:	f001 f938 	bl	80030d4 <writetospi>
} // end dwt_writetodevice()
 8001e64:	b003      	add	sp, #12
 8001e66:	f85d fb04 	ldr.w	pc, [sp], #4
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8001e6a:	f88d 0005 	strb.w	r0, [sp, #5]
    writetospi(cnt,header,length,buffer);
 8001e6e:	a901      	add	r1, sp, #4
 8001e70:	2002      	movs	r0, #2
 8001e72:	f001 f92f 	bl	80030d4 <writetospi>
} // end dwt_writetodevice()
 8001e76:	b003      	add	sp, #12
 8001e78:	f85d fb04 	ldr.w	pc, [sp], #4
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8001e7c:	f060 007f 	orn	r0, r0, #127	; 0x7f
 8001e80:	f88d 0004 	strb.w	r0, [sp, #4]
    writetospi(cnt,header,length,buffer);
 8001e84:	a901      	add	r1, sp, #4
 8001e86:	2001      	movs	r0, #1
 8001e88:	f001 f924 	bl	80030d4 <writetospi>
} // end dwt_writetodevice()
 8001e8c:	b003      	add	sp, #12
 8001e8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e92:	bf00      	nop

08001e94 <dwt_writetxdata>:
{
 8001e94:	b508      	push	{r3, lr}
    if ((txBufferOffset + txFrameLength) <= 1024)
 8001e96:	1813      	adds	r3, r2, r0
 8001e98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e9c:	dc07      	bgt.n	8001eae <dwt_writetxdata+0x1a>
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	4611      	mov	r1, r2
        dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes);
 8001ea2:	1e82      	subs	r2, r0, #2
 8001ea4:	2009      	movs	r0, #9
 8001ea6:	f7ff ffc7 	bl	8001e38 <dwt_writetodevice>
        return DWT_SUCCESS;
 8001eaa:	2000      	movs	r0, #0
} // end dwt_writetxdata()
 8001eac:	bd08      	pop	{r3, pc}
        return DWT_ERROR;
 8001eae:	f04f 30ff 	mov.w	r0, #4294967295
} // end dwt_writetxdata()
 8001eb2:	bd08      	pop	{r3, pc}

08001eb4 <dwt_writetxfctrl>:
    uint32 reg32 = pdw1000local->txFCTRL | txFrameLength | ((uint32)txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | ((uint32)ranging << TX_FCTRL_TR_SHFT);
 8001eb4:	4b0e      	ldr	r3, [pc, #56]	; (8001ef0 <dwt_writetxfctrl+0x3c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
{
 8001eb8:	b530      	push	{r4, r5, lr}
    uint32 reg32 = pdw1000local->txFCTRL | txFrameLength | ((uint32)txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | ((uint32)ranging << TX_FCTRL_TR_SHFT);
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	ea43 32c2 	orr.w	r2, r3, r2, lsl #15
 8001ec0:	4310      	orrs	r0, r2
{
 8001ec2:	b083      	sub	sp, #12
    uint32 reg32 = pdw1000local->txFCTRL | txFrameLength | ((uint32)txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | ((uint32)ranging << TX_FCTRL_TR_SHFT);
 8001ec4:	ea40 5181 	orr.w	r1, r0, r1, lsl #22
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
    {
        buffer[j] = regval & 0xff ;
        regval >>= 8 ;
 8001ec8:	0a08      	lsrs	r0, r1, #8
 8001eca:	0c0d      	lsrs	r5, r1, #16
 8001ecc:	0e0c      	lsrs	r4, r1, #24
        buffer[j] = regval & 0xff ;
 8001ece:	f88d 1004 	strb.w	r1, [sp, #4]
 8001ed2:	f88d 0005 	strb.w	r0, [sp, #5]
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8001ed6:	ab01      	add	r3, sp, #4
 8001ed8:	2204      	movs	r2, #4
 8001eda:	2100      	movs	r1, #0
 8001edc:	2008      	movs	r0, #8
        buffer[j] = regval & 0xff ;
 8001ede:	f88d 5006 	strb.w	r5, [sp, #6]
 8001ee2:	f88d 4007 	strb.w	r4, [sp, #7]
    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8001ee6:	f7ff ffa7 	bl	8001e38 <dwt_writetodevice>
} // end dwt_writetxfctrl()
 8001eea:	b003      	add	sp, #12
 8001eec:	bd30      	pop	{r4, r5, pc}
 8001eee:	bf00      	nop
 8001ef0:	20000008 	.word	0x20000008

08001ef4 <dwt_readfromdevice>:
{
 8001ef4:	b500      	push	{lr}
 8001ef6:	b2c0      	uxtb	r0, r0
 8001ef8:	b083      	sub	sp, #12
    if (index == 0) // For index of 0, no sub-index is required
 8001efa:	b1e9      	cbz	r1, 8001f38 <dwt_readfromdevice+0x44>
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8001efc:	f040 0040 	orr.w	r0, r0, #64	; 0x40
        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8001f00:	297f      	cmp	r1, #127	; 0x7f
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8001f02:	f88d 0004 	strb.w	r0, [sp, #4]
 8001f06:	b2c8      	uxtb	r0, r1
        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8001f08:	d90d      	bls.n	8001f26 <dwt_readfromdevice+0x32>
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8001f0a:	f060 007f 	orn	r0, r0, #127	; 0x7f
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8001f0e:	09c9      	lsrs	r1, r1, #7
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8001f10:	f88d 0005 	strb.w	r0, [sp, #5]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8001f14:	f88d 1006 	strb.w	r1, [sp, #6]
 8001f18:	2003      	movs	r0, #3
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8001f1a:	a901      	add	r1, sp, #4
 8001f1c:	f001 f910 	bl	8003140 <readfromspi>
} // end dwt_readfromdevice()
 8001f20:	b003      	add	sp, #12
 8001f22:	f85d fb04 	ldr.w	pc, [sp], #4
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8001f26:	f88d 0005 	strb.w	r0, [sp, #5]
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8001f2a:	a901      	add	r1, sp, #4
 8001f2c:	2002      	movs	r0, #2
 8001f2e:	f001 f907 	bl	8003140 <readfromspi>
} // end dwt_readfromdevice()
 8001f32:	b003      	add	sp, #12
 8001f34:	f85d fb04 	ldr.w	pc, [sp], #4
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8001f38:	f88d 0004 	strb.w	r0, [sp, #4]
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8001f3c:	a901      	add	r1, sp, #4
 8001f3e:	2001      	movs	r0, #1
 8001f40:	f001 f8fe 	bl	8003140 <readfromspi>
} // end dwt_readfromdevice()
 8001f44:	b003      	add	sp, #12
 8001f46:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f4a:	bf00      	nop

08001f4c <dwt_readdevid>:
{
 8001f4c:	b500      	push	{lr}
    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8001f4e:	2100      	movs	r1, #0
{
 8001f50:	b083      	sub	sp, #12
    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8001f52:	4608      	mov	r0, r1
 8001f54:	ab01      	add	r3, sp, #4
 8001f56:	2204      	movs	r2, #4
 8001f58:	f7ff ffcc 	bl	8001ef4 <dwt_readfromdevice>
 8001f5c:	f10d 0307 	add.w	r3, sp, #7
 8001f60:	f10d 0103 	add.w	r1, sp, #3
    uint32  regval = 0 ;
 8001f64:	2000      	movs	r0, #0
        regval = (regval << 8) + buffer[j] ;
 8001f66:	f813 2901 	ldrb.w	r2, [r3], #-1
    for (j = 3 ; j >= 0 ; j --)
 8001f6a:	428b      	cmp	r3, r1
        regval = (regval << 8) + buffer[j] ;
 8001f6c:	eb02 2000 	add.w	r0, r2, r0, lsl #8
    for (j = 3 ; j >= 0 ; j --)
 8001f70:	d1f9      	bne.n	8001f66 <dwt_readdevid+0x1a>
}
 8001f72:	b003      	add	sp, #12
 8001f74:	f85d fb04 	ldr.w	pc, [sp], #4

08001f78 <dwt_read32bitoffsetreg>:
{
 8001f78:	b500      	push	{lr}
 8001f7a:	b083      	sub	sp, #12
    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8001f7c:	b289      	uxth	r1, r1
 8001f7e:	b280      	uxth	r0, r0
 8001f80:	ab01      	add	r3, sp, #4
 8001f82:	2204      	movs	r2, #4
 8001f84:	f7ff ffb6 	bl	8001ef4 <dwt_readfromdevice>
 8001f88:	f10d 0307 	add.w	r3, sp, #7
 8001f8c:	f10d 0103 	add.w	r1, sp, #3
    uint32  regval = 0 ;
 8001f90:	2000      	movs	r0, #0
        regval = (regval << 8) + buffer[j] ;
 8001f92:	f813 2901 	ldrb.w	r2, [r3], #-1
    for (j = 3 ; j >= 0 ; j --)
 8001f96:	428b      	cmp	r3, r1
        regval = (regval << 8) + buffer[j] ;
 8001f98:	eb02 2000 	add.w	r0, r2, r0, lsl #8
    for (j = 3 ; j >= 0 ; j --)
 8001f9c:	d1f9      	bne.n	8001f92 <dwt_read32bitoffsetreg+0x1a>
} // end dwt_read32bitoffsetreg()
 8001f9e:	b003      	add	sp, #12
 8001fa0:	f85d fb04 	ldr.w	pc, [sp], #4

08001fa4 <dwt_write32bitoffsetreg>:
{
 8001fa4:	b570      	push	{r4, r5, r6, lr}
 8001fa6:	b082      	sub	sp, #8
        regval >>= 8 ;
 8001fa8:	0a16      	lsrs	r6, r2, #8
 8001faa:	0c15      	lsrs	r5, r2, #16
 8001fac:	0e14      	lsrs	r4, r2, #24
        buffer[j] = regval & 0xff ;
 8001fae:	f88d 2004 	strb.w	r2, [sp, #4]
    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8001fb2:	b289      	uxth	r1, r1
 8001fb4:	b280      	uxth	r0, r0
 8001fb6:	ab01      	add	r3, sp, #4
 8001fb8:	2204      	movs	r2, #4
        buffer[j] = regval & 0xff ;
 8001fba:	f88d 6005 	strb.w	r6, [sp, #5]
 8001fbe:	f88d 5006 	strb.w	r5, [sp, #6]
 8001fc2:	f88d 4007 	strb.w	r4, [sp, #7]
    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8001fc6:	f7ff ff37 	bl	8001e38 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 8001fca:	b002      	add	sp, #8
 8001fcc:	bd70      	pop	{r4, r5, r6, pc}
 8001fce:	bf00      	nop

08001fd0 <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 8001fd0:	b570      	push	{r4, r5, r6, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	4604      	mov	r4, r0
    buffer[1] = regval >> 8 ;
 8001fd6:	0a06      	lsrs	r6, r0, #8
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8001fd8:	ab01      	add	r3, sp, #4
 8001fda:	2202      	movs	r2, #2
 8001fdc:	2104      	movs	r1, #4
 8001fde:	202d      	movs	r0, #45	; 0x2d
 8001fe0:	ad02      	add	r5, sp, #8
    buffer[0] = regval & 0xFF;
 8001fe2:	f88d 4004 	strb.w	r4, [sp, #4]
    buffer[1] = regval >> 8 ;
 8001fe6:	f88d 6005 	strb.w	r6, [sp, #5]
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8001fea:	f7ff ff25 	bl	8001e38 <dwt_writetodevice>
 8001fee:	2303      	movs	r3, #3
 8001ff0:	f805 3d05 	strb.w	r3, [r5, #-5]!
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	462b      	mov	r3, r5
 8001ff8:	2106      	movs	r1, #6
 8001ffa:	202d      	movs	r0, #45	; 0x2d
 8001ffc:	f7ff ff1c 	bl	8001e38 <dwt_writetodevice>
 8002000:	ab02      	add	r3, sp, #8
 8002002:	2400      	movs	r4, #0
 8002004:	f803 4d06 	strb.w	r4, [r3, #-6]!
 8002008:	2201      	movs	r2, #1
 800200a:	2106      	movs	r1, #6
 800200c:	202d      	movs	r0, #45	; 0x2d
 800200e:	f7ff ff13 	bl	8001e38 <dwt_writetodevice>
    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8002012:	ab01      	add	r3, sp, #4
 8002014:	202d      	movs	r0, #45	; 0x2d
 8002016:	2204      	movs	r2, #4
 8002018:	210a      	movs	r1, #10
 800201a:	f7ff ff6b 	bl	8001ef4 <dwt_readfromdevice>
    uint32  regval = 0 ;
 800201e:	4620      	mov	r0, r4
 8002020:	f10d 0307 	add.w	r3, sp, #7
        regval = (regval << 8) + buffer[j] ;
 8002024:	f813 2901 	ldrb.w	r2, [r3], #-1
    for (j = 3 ; j >= 0 ; j --)
 8002028:	42ab      	cmp	r3, r5
        regval = (regval << 8) + buffer[j] ;
 800202a:	eb02 2000 	add.w	r0, r2, r0, lsl #8
    for (j = 3 ; j >= 0 ; j --)
 800202e:	d1f9      	bne.n	8002024 <_dwt_otpread+0x54>
    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);

    // Return the 32bit of read data
    return ret_data;
}
 8002030:	b002      	add	sp, #8
 8002032:	bd70      	pop	{r4, r5, r6, pc}

08002034 <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 8002034:	b500      	push	{lr}
 8002036:	b083      	sub	sp, #12
 8002038:	ab02      	add	r3, sp, #8
 800203a:	2200      	movs	r2, #0
 800203c:	f803 2d01 	strb.w	r2, [r3, #-1]!
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8002040:	2102      	movs	r1, #2
 8002042:	2201      	movs	r2, #1
 8002044:	202c      	movs	r0, #44	; 0x2c
 8002046:	f7ff fef7 	bl	8001e38 <dwt_writetodevice>
 800204a:	ab02      	add	r3, sp, #8
 800204c:	2102      	movs	r1, #2
 800204e:	f803 1d02 	strb.w	r1, [r3, #-2]!
 8002052:	2201      	movs	r2, #1
 8002054:	202c      	movs	r0, #44	; 0x2c
 8002056:	f7ff feef 	bl	8001e38 <dwt_writetodevice>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
}
 800205a:	b003      	add	sp, #12
 800205c:	f85d fb04 	ldr.w	pc, [sp], #4

08002060 <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 8002060:	b510      	push	{r4, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	ab02      	add	r3, sp, #8
 8002066:	226d      	movs	r2, #109	; 0x6d
 8002068:	f803 2d05 	strb.w	r2, [r3, #-5]!
 800206c:	4604      	mov	r4, r0
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 800206e:	2201      	movs	r2, #1
 8002070:	f640 0106 	movw	r1, #2054	; 0x806
 8002074:	202e      	movs	r0, #46	; 0x2e
 8002076:	f7ff fedf 	bl	8001e38 <dwt_writetodevice>
    buffer[0] = regval & 0xFF;
 800207a:	ab02      	add	r3, sp, #8
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register

    if(prfIndex)
 800207c:	b95c      	cbnz	r4, 8002096 <_dwt_configlde+0x36>
    buffer[0] = regval & 0xFF;
 800207e:	f241 6207 	movw	r2, #5639	; 0x1607
 8002082:	f823 2d04 	strh.w	r2, [r3, #-4]!
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8002086:	f641 0106 	movw	r1, #6150	; 0x1806
 800208a:	2202      	movs	r2, #2
 800208c:	202e      	movs	r0, #46	; 0x2e
 800208e:	f7ff fed3 	bl	8001e38 <dwt_writetodevice>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 8002092:	b002      	add	sp, #8
 8002094:	bd10      	pop	{r4, pc}
    buffer[0] = regval & 0xFF;
 8002096:	f240 6207 	movw	r2, #1543	; 0x607
 800209a:	e7f2      	b.n	8002082 <_dwt_configlde+0x22>

0800209c <dwt_configure>:
{
 800209c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    uint8 chan = config->chan ;
 80020a0:	7806      	ldrb	r6, [r0, #0]
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 80020a2:	4bd2      	ldr	r3, [pc, #840]	; (80023ec <dwt_configure+0x350>)
 80020a4:	7942      	ldrb	r2, [r0, #5]
 80020a6:	4dd2      	ldr	r5, [pc, #840]	; (80023f0 <dwt_configure+0x354>)
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 80020a8:	7847      	ldrb	r7, [r0, #1]
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 80020aa:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
    if(DWT_BR_110K == config->dataRate)
 80020ae:	79c3      	ldrb	r3, [r0, #7]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 80020b0:	2e04      	cmp	r6, #4
 80020b2:	bf18      	it	ne
 80020b4:	f1a6 0907 	subne.w	r9, r6, #7
{
 80020b8:	4604      	mov	r4, r0
 80020ba:	6828      	ldr	r0, [r5, #0]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 80020bc:	f107 37ff 	add.w	r7, r7, #4294967295
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 80020c0:	bf18      	it	ne
 80020c2:	fab9 f989 	clzne	r9, r9
{
 80020c6:	b085      	sub	sp, #20
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 80020c8:	b2ff      	uxtb	r7, r7
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 80020ca:	bf14      	ite	ne
 80020cc:	ea4f 1959 	movne.w	r9, r9, lsr #5
 80020d0:	f04f 0901 	moveq.w	r9, #1
 80020d4:	6901      	ldr	r1, [r0, #16]
    if(DWT_BR_110K == config->dataRate)
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f040 814e 	bne.w	8002378 <dwt_configure+0x2dc>
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 80020dc:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 80020e0:	ea4f 08d8 	mov.w	r8, r8, lsr #3
    pdw1000local->longFrames = config->phrMode ;
 80020e4:	7a22      	ldrb	r2, [r4, #8]
 80020e6:	7282      	strb	r2, [r0, #10]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 80020e8:	0413      	lsls	r3, r2, #16
 80020ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 80020ee:	f421 3240 	bic.w	r2, r1, #196608	; 0x30000
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 80020f2:	4313      	orrs	r3, r2
 80020f4:	6103      	str	r3, [r0, #16]
    dwt_writetodevice(regFileID,regOffset,4,buffer);
 80020f6:	2204      	movs	r2, #4
        regval >>= 8 ;
 80020f8:	0a18      	lsrs	r0, r3, #8
 80020fa:	0c19      	lsrs	r1, r3, #16
 80020fc:	ea4f 6c13 	mov.w	ip, r3, lsr #24
        buffer[j] = regval & 0xff ;
 8002100:	f88d 300c 	strb.w	r3, [sp, #12]
 8002104:	f88d 000d 	strb.w	r0, [sp, #13]
    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8002108:	ab03      	add	r3, sp, #12
 800210a:	4610      	mov	r0, r2
        buffer[j] = regval & 0xff ;
 800210c:	f88d 100e 	strb.w	r1, [sp, #14]
    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8002110:	2100      	movs	r1, #0
        buffer[j] = regval & 0xff ;
 8002112:	f88d c00f 	strb.w	ip, [sp, #15]
    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8002116:	f7ff fe8f 	bl	8001e38 <dwt_writetodevice>
    buffer[1] = regval >> 8 ;
 800211a:	ea4f 2c18 	mov.w	ip, r8, lsr #8
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 800211e:	ab03      	add	r3, sp, #12
 8002120:	2202      	movs	r2, #2
 8002122:	f642 0104 	movw	r1, #10244	; 0x2804
 8002126:	202e      	movs	r0, #46	; 0x2e
    buffer[1] = regval >> 8 ;
 8002128:	f88d c00d 	strb.w	ip, [sp, #13]
    buffer[0] = regval & 0xFF;
 800212c:	f88d 800c 	strb.w	r8, [sp, #12]
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8002130:	f7ff fe82 	bl	8001e38 <dwt_writetodevice>
    _dwt_configlde(prfIndex);
 8002134:	4638      	mov	r0, r7
 8002136:	f7ff ff93 	bl	8002060 <_dwt_configlde>
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 800213a:	4aae      	ldr	r2, [pc, #696]	; (80023f4 <dwt_configure+0x358>)
 800213c:	4bae      	ldr	r3, [pc, #696]	; (80023f8 <dwt_configure+0x35c>)
 800213e:	f812 8006 	ldrb.w	r8, [r2, r6]
 8002142:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
        buffer[j] = regval & 0xff ;
 8002146:	f88d 300c 	strb.w	r3, [sp, #12]
        regval >>= 8 ;
 800214a:	0a19      	lsrs	r1, r3, #8
 800214c:	0c18      	lsrs	r0, r3, #16
 800214e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8002152:	2204      	movs	r2, #4
 8002154:	ab03      	add	r3, sp, #12
        buffer[j] = regval & 0xff ;
 8002156:	f88d 100d 	strb.w	r1, [sp, #13]
 800215a:	f88d 000e 	strb.w	r0, [sp, #14]
    dwt_writetodevice(regFileID,regOffset,4,buffer);
 800215e:	2107      	movs	r1, #7
 8002160:	202b      	movs	r0, #43	; 0x2b
        buffer[j] = regval & 0xff ;
 8002162:	f88d c00f 	strb.w	ip, [sp, #15]
    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8002166:	f7ff fe67 	bl	8001e38 <dwt_writetodevice>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 800216a:	4aa4      	ldr	r2, [pc, #656]	; (80023fc <dwt_configure+0x360>)
 800216c:	ab04      	add	r3, sp, #16
 800216e:	f812 2008 	ldrb.w	r2, [r2, r8]
 8002172:	f803 2d08 	strb.w	r2, [r3, #-8]!
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8002176:	210b      	movs	r1, #11
 8002178:	2201      	movs	r2, #1
 800217a:	202b      	movs	r0, #43	; 0x2b
 800217c:	f7ff fe5c 	bl	8001e38 <dwt_writetodevice>
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 8002180:	4a9f      	ldr	r2, [pc, #636]	; (8002400 <dwt_configure+0x364>)
 8002182:	ab04      	add	r3, sp, #16
 8002184:	f812 2009 	ldrb.w	r2, [r2, r9]
 8002188:	f803 2d09 	strb.w	r2, [r3, #-9]!
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 800218c:	210b      	movs	r1, #11
 800218e:	2201      	movs	r2, #1
 8002190:	2028      	movs	r0, #40	; 0x28
 8002192:	f7ff fe51 	bl	8001e38 <dwt_writetodevice>
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 8002196:	4b9b      	ldr	r3, [pc, #620]	; (8002404 <dwt_configure+0x368>)
 8002198:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
        buffer[j] = regval & 0xff ;
 800219c:	f88d 300c 	strb.w	r3, [sp, #12]
        regval >>= 8 ;
 80021a0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80021a4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80021a8:	ea4f 2813 	mov.w	r8, r3, lsr #8
    dwt_writetodevice(regFileID,regOffset,4,buffer);
 80021ac:	2204      	movs	r2, #4
 80021ae:	ab03      	add	r3, sp, #12
 80021b0:	210c      	movs	r1, #12
 80021b2:	2028      	movs	r0, #40	; 0x28
        buffer[j] = regval & 0xff ;
 80021b4:	f88d e00e 	strb.w	lr, [sp, #14]
 80021b8:	f88d c00f 	strb.w	ip, [sp, #15]
 80021bc:	f88d 800d 	strb.w	r8, [sp, #13]
    dwt_writetodevice(regFileID,regOffset,4,buffer);
 80021c0:	f7ff fe3a 	bl	8001e38 <dwt_writetodevice>
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 80021c4:	79e2      	ldrb	r2, [r4, #7]
 80021c6:	79a3      	ldrb	r3, [r4, #6]
 80021c8:	498f      	ldr	r1, [pc, #572]	; (8002408 <dwt_configure+0x36c>)
 80021ca:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 80021ce:	2202      	movs	r2, #2
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 80021d0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    buffer[0] = regval & 0xFF;
 80021d4:	f88d 300c 	strb.w	r3, [sp, #12]
    buffer[1] = regval >> 8 ;
 80021d8:	ea4f 2c13 	mov.w	ip, r3, lsr #8
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 80021dc:	4611      	mov	r1, r2
 80021de:	ab03      	add	r3, sp, #12
 80021e0:	2027      	movs	r0, #39	; 0x27
    buffer[1] = regval >> 8 ;
 80021e2:	f88d c00d 	strb.w	ip, [sp, #13]
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 80021e6:	f7ff fe27 	bl	8001e38 <dwt_writetodevice>
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 80021ea:	4b88      	ldr	r3, [pc, #544]	; (800240c <dwt_configure+0x370>)
 80021ec:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
    buffer[0] = regval & 0xFF;
 80021f0:	f88d 300c 	strb.w	r3, [sp, #12]
    buffer[1] = regval >> 8 ;
 80021f4:	ea4f 2c13 	mov.w	ip, r3, lsr #8
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 80021f8:	2202      	movs	r2, #2
 80021fa:	ab03      	add	r3, sp, #12
 80021fc:	2104      	movs	r1, #4
 80021fe:	2027      	movs	r0, #39	; 0x27
    buffer[1] = regval >> 8 ;
 8002200:	f88d c00d 	strb.w	ip, [sp, #13]
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8002204:	f7ff fe18 	bl	8001e38 <dwt_writetodevice>
    if(config->dataRate == DWT_BR_110K)
 8002208:	79e3      	ldrb	r3, [r4, #7]
 800220a:	2b00      	cmp	r3, #0
 800220c:	f000 80d2 	beq.w	80023b4 <dwt_configure+0x318>
        if(config->txPreambLength == DWT_PLEN_64)
 8002210:	78a3      	ldrb	r3, [r4, #2]
 8002212:	2b04      	cmp	r3, #4
 8002214:	f000 80b3 	beq.w	800237e <dwt_configure+0x2e2>
    buffer[0] = regval & 0xFF;
 8002218:	f04f 0c20 	mov.w	ip, #32
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 800221c:	ab03      	add	r3, sp, #12
 800221e:	2202      	movs	r2, #2
 8002220:	2106      	movs	r1, #6
 8002222:	2027      	movs	r0, #39	; 0x27
    buffer[0] = regval & 0xFF;
 8002224:	f8ad c00c 	strh.w	ip, [sp, #12]
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8002228:	f7ff fe06 	bl	8001e38 <dwt_writetodevice>
 800222c:	ab04      	add	r3, sp, #16
 800222e:	2228      	movs	r2, #40	; 0x28
 8002230:	f803 2d06 	strb.w	r2, [r3, #-6]!
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8002234:	2126      	movs	r1, #38	; 0x26
 8002236:	2201      	movs	r2, #1
 8002238:	2027      	movs	r0, #39	; 0x27
 800223a:	f7ff fdfd 	bl	8001e38 <dwt_writetodevice>
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 800223e:	78e2      	ldrb	r2, [r4, #3]
 8002240:	4973      	ldr	r1, [pc, #460]	; (8002410 <dwt_configure+0x374>)
 8002242:	eb02 0287 	add.w	r2, r2, r7, lsl #2
    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8002246:	ab03      	add	r3, sp, #12
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 8002248:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
        buffer[j] = regval & 0xff ;
 800224c:	f88d 200c 	strb.w	r2, [sp, #12]
        regval >>= 8 ;
 8002250:	0a11      	lsrs	r1, r2, #8
 8002252:	0c10      	lsrs	r0, r2, #16
 8002254:	ea4f 6c12 	mov.w	ip, r2, lsr #24
        buffer[j] = regval & 0xff ;
 8002258:	f88d 100d 	strb.w	r1, [sp, #13]
 800225c:	f88d 000e 	strb.w	r0, [sp, #14]
    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8002260:	2204      	movs	r2, #4
 8002262:	2108      	movs	r1, #8
 8002264:	2027      	movs	r0, #39	; 0x27
        buffer[j] = regval & 0xff ;
 8002266:	f88d c00f 	strb.w	ip, [sp, #15]
    dwt_writetodevice(regFileID,regOffset,4,buffer);
 800226a:	f7ff fde5 	bl	8001e38 <dwt_writetodevice>
    if(config->sfdTO == 0)
 800226e:	8963      	ldrh	r3, [r4, #10]
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 8098 	beq.w	80023a6 <dwt_configure+0x30a>
 8002276:	b2da      	uxtb	r2, r3
 8002278:	ea4f 2c13 	mov.w	ip, r3, lsr #8
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 800227c:	f8df 8198 	ldr.w	r8, [pc, #408]	; 8002418 <dwt_configure+0x37c>
    buffer[0] = regval & 0xFF;
 8002280:	f88d 200c 	strb.w	r2, [sp, #12]
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8002284:	ab03      	add	r3, sp, #12
 8002286:	2202      	movs	r2, #2
 8002288:	2120      	movs	r1, #32
 800228a:	2027      	movs	r0, #39	; 0x27
    buffer[1] = regval >> 8 ;
 800228c:	f88d c00d 	strb.w	ip, [sp, #13]
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8002290:	f7ff fdd2 	bl	8001e38 <dwt_writetodevice>
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 8002294:	f8d8 3000 	ldr.w	r3, [r8]
        buffer[j] = regval & 0xff ;
 8002298:	f88d 300c 	strb.w	r3, [sp, #12]
        regval >>= 8 ;
 800229c:	0a19      	lsrs	r1, r3, #8
 800229e:	0c18      	lsrs	r0, r3, #16
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 80022a0:	eb08 0747 	add.w	r7, r8, r7, lsl #1
        regval >>= 8 ;
 80022a4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
    dwt_writetodevice(regFileID,regOffset,4,buffer);
 80022a8:	2204      	movs	r2, #4
 80022aa:	ab03      	add	r3, sp, #12
        buffer[j] = regval & 0xff ;
 80022ac:	f88d 100d 	strb.w	r1, [sp, #13]
 80022b0:	f88d 000e 	strb.w	r0, [sp, #14]
    dwt_writetodevice(regFileID,regOffset,4,buffer);
 80022b4:	210c      	movs	r1, #12
 80022b6:	2023      	movs	r0, #35	; 0x23
        buffer[j] = regval & 0xff ;
 80022b8:	f88d c00f 	strb.w	ip, [sp, #15]
    dwt_writetodevice(regFileID,regOffset,4,buffer);
 80022bc:	f7ff fdbc 	bl	8001e38 <dwt_writetodevice>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 80022c0:	88ba      	ldrh	r2, [r7, #4]
    buffer[0] = regval & 0xFF;
 80022c2:	f88d 200c 	strb.w	r2, [sp, #12]
    buffer[1] = regval >> 8 ;
 80022c6:	0a17      	lsrs	r7, r2, #8
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 80022c8:	2104      	movs	r1, #4
 80022ca:	ab03      	add	r3, sp, #12
 80022cc:	2202      	movs	r2, #2
 80022ce:	2023      	movs	r0, #35	; 0x23
    buffer[1] = regval >> 8 ;
 80022d0:	f88d 700d 	strb.w	r7, [sp, #13]
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 80022d4:	f7ff fdb0 	bl	8001e38 <dwt_writetodevice>
    if(config->nsSFD)
 80022d8:	79a1      	ldrb	r1, [r4, #6]
 80022da:	2900      	cmp	r1, #0
 80022dc:	d175      	bne.n	80023ca <dwt_configure+0x32e>
 80022de:	460a      	mov	r2, r1
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 80022e0:	7867      	ldrb	r7, [r4, #1]
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 80022e2:	f894 c005 	ldrb.w	ip, [r4, #5]
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 80022e6:	7920      	ldrb	r0, [r4, #4]
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 80022e8:	f006 030f 	and.w	r3, r6, #15
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 80022ec:	04bf      	lsls	r7, r7, #18
 80022ee:	f407 2740 	and.w	r7, r7, #786432	; 0xc0000
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 80022f2:	ea43 63cc 	orr.w	r3, r3, ip, lsl #27
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 80022f6:	0580      	lsls	r0, r0, #22
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 80022f8:	433b      	orrs	r3, r7
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 80022fa:	0136      	lsls	r6, r6, #4
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 80022fc:	f000 60f8 	and.w	r0, r0, #130023424	; 0x7c00000
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 8002300:	b2f6      	uxtb	r6, r6
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8002302:	4318      	orrs	r0, r3
 8002304:	4330      	orrs	r0, r6
 8002306:	4308      	orrs	r0, r1
        buffer[j] = regval & 0xff ;
 8002308:	2600      	movs	r6, #0
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 800230a:	4310      	orrs	r0, r2
        regval >>= 8 ;
 800230c:	ea4f 4c10 	mov.w	ip, r0, lsr #16
 8002310:	0e07      	lsrs	r7, r0, #24
    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8002312:	4631      	mov	r1, r6
 8002314:	ab03      	add	r3, sp, #12
        buffer[j] = regval & 0xff ;
 8002316:	f88d 000c 	strb.w	r0, [sp, #12]
    dwt_writetodevice(regFileID,regOffset,4,buffer);
 800231a:	2204      	movs	r2, #4
 800231c:	201f      	movs	r0, #31
        buffer[j] = regval & 0xff ;
 800231e:	f88d c00e 	strb.w	ip, [sp, #14]
 8002322:	f88d 700f 	strb.w	r7, [sp, #15]
 8002326:	f88d 600d 	strb.w	r6, [sp, #13]
    dwt_writetodevice(regFileID,regOffset,4,buffer);
 800232a:	f7ff fd85 	bl	8001e38 <dwt_writetodevice>
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 800232e:	7860      	ldrb	r0, [r4, #1]
 8002330:	78a2      	ldrb	r2, [r4, #2]
 8002332:	79e3      	ldrb	r3, [r4, #7]
 8002334:	6829      	ldr	r1, [r5, #0]
 8002336:	4302      	orrs	r2, r0
 8002338:	035b      	lsls	r3, r3, #13
 800233a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800233e:	60cb      	str	r3, [r1, #12]
        regval >>= 8 ;
 8002340:	0a1d      	lsrs	r5, r3, #8
 8002342:	0c1c      	lsrs	r4, r3, #16
    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8002344:	4631      	mov	r1, r6
 8002346:	ab03      	add	r3, sp, #12
 8002348:	2204      	movs	r2, #4
 800234a:	2008      	movs	r0, #8
        buffer[j] = regval & 0xff ;
 800234c:	f88d 400e 	strb.w	r4, [sp, #14]
 8002350:	f88d 600c 	strb.w	r6, [sp, #12]
 8002354:	f88d 600f 	strb.w	r6, [sp, #15]
 8002358:	f88d 500d 	strb.w	r5, [sp, #13]
 800235c:	2442      	movs	r4, #66	; 0x42
    dwt_writetodevice(regFileID,regOffset,4,buffer);
 800235e:	f7ff fd6b 	bl	8001e38 <dwt_writetodevice>
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8002362:	4631      	mov	r1, r6
 8002364:	ab03      	add	r3, sp, #12
 8002366:	2201      	movs	r2, #1
 8002368:	200d      	movs	r0, #13
 800236a:	f88d 400c 	strb.w	r4, [sp, #12]
 800236e:	f7ff fd63 	bl	8001e38 <dwt_writetodevice>
} // end dwt_configure()
 8002372:	b005      	add	sp, #20
 8002374:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 8002378:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
 800237c:	e6b2      	b.n	80020e4 <dwt_configure+0x48>
    buffer[0] = regval & 0xFF;
 800237e:	f04f 0810 	mov.w	r8, #16
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8002382:	ab03      	add	r3, sp, #12
 8002384:	2202      	movs	r2, #2
 8002386:	2106      	movs	r1, #6
 8002388:	2027      	movs	r0, #39	; 0x27
    buffer[0] = regval & 0xFF;
 800238a:	f8ad 800c 	strh.w	r8, [sp, #12]
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 800238e:	f7ff fd53 	bl	8001e38 <dwt_writetodevice>
 8002392:	eb0d 0308 	add.w	r3, sp, r8
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8002396:	2201      	movs	r2, #1
 8002398:	f803 8d07 	strb.w	r8, [r3, #-7]!
 800239c:	2126      	movs	r1, #38	; 0x26
 800239e:	2027      	movs	r0, #39	; 0x27
 80023a0:	f7ff fd4a 	bl	8001e38 <dwt_writetodevice>
 80023a4:	e74b      	b.n	800223e <dwt_configure+0x1a2>
        config->sfdTO = DWT_SFDTOC_DEF;
 80023a6:	f241 0341 	movw	r3, #4161	; 0x1041
 80023aa:	8163      	strh	r3, [r4, #10]
 80023ac:	f04f 0c10 	mov.w	ip, #16
 80023b0:	2241      	movs	r2, #65	; 0x41
 80023b2:	e763      	b.n	800227c <dwt_configure+0x1e0>
    buffer[0] = regval & 0xFF;
 80023b4:	f04f 0c64 	mov.w	ip, #100	; 0x64
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 80023b8:	ab03      	add	r3, sp, #12
 80023ba:	2202      	movs	r2, #2
 80023bc:	2106      	movs	r1, #6
 80023be:	2027      	movs	r0, #39	; 0x27
    buffer[0] = regval & 0xFF;
 80023c0:	f8ad c00c 	strh.w	ip, [sp, #12]
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 80023c4:	f7ff fd38 	bl	8001e38 <dwt_writetodevice>
 80023c8:	e739      	b.n	800223e <dwt_configure+0x1a2>
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 80023ca:	4912      	ldr	r1, [pc, #72]	; (8002414 <dwt_configure+0x378>)
 80023cc:	79e2      	ldrb	r2, [r4, #7]
 80023ce:	ab04      	add	r3, sp, #16
 80023d0:	5c8a      	ldrb	r2, [r1, r2]
 80023d2:	f803 2d05 	strb.w	r2, [r3, #-5]!
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 80023d6:	2100      	movs	r1, #0
 80023d8:	2201      	movs	r2, #1
 80023da:	2021      	movs	r0, #33	; 0x21
 80023dc:	f7ff fd2c 	bl	8001e38 <dwt_writetodevice>
 80023e0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80023e4:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80023e8:	e77a      	b.n	80022e0 <dwt_configure+0x244>
 80023ea:	bf00      	nop
 80023ec:	08003640 	.word	0x08003640
 80023f0:	20000008 	.word	0x20000008
 80023f4:	080036ec 	.word	0x080036ec
 80023f8:	080036bc 	.word	0x080036bc
 80023fc:	080036b4 	.word	0x080036b4
 8002400:	080036b0 	.word	0x080036b0
 8002404:	080036d4 	.word	0x080036d4
 8002408:	08003698 	.word	0x08003698
 800240c:	08003694 	.word	0x08003694
 8002410:	08003674 	.word	0x08003674
 8002414:	080036a4 	.word	0x080036a4
 8002418:	080036a8 	.word	0x080036a8

0800241c <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 800241c:	b530      	push	{r4, r5, lr}
 800241e:	b083      	sub	sp, #12
 8002420:	4604      	mov	r4, r0
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8002422:	466b      	mov	r3, sp
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8002424:	2536      	movs	r5, #54	; 0x36
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8002426:	a901      	add	r1, sp, #4
 8002428:	2202      	movs	r2, #2
 800242a:	2001      	movs	r0, #1
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 800242c:	f88d 5004 	strb.w	r5, [sp, #4]
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8002430:	f000 fe86 	bl	8003140 <readfromspi>
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
    switch(clocks)
 8002434:	2c0e      	cmp	r4, #14
 8002436:	d812      	bhi.n	800245e <_dwt_enableclocks+0x42>
 8002438:	e8df f004 	tbb	[pc, r4]
 800243c:	1135082c 	.word	0x1135082c
 8002440:	3e111111 	.word	0x3e111111
 8002444:	5a11114d 	.word	0x5a11114d
 8002448:	6861      	.short	0x6861
 800244a:	27          	.byte	0x27
 800244b:	00          	.byte	0x00
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
            reg[1] = reg[1] & 0xfe;
 800244c:	f89d 3001 	ldrb.w	r3, [sp, #1]
            reg[0] = 0x00 ;
 8002450:	2200      	movs	r2, #0
            reg[1] = reg[1] & 0xfe;
 8002452:	f023 0301 	bic.w	r3, r3, #1
 8002456:	f88d 3001 	strb.w	r3, [sp, #1]
            reg[0] = 0x00 ;
 800245a:	f88d 2000 	strb.w	r2, [sp]
    writetospi(cnt,header,length,buffer);
 800245e:	2201      	movs	r2, #1
 8002460:	466b      	mov	r3, sp
 8002462:	a901      	add	r1, sp, #4
 8002464:	4610      	mov	r0, r2
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8002466:	24b6      	movs	r4, #182	; 0xb6
 8002468:	f88d 4004 	strb.w	r4, [sp, #4]
    writetospi(cnt,header,length,buffer);
 800246c:	f000 fe32 	bl	80030d4 <writetospi>
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8002470:	f44f 74fb 	mov.w	r4, #502	; 0x1f6
    writetospi(cnt,header,length,buffer);
 8002474:	a901      	add	r1, sp, #4
 8002476:	f10d 0301 	add.w	r3, sp, #1
 800247a:	2201      	movs	r2, #1
 800247c:	2002      	movs	r0, #2
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800247e:	f8ad 4004 	strh.w	r4, [sp, #4]
    writetospi(cnt,header,length,buffer);
 8002482:	f000 fe27 	bl	80030d4 <writetospi>

    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);

} // end _dwt_enableclocks()
 8002486:	b003      	add	sp, #12
 8002488:	bd30      	pop	{r4, r5, pc}
            reg[0] = 0x01;
 800248a:	f240 3301 	movw	r3, #769	; 0x301
 800248e:	f8ad 3000 	strh.w	r3, [sp]
        break;
 8002492:	e7e4      	b.n	800245e <_dwt_enableclocks+0x42>
            reg[0] = 0x01 | (reg[0] & 0xfc);
 8002494:	f89d 3000 	ldrb.w	r3, [sp]
 8002498:	f023 0303 	bic.w	r3, r3, #3
 800249c:	f043 0301 	orr.w	r3, r3, #1
 80024a0:	f88d 3000 	strb.w	r3, [sp]
        break;
 80024a4:	e7db      	b.n	800245e <_dwt_enableclocks+0x42>
            reg[0] = 0x02 | (reg[0] & 0xfc);
 80024a6:	f89d 3000 	ldrb.w	r3, [sp]
 80024aa:	f023 0303 	bic.w	r3, r3, #3
 80024ae:	f043 0302 	orr.w	r3, r3, #2
 80024b2:	f88d 3000 	strb.w	r3, [sp]
        break;
 80024b6:	e7d2      	b.n	800245e <_dwt_enableclocks+0x42>
            reg[0] = 0x48 | (reg[0] & 0xb3);
 80024b8:	f89d 3000 	ldrb.w	r3, [sp]
            reg[1] = 0x80 | reg[1];
 80024bc:	f89d 2001 	ldrb.w	r2, [sp, #1]
            reg[0] = 0x48 | (reg[0] & 0xb3);
 80024c0:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 80024c4:	f043 0348 	orr.w	r3, r3, #72	; 0x48
            reg[1] = 0x80 | reg[1];
 80024c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
            reg[0] = 0x48 | (reg[0] & 0xb3);
 80024cc:	f88d 3000 	strb.w	r3, [sp]
            reg[1] = 0x80 | reg[1];
 80024d0:	f88d 2001 	strb.w	r2, [sp, #1]
        break;
 80024d4:	e7c3      	b.n	800245e <_dwt_enableclocks+0x42>
            reg[0] = reg[0] & 0xb3;
 80024d6:	f89d 2000 	ldrb.w	r2, [sp]
            reg[1] = 0x7f & reg[1];
 80024da:	f89d 3001 	ldrb.w	r3, [sp, #1]
            reg[0] = reg[0] & 0xb3;
 80024de:	f022 024c 	bic.w	r2, r2, #76	; 0x4c
            reg[1] = 0x7f & reg[1];
 80024e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
            reg[0] = reg[0] & 0xb3;
 80024e6:	f88d 2000 	strb.w	r2, [sp]
            reg[1] = 0x7f & reg[1];
 80024ea:	f88d 3001 	strb.w	r3, [sp, #1]
        break;
 80024ee:	e7b6      	b.n	800245e <_dwt_enableclocks+0x42>
            reg[1] = 0x02 | reg[1];
 80024f0:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80024f4:	f043 0302 	orr.w	r3, r3, #2
 80024f8:	f88d 3001 	strb.w	r3, [sp, #1]
        break;
 80024fc:	e7af      	b.n	800245e <_dwt_enableclocks+0x42>
            reg[1] = reg[1] & 0xfd;
 80024fe:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8002502:	f023 0302 	bic.w	r3, r3, #2
 8002506:	f88d 3001 	strb.w	r3, [sp, #1]
        break;
 800250a:	e7a8      	b.n	800245e <_dwt_enableclocks+0x42>
            reg[0] = 0x20 | (reg[0] & 0xcf);
 800250c:	f89d 3000 	ldrb.w	r3, [sp]
 8002510:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002514:	f043 0320 	orr.w	r3, r3, #32
 8002518:	f88d 3000 	strb.w	r3, [sp]
        break;
 800251c:	e79f      	b.n	800245e <_dwt_enableclocks+0x42>
 800251e:	bf00      	nop

08002520 <_dwt_loaducodefromrom>:
{
 8002520:	b500      	push	{lr}
    _dwt_enableclocks(FORCE_LDE);
 8002522:	200e      	movs	r0, #14
{
 8002524:	b083      	sub	sp, #12
    _dwt_enableclocks(FORCE_LDE);
 8002526:	f7ff ff79 	bl	800241c <_dwt_enableclocks>
    buffer[0] = regval & 0xFF;
 800252a:	ab02      	add	r3, sp, #8
 800252c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002530:	f823 2d04 	strh.w	r2, [r3, #-4]!
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8002534:	2106      	movs	r1, #6
 8002536:	2202      	movs	r2, #2
 8002538:	202d      	movs	r0, #45	; 0x2d
 800253a:	f7ff fc7d 	bl	8001e38 <dwt_writetodevice>
    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 800253e:	2001      	movs	r0, #1
 8002540:	f000 fdc6 	bl	80030d0 <deca_sleep>
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8002544:	2001      	movs	r0, #1
 8002546:	f7ff ff69 	bl	800241c <_dwt_enableclocks>
}
 800254a:	b003      	add	sp, #12
 800254c:	f85d fb04 	ldr.w	pc, [sp], #4

08002550 <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 8002550:	b500      	push	{lr}
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 8002552:	2000      	movs	r0, #0
{
 8002554:	b083      	sub	sp, #12
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 8002556:	f7ff ff61 	bl	800241c <_dwt_enableclocks>
    buffer[0] = regval & 0xFF;
 800255a:	ab02      	add	r3, sp, #8
 800255c:	2200      	movs	r2, #0
 800255e:	f823 2d04 	strh.w	r2, [r3, #-4]!
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8002562:	2104      	movs	r1, #4
 8002564:	2202      	movs	r2, #2
 8002566:	2036      	movs	r0, #54	; 0x36
 8002568:	f7ff fc66 	bl	8001e38 <dwt_writetodevice>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
}
 800256c:	b003      	add	sp, #12
 800256e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002572:	bf00      	nop

08002574 <dwt_starttx>:
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed transmission will be cancelled if the delayed time has passed)
 */

int dwt_starttx(uint8 mode)
{
 8002574:	b510      	push	{r4, lr}
    int retval = DWT_SUCCESS ;
    uint8 temp  = 0x00;
    uint16 checkTxOK = 0 ;

    if(mode & DWT_RESPONSE_EXPECTED)
 8002576:	f010 0202 	ands.w	r2, r0, #2
{
 800257a:	b082      	sub	sp, #8
    if(mode & DWT_RESPONSE_EXPECTED)
 800257c:	d004      	beq.n	8002588 <dwt_starttx+0x14>
    {
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
        pdw1000local->wait4resp = 1;
 800257e:	4b1d      	ldr	r3, [pc, #116]	; (80025f4 <dwt_starttx+0x80>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2201      	movs	r2, #1
 8002584:	755a      	strb	r2, [r3, #21]
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
 8002586:	2280      	movs	r2, #128	; 0x80
    }

    if (mode & DWT_START_TX_DELAYED)
 8002588:	f010 0401 	ands.w	r4, r0, #1
 800258c:	ab02      	add	r3, sp, #8
 800258e:	d019      	beq.n	80025c4 <dwt_starttx+0x50>
    {
        // Both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
 8002590:	f042 0206 	orr.w	r2, r2, #6
 8002594:	f803 2d06 	strb.w	r2, [r3, #-6]!
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8002598:	2100      	movs	r1, #0
 800259a:	2201      	movs	r2, #1
 800259c:	200d      	movs	r0, #13
 800259e:	f7ff fc4b 	bl	8001e38 <dwt_writetodevice>
    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 80025a2:	200f      	movs	r0, #15
 80025a4:	ab01      	add	r3, sp, #4
 80025a6:	2202      	movs	r2, #2
 80025a8:	2103      	movs	r1, #3
 80025aa:	f7ff fca3 	bl	8001ef4 <dwt_readfromdevice>
    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 80025ae:	f89d 4005 	ldrb.w	r4, [sp, #5]
 80025b2:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80025b6:	eb00 2004 	add.w	r0, r0, r4, lsl #8
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
        checkTxOK = dwt_read16bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
        if ((checkTxOK & SYS_STATUS_TXERR) == 0) // Transmit Delayed Send set over Half a Period away or Power Up error (there is enough time to send but not to power up individual blocks).
 80025ba:	f410 6081 	ands.w	r0, r0, #1032	; 0x408
 80025be:	d10d      	bne.n	80025dc <dwt_starttx+0x68>
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
    }

    return retval;

} // end dwt_starttx()
 80025c0:	b002      	add	sp, #8
 80025c2:	bd10      	pop	{r4, pc}
        temp |= (uint8)SYS_CTRL_TXSTRT ;
 80025c4:	f042 0202 	orr.w	r2, r2, #2
 80025c8:	f803 2d04 	strb.w	r2, [r3, #-4]!
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 80025cc:	4621      	mov	r1, r4
 80025ce:	2201      	movs	r2, #1
 80025d0:	200d      	movs	r0, #13
 80025d2:	f7ff fc31 	bl	8001e38 <dwt_writetodevice>
    int retval = DWT_SUCCESS ;
 80025d6:	4620      	mov	r0, r4
} // end dwt_starttx()
 80025d8:	b002      	add	sp, #8
 80025da:	bd10      	pop	{r4, pc}
 80025dc:	ab02      	add	r3, sp, #8
 80025de:	2240      	movs	r2, #64	; 0x40
 80025e0:	f803 2d05 	strb.w	r2, [r3, #-5]!
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 80025e4:	200d      	movs	r0, #13
 80025e6:	2201      	movs	r2, #1
 80025e8:	2100      	movs	r1, #0
 80025ea:	f7ff fc25 	bl	8001e38 <dwt_writetodevice>
            retval = DWT_ERROR ; // Failed !
 80025ee:	f04f 30ff 	mov.w	r0, #4294967295
 80025f2:	e7e5      	b.n	80025c0 <dwt_starttx+0x4c>
 80025f4:	20000008 	.word	0x20000008

080025f8 <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 80025f8:	b530      	push	{r4, r5, lr}
 80025fa:	b083      	sub	sp, #12
    buffer[0] = regval & 0xFF;
 80025fc:	ad02      	add	r5, sp, #8
 80025fe:	2400      	movs	r4, #0
    _dwt_disablesequencing();
 8002600:	f7ff ffa6 	bl	8002550 <_dwt_disablesequencing>
    buffer[0] = regval & 0xFF;
 8002604:	f825 4d04 	strh.w	r4, [r5, #-4]!
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8002608:	4621      	mov	r1, r4
 800260a:	462b      	mov	r3, r5
 800260c:	2202      	movs	r2, #2
 800260e:	202c      	movs	r0, #44	; 0x2c
 8002610:	f7ff fc12 	bl	8001e38 <dwt_writetodevice>
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8002614:	462b      	mov	r3, r5
 8002616:	2201      	movs	r2, #1
 8002618:	2106      	movs	r1, #6
 800261a:	202c      	movs	r0, #44	; 0x2c
 800261c:	f88d 4004 	strb.w	r4, [sp, #4]
 8002620:	f7ff fc0a 	bl	8001e38 <dwt_writetodevice>
    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
    // Upload the new configuration
    _dwt_aonarrayupload();
 8002624:	f7ff fd06 	bl	8002034 <_dwt_aonarrayupload>
 8002628:	ab02      	add	r3, sp, #8
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 800262a:	2201      	movs	r2, #1
 800262c:	f803 4d05 	strb.w	r4, [r3, #-5]!
 8002630:	2103      	movs	r1, #3
 8002632:	2036      	movs	r0, #54	; 0x36
 8002634:	f7ff fc00 	bl	8001e38 <dwt_writetodevice>
    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 8002638:	2001      	movs	r0, #1
 800263a:	f000 fd49 	bl	80030d0 <deca_sleep>
 800263e:	ab02      	add	r3, sp, #8
 8002640:	22f0      	movs	r2, #240	; 0xf0
 8002642:	f803 2d06 	strb.w	r2, [r3, #-6]!
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8002646:	2103      	movs	r1, #3
 8002648:	2201      	movs	r2, #1
 800264a:	2036      	movs	r0, #54	; 0x36
 800264c:	f7ff fbf4 	bl	8001e38 <dwt_writetodevice>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);

    pdw1000local->wait4resp = 0;
 8002650:	4b02      	ldr	r3, [pc, #8]	; (800265c <dwt_softreset+0x64>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	755c      	strb	r4, [r3, #21]
}
 8002656:	b003      	add	sp, #12
 8002658:	bd30      	pop	{r4, r5, pc}
 800265a:	bf00      	nop
 800265c:	20000008 	.word	0x20000008

08002660 <dwt_initialise>:
{
 8002660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 8002664:	4fa3      	ldr	r7, [pc, #652]	; (80028f4 <dwt_initialise+0x294>)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	2500      	movs	r5, #0
 800266a:	615d      	str	r5, [r3, #20]
    pdw1000local->cbRxOk = NULL;
 800266c:	e9c3 550a 	strd	r5, r5, [r3, #40]	; 0x28
    pdw1000local->cbRxErr = NULL;
 8002670:	e9c3 550c 	strd	r5, r5, [r3, #48]	; 0x30
{
 8002674:	b082      	sub	sp, #8
 8002676:	4604      	mov	r4, r0
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 8002678:	f7ff fc68 	bl	8001f4c <dwt_readdevid>
 800267c:	4b9e      	ldr	r3, [pc, #632]	; (80028f8 <dwt_initialise+0x298>)
 800267e:	4298      	cmp	r0, r3
 8002680:	f040 8135 	bne.w	80028ee <dwt_initialise+0x28e>
    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 8002684:	f014 0902 	ands.w	r9, r4, #2
 8002688:	f000 80a3 	beq.w	80027d2 <dwt_initialise+0x172>
    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 800268c:	f014 06f8 	ands.w	r6, r4, #248	; 0xf8
 8002690:	f000 808a 	beq.w	80027a8 <dwt_initialise+0x148>
 8002694:	ab02      	add	r3, sp, #8
 8002696:	2204      	movs	r2, #4
 8002698:	f803 2d08 	strb.w	r2, [r3, #-8]!
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 800269c:	4629      	mov	r1, r5
 800269e:	2201      	movs	r2, #1
 80026a0:	2024      	movs	r0, #36	; 0x24
 80026a2:	f7ff fbc9 	bl	8001e38 <dwt_writetodevice>
    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 80026a6:	f10d 0804 	add.w	r8, sp, #4
 80026aa:	4643      	mov	r3, r8
 80026ac:	2204      	movs	r2, #4
 80026ae:	2130      	movs	r1, #48	; 0x30
 80026b0:	2028      	movs	r0, #40	; 0x28
 80026b2:	f10d 0507 	add.w	r5, sp, #7
 80026b6:	f7ff fc1d 	bl	8001ef4 <dwt_readfromdevice>
 80026ba:	f10d 0603 	add.w	r6, sp, #3
 80026be:	462b      	mov	r3, r5
    uint32  regval = 0 ;
 80026c0:	2200      	movs	r2, #0
        regval = (regval << 8) + buffer[j] ;
 80026c2:	f813 1901 	ldrb.w	r1, [r3], #-1
    for (j = 3 ; j >= 0 ; j --)
 80026c6:	429e      	cmp	r6, r3
        regval = (regval << 8) + buffer[j] ;
 80026c8:	eb01 2202 	add.w	r2, r1, r2, lsl #8
    for (j = 3 ; j >= 0 ; j --)
 80026cc:	d1f9      	bne.n	80026c2 <dwt_initialise+0x62>
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 80026ce:	f1b2 3f88 	cmp.w	r2, #2290649224	; 0x88888888
 80026d2:	d004      	beq.n	80026de <dwt_initialise+0x7e>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	8ad3      	ldrh	r3, [r2, #22]
 80026d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026dc:	82d3      	strh	r3, [r2, #22]
    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 80026de:	f004 030a 	and.w	r3, r4, #10
 80026e2:	2b0a      	cmp	r3, #10
 80026e4:	f000 80f9 	beq.w	80028da <dwt_initialise+0x27a>
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 80026e8:	f8d7 a000 	ldr.w	sl, [r7]
 80026ec:	2300      	movs	r3, #0
 80026ee:	f88a 300b 	strb.w	r3, [sl, #11]
    if(DWT_READ_OTP_PID & config)
 80026f2:	f014 0310 	ands.w	r3, r4, #16
 80026f6:	f040 809e 	bne.w	8002836 <dwt_initialise+0x1d6>
        pdw1000local->partID = 0;
 80026fa:	f8ca 3000 	str.w	r3, [sl]
    if(DWT_READ_OTP_LID & config)
 80026fe:	f014 0320 	ands.w	r3, r4, #32
 8002702:	f040 80a3 	bne.w	800284c <dwt_initialise+0x1ec>
        pdw1000local->lotID = 0;
 8002706:	f8ca 3004 	str.w	r3, [sl, #4]
    if(DWT_READ_OTP_BAT & config)
 800270a:	f014 0340 	ands.w	r3, r4, #64	; 0x40
 800270e:	f040 80a6 	bne.w	800285e <dwt_initialise+0x1fe>
        pdw1000local->vBatP = 0;
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	7213      	strb	r3, [r2, #8]
    if(DWT_READ_OTP_TMP & config)
 8002716:	f014 0380 	ands.w	r3, r4, #128	; 0x80
 800271a:	f040 80a9 	bne.w	8002870 <dwt_initialise+0x210>
        pdw1000local->tempP = 0;
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	7253      	strb	r3, [r2, #9]
    if(!(DWT_DW_WAKE_UP & config))
 8002722:	f1b9 0f00 	cmp.w	r9, #0
 8002726:	d14c      	bne.n	80027c2 <dwt_initialise+0x162>
        if(DWT_LOADUCODE & config)
 8002728:	07e1      	lsls	r1, r4, #31
 800272a:	f140 80ac 	bpl.w	8002886 <dwt_initialise+0x226>
            _dwt_loaducodefromrom();
 800272e:	f7ff fef7 	bl	8002520 <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	8ad3      	ldrh	r3, [r2, #22]
 8002736:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800273a:	82d3      	strh	r3, [r2, #22]
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 800273c:	2001      	movs	r0, #1
 800273e:	f7ff fe6d 	bl	800241c <_dwt_enableclocks>
 8002742:	2400      	movs	r4, #0
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8002744:	4633      	mov	r3, r6
 8002746:	2201      	movs	r2, #1
 8002748:	210a      	movs	r1, #10
 800274a:	202c      	movs	r0, #44	; 0x2c
 800274c:	f88d 4003 	strb.w	r4, [sp, #3]
 8002750:	f7ff fb72 	bl	8001e38 <dwt_writetodevice>
    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8002754:	2204      	movs	r2, #4
 8002756:	4621      	mov	r1, r4
 8002758:	4643      	mov	r3, r8
 800275a:	4610      	mov	r0, r2
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 800275c:	f8d7 9000 	ldr.w	r9, [r7]
    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8002760:	f7ff fbc8 	bl	8001ef4 <dwt_readfromdevice>
    uint32  regval = 0 ;
 8002764:	4621      	mov	r1, r4
 8002766:	462b      	mov	r3, r5
        regval = (regval << 8) + buffer[j] ;
 8002768:	f813 2901 	ldrb.w	r2, [r3], #-1
    for (j = 3 ; j >= 0 ; j --)
 800276c:	42b3      	cmp	r3, r6
        regval = (regval << 8) + buffer[j] ;
 800276e:	eb02 2101 	add.w	r1, r2, r1, lsl #8
    for (j = 3 ; j >= 0 ; j --)
 8002772:	d1f9      	bne.n	8002768 <dwt_initialise+0x108>
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 8002774:	683c      	ldr	r4, [r7, #0]
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 8002776:	f8c9 1010 	str.w	r1, [r9, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 800277a:	8a62      	ldrh	r2, [r4, #18]
 800277c:	f002 0203 	and.w	r2, r2, #3
    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8002780:	4643      	mov	r3, r8
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 8002782:	72a2      	strb	r2, [r4, #10]
    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8002784:	2100      	movs	r1, #0
 8002786:	2204      	movs	r2, #4
 8002788:	2008      	movs	r0, #8
 800278a:	f7ff fbb3 	bl	8001ef4 <dwt_readfromdevice>
 800278e:	462b      	mov	r3, r5
    uint32  regval = 0 ;
 8002790:	2200      	movs	r2, #0
        regval = (regval << 8) + buffer[j] ;
 8002792:	f813 1901 	ldrb.w	r1, [r3], #-1
    for (j = 3 ; j >= 0 ; j --)
 8002796:	429e      	cmp	r6, r3
        regval = (regval << 8) + buffer[j] ;
 8002798:	eb01 2202 	add.w	r2, r1, r2, lsl #8
    for (j = 3 ; j >= 0 ; j --)
 800279c:	d1f9      	bne.n	8002792 <dwt_initialise+0x132>
    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 800279e:	60e2      	str	r2, [r4, #12]
    return DWT_SUCCESS ;
 80027a0:	2000      	movs	r0, #0
} // end dwt_initialise()
 80027a2:	b002      	add	sp, #8
 80027a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 80027a8:	4630      	mov	r0, r6
 80027aa:	f7ff fe37 	bl	800241c <_dwt_enableclocks>
 80027ae:	ab02      	add	r3, sp, #8
 80027b0:	2204      	movs	r2, #4
 80027b2:	f803 2d08 	strb.w	r2, [r3, #-8]!
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 80027b6:	4631      	mov	r1, r6
 80027b8:	2201      	movs	r2, #1
 80027ba:	2024      	movs	r0, #36	; 0x24
 80027bc:	f7ff fb3c 	bl	8001e38 <dwt_writetodevice>
 80027c0:	e771      	b.n	80026a6 <dwt_initialise+0x46>
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 80027c2:	0762      	lsls	r2, r4, #29
 80027c4:	d4ba      	bmi.n	800273c <dwt_initialise+0xdc>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	8ad3      	ldrh	r3, [r2, #22]
 80027ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027ce:	82d3      	strh	r3, [r2, #22]
 80027d0:	e7b4      	b.n	800273c <dwt_initialise+0xdc>
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 80027d2:	f7ff ff11 	bl	80025f8 <dwt_softreset>
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 80027d6:	4648      	mov	r0, r9
 80027d8:	f7ff fe20 	bl	800241c <_dwt_enableclocks>
 80027dc:	ab02      	add	r3, sp, #8
 80027de:	2504      	movs	r5, #4
 80027e0:	f803 5d08 	strb.w	r5, [r3, #-8]!
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 80027e4:	2201      	movs	r2, #1
 80027e6:	4649      	mov	r1, r9
 80027e8:	2024      	movs	r0, #36	; 0x24
 80027ea:	f7ff fb25 	bl	8001e38 <dwt_writetodevice>
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 80027ee:	4628      	mov	r0, r5
 80027f0:	f7ff fbee 	bl	8001fd0 <_dwt_otpread>
        if((ldo_tune & 0xFF) != 0)
 80027f4:	f010 0fff 	tst.w	r0, #255	; 0xff
 80027f8:	d160      	bne.n	80028bc <dwt_initialise+0x25c>
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 80027fa:	201e      	movs	r0, #30
 80027fc:	f7ff fbe8 	bl	8001fd0 <_dwt_otpread>
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 8002800:	683a      	ldr	r2, [r7, #0]
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 8002802:	b283      	uxth	r3, r0
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 8002804:	0a19      	lsrs	r1, r3, #8
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 8002806:	06db      	lsls	r3, r3, #27
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 8002808:	72d1      	strb	r1, [r2, #11]
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 800280a:	d137      	bne.n	800287c <dwt_initialise+0x21c>
 800280c:	2070      	movs	r0, #112	; 0x70
 800280e:	ab02      	add	r3, sp, #8
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8002810:	2201      	movs	r2, #1
 8002812:	f803 0d06 	strb.w	r0, [r3, #-6]!
 8002816:	210e      	movs	r1, #14
 8002818:	202b      	movs	r0, #43	; 0x2b
 800281a:	f7ff fb0d 	bl	8001e38 <dwt_writetodevice>
    if(DWT_READ_OTP_PID & config)
 800281e:	f014 0310 	ands.w	r3, r4, #16
 8002822:	f8d7 a000 	ldr.w	sl, [r7]
 8002826:	f10d 0804 	add.w	r8, sp, #4
 800282a:	f10d 0507 	add.w	r5, sp, #7
 800282e:	f10d 0603 	add.w	r6, sp, #3
 8002832:	f43f af62 	beq.w	80026fa <dwt_initialise+0x9a>
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 8002836:	2006      	movs	r0, #6
 8002838:	f7ff fbca 	bl	8001fd0 <_dwt_otpread>
    if(DWT_READ_OTP_LID & config)
 800283c:	f014 0320 	ands.w	r3, r4, #32
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 8002840:	f8ca 0000 	str.w	r0, [sl]
 8002844:	f8d7 a000 	ldr.w	sl, [r7]
    if(DWT_READ_OTP_LID & config)
 8002848:	f43f af5d 	beq.w	8002706 <dwt_initialise+0xa6>
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 800284c:	2007      	movs	r0, #7
 800284e:	f7ff fbbf 	bl	8001fd0 <_dwt_otpread>
    if(DWT_READ_OTP_BAT & config)
 8002852:	f014 0340 	ands.w	r3, r4, #64	; 0x40
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 8002856:	f8ca 0004 	str.w	r0, [sl, #4]
    if(DWT_READ_OTP_BAT & config)
 800285a:	f43f af5a 	beq.w	8002712 <dwt_initialise+0xb2>
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 800285e:	2008      	movs	r0, #8
 8002860:	f7ff fbb6 	bl	8001fd0 <_dwt_otpread>
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	7218      	strb	r0, [r3, #8]
    if(DWT_READ_OTP_TMP & config)
 8002868:	f014 0380 	ands.w	r3, r4, #128	; 0x80
 800286c:	f43f af57 	beq.w	800271e <dwt_initialise+0xbe>
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 8002870:	2009      	movs	r0, #9
 8002872:	f7ff fbad 	bl	8001fd0 <_dwt_otpread>
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	7258      	strb	r0, [r3, #9]
 800287a:	e752      	b.n	8002722 <dwt_initialise+0xc2>
 800287c:	f000 001f 	and.w	r0, r0, #31
 8002880:	f040 0060 	orr.w	r0, r0, #96	; 0x60
 8002884:	e7c3      	b.n	800280e <dwt_initialise+0x1ae>
    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 8002886:	4643      	mov	r3, r8
 8002888:	2202      	movs	r2, #2
 800288a:	2105      	movs	r1, #5
 800288c:	2036      	movs	r0, #54	; 0x36
 800288e:	f7ff fb31 	bl	8001ef4 <dwt_readfromdevice>
    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 8002892:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8002896:	f89d 3004 	ldrb.w	r3, [sp, #4]
            rega &= 0xFDFF ; // Clear LDERUN bit
 800289a:	f64f 50ff 	movw	r0, #65023	; 0xfdff
    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 800289e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
            rega &= 0xFDFF ; // Clear LDERUN bit
 80028a2:	4018      	ands	r0, r3
    buffer[1] = regval >> 8 ;
 80028a4:	0a04      	lsrs	r4, r0, #8
    buffer[0] = regval & 0xFF;
 80028a6:	f88d 0004 	strb.w	r0, [sp, #4]
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 80028aa:	4643      	mov	r3, r8
 80028ac:	2202      	movs	r2, #2
 80028ae:	2105      	movs	r1, #5
 80028b0:	2036      	movs	r0, #54	; 0x36
    buffer[1] = regval >> 8 ;
 80028b2:	f88d 4005 	strb.w	r4, [sp, #5]
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 80028b6:	f7ff fabf 	bl	8001e38 <dwt_writetodevice>
 80028ba:	e73f      	b.n	800273c <dwt_initialise+0xdc>
 80028bc:	ab02      	add	r3, sp, #8
 80028be:	2202      	movs	r2, #2
 80028c0:	f803 2d07 	strb.w	r2, [r3, #-7]!
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 80028c4:	2112      	movs	r1, #18
 80028c6:	2201      	movs	r2, #1
 80028c8:	202d      	movs	r0, #45	; 0x2d
 80028ca:	f7ff fab5 	bl	8001e38 <dwt_writetodevice>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	8ad3      	ldrh	r3, [r2, #22]
 80028d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028d6:	82d3      	strh	r3, [r2, #22]
 80028d8:	e78f      	b.n	80027fa <dwt_initialise+0x19a>
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 80028da:	201e      	movs	r0, #30
 80028dc:	f7ff fb78 	bl	8001fd0 <_dwt_otpread>
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 80028e0:	f8d7 a000 	ldr.w	sl, [r7]
 80028e4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80028e8:	f88a 000b 	strb.w	r0, [sl, #11]
 80028ec:	e701      	b.n	80026f2 <dwt_initialise+0x92>
        return DWT_ERROR ;
 80028ee:	f04f 30ff 	mov.w	r0, #4294967295
 80028f2:	e756      	b.n	80027a2 <dwt_initialise+0x142>
 80028f4:	20000008 	.word	0x20000008
 80028f8:	deca0130 	.word	0xdeca0130

080028fc <dw_main>:

/**
 * Application entry point.
 */
int dw_main(void)
{
 80028fc:	b508      	push	{r3, lr}
    /* Display application name. */
    stdio_write(APP_NAME);
 80028fe:	481c      	ldr	r0, [pc, #112]	; (8002970 <dw_main+0x74>)
 8002900:	f000 fdaa 	bl	8003458 <stdio_write>

    /* Reset and initialise DW1000. See NOTE 2 below.
     * For initialisation, DW1000 clocks must be temporarily set to crystal speed. After initialisation SPI rate can be increased for optimum
     * performance. */
    reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
 8002904:	f000 fcda 	bl	80032bc <reset_DW1000>
    port_set_dw1000_slowrate();
 8002908:	f000 fd3a 	bl	8003380 <port_set_dw1000_slowrate>
    if (dwt_initialise(DWT_LOADNONE) == DWT_ERROR)
 800290c:	2000      	movs	r0, #0
 800290e:	f7ff fea7 	bl	8002660 <dwt_initialise>
 8002912:	3001      	adds	r0, #1
 8002914:	d027      	beq.n	8002966 <dw_main+0x6a>
    {
        stdio_write("INIT FAILED");
        while (1)
        { };
    }
    port_set_dw1000_fastrate();
 8002916:	f000 fd3f 	bl	8003398 <port_set_dw1000_fastrate>

    /* Configure DW1000. See NOTE 3 below. */
    dwt_configure(&config);
 800291a:	4816      	ldr	r0, [pc, #88]	; (8002974 <dw_main+0x78>)
 800291c:	4604      	mov	r4, r0
 800291e:	f7ff fbbd 	bl	800209c <dwt_configure>

    /* Loop forever sending frames periodically. */
    while(1)
    {
        /* Write frame data to DW1000 and prepare transmission. See NOTE 4 below.*/
        dwt_writetxdata(sizeof(tx_msg), tx_msg, 0); /* Zero offset in TX buffer. */
 8002922:	f104 050c 	add.w	r5, r4, #12
 8002926:	2200      	movs	r2, #0
 8002928:	4629      	mov	r1, r5
 800292a:	200c      	movs	r0, #12
 800292c:	f7ff fab2 	bl	8001e94 <dwt_writetxdata>
        dwt_writetxfctrl(sizeof(tx_msg), 0, 0); /* Zero offset in TX buffer, no ranging. */
 8002930:	2200      	movs	r2, #0
 8002932:	200c      	movs	r0, #12
 8002934:	4611      	mov	r1, r2
 8002936:	f7ff fabd 	bl	8001eb4 <dwt_writetxfctrl>

        /* Start transmission. */
        dwt_starttx(DWT_START_TX_IMMEDIATE);
 800293a:	2000      	movs	r0, #0
 800293c:	f7ff fe1a 	bl	8002574 <dwt_starttx>

        /* Poll DW1000 until TX frame sent event set. See NOTE 5 below.
         * STATUS register is 5 bytes long but, as the event we are looking at is in the first byte of the register, we can use this simplest API
         * function to access it.*/
        while (!(dwt_read32bitreg(SYS_STATUS_ID) & SYS_STATUS_TXFRS))
 8002940:	2100      	movs	r1, #0
 8002942:	200f      	movs	r0, #15
 8002944:	f7ff fb18 	bl	8001f78 <dwt_read32bitoffsetreg>
 8002948:	0603      	lsls	r3, r0, #24
 800294a:	d5f9      	bpl.n	8002940 <dw_main+0x44>
        { };

        /* Clear TX frame sent event. */
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_TXFRS);
 800294c:	2280      	movs	r2, #128	; 0x80
 800294e:	2100      	movs	r1, #0
 8002950:	200f      	movs	r0, #15
 8002952:	f7ff fb27 	bl	8001fa4 <dwt_write32bitoffsetreg>

        /* Execute a delay between transmissions. */
        Sleep(TX_DELAY_MS);
 8002956:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800295a:	f000 fc85 	bl	8003268 <Sleep>

        /* Increment the blink frame sequence number (modulo 256). */
        tx_msg[BLINK_FRAME_SN_IDX]++;
 800295e:	7b63      	ldrb	r3, [r4, #13]
 8002960:	3301      	adds	r3, #1
 8002962:	7363      	strb	r3, [r4, #13]
        dwt_writetxdata(sizeof(tx_msg), tx_msg, 0); /* Zero offset in TX buffer. */
 8002964:	e7df      	b.n	8002926 <dw_main+0x2a>
        stdio_write("INIT FAILED");
 8002966:	4804      	ldr	r0, [pc, #16]	; (8002978 <dw_main+0x7c>)
 8002968:	f000 fd76 	bl	8003458 <stdio_write>
 800296c:	e7fe      	b.n	800296c <dw_main+0x70>
 800296e:	bf00      	nop
 8002970:	0800370c 	.word	0x0800370c
 8002974:	2000000c 	.word	0x2000000c
 8002978:	0800371c 	.word	0x0800371c

0800297c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800297c:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800297e:	2400      	movs	r4, #0
{
 8002980:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002982:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 8002986:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800298a:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800298e:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002992:	4a1e      	ldr	r2, [pc, #120]	; (8002a0c <SystemClock_Config+0x90>)
 8002994:	9401      	str	r4, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002996:	9403      	str	r4, [sp, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002998:	6c11      	ldr	r1, [r2, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800299a:	4b1d      	ldr	r3, [pc, #116]	; (8002a10 <SystemClock_Config+0x94>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800299c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80029a0:	6411      	str	r1, [r2, #64]	; 0x40
 80029a2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80029a4:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80029a8:	9201      	str	r2, [sp, #4]
 80029aa:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029ac:	9402      	str	r4, [sp, #8]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80029bc:	9302      	str	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80029be:	2101      	movs	r1, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80029c0:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80029c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029c8:	2502      	movs	r5, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029ca:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80029cc:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80029ce:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = 8;
 80029d0:	2108      	movs	r1, #8
  RCC_OscInitStruct.PLL.PLLN = 288;
 80029d2:	f44f 7290 	mov.w	r2, #288	; 0x120
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80029d6:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 6;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029d8:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80029da:	2306      	movs	r3, #6
  RCC_OscInitStruct.PLL.PLLM = 8;
 80029dc:	9110      	str	r1, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 288;
 80029de:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80029e0:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029e2:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80029e4:	9512      	str	r5, [sp, #72]	; 0x48
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029e6:	260f      	movs	r6, #15
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029e8:	f7fd ff96 	bl	8000918 <HAL_RCC_OscConfig>
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80029ec:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80029f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80029f4:	a803      	add	r0, sp, #12
 80029f6:	2104      	movs	r1, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029f8:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029fa:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029fc:	9603      	str	r6, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80029fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002a02:	f7fe f979 	bl	8000cf8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8002a06:	b014      	add	sp, #80	; 0x50
 8002a08:	bd70      	pop	{r4, r5, r6, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	40007000 	.word	0x40007000

08002a14 <main>:
{
 8002a14:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a18:	2400      	movs	r4, #0
{
 8002a1a:	b09f      	sub	sp, #124	; 0x7c
  HAL_Init();
 8002a1c:	f7fd fd6e 	bl	80004fc <HAL_Init>
  SystemClock_Config();
 8002a20:	f7ff ffac 	bl	800297c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a24:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 8002a28:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a2c:	4bbf      	ldr	r3, [pc, #764]	; (8002d2c <main+0x318>)
 8002a2e:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a30:	941a      	str	r4, [sp, #104]	; 0x68
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002a34:	48be      	ldr	r0, [pc, #760]	; (8002d30 <main+0x31c>)
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a36:	f8df b32c 	ldr.w	fp, [pc, #812]	; 8002d64 <main+0x350>
  huart3.Instance = USART3;
 8002a3a:	4dbe      	ldr	r5, [pc, #760]	; (8002d34 <main+0x320>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a3c:	f042 0204 	orr.w	r2, r2, #4
 8002a40:	631a      	str	r2, [r3, #48]	; 0x30
 8002a42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a44:	f002 0204 	and.w	r2, r2, #4
 8002a48:	9200      	str	r2, [sp, #0]
 8002a4a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a4c:	9401      	str	r4, [sp, #4]
 8002a4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a54:	631a      	str	r2, [r3, #48]	; 0x30
 8002a56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a58:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002a5c:	9201      	str	r2, [sp, #4]
 8002a5e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a60:	9402      	str	r4, [sp, #8]
 8002a62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a64:	f042 0201 	orr.w	r2, r2, #1
 8002a68:	631a      	str	r2, [r3, #48]	; 0x30
 8002a6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a6c:	f002 0201 	and.w	r2, r2, #1
 8002a70:	9202      	str	r2, [sp, #8]
 8002a72:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a74:	9403      	str	r4, [sp, #12]
 8002a76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a78:	f042 0202 	orr.w	r2, r2, #2
 8002a7c:	631a      	str	r2, [r3, #48]	; 0x30
 8002a7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a80:	f002 0202 	and.w	r2, r2, #2
 8002a84:	9203      	str	r2, [sp, #12]
 8002a86:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a88:	9404      	str	r4, [sp, #16]
 8002a8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a8c:	f042 0220 	orr.w	r2, r2, #32
 8002a90:	631a      	str	r2, [r3, #48]	; 0x30
 8002a92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a94:	f002 0220 	and.w	r2, r2, #32
 8002a98:	9204      	str	r2, [sp, #16]
 8002a9a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a9c:	9405      	str	r4, [sp, #20]
 8002a9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002aa0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002aa4:	631a      	str	r2, [r3, #48]	; 0x30
 8002aa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002aa8:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8002aac:	9205      	str	r2, [sp, #20]
 8002aae:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ab0:	9406      	str	r4, [sp, #24]
 8002ab2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ab4:	f042 0210 	orr.w	r2, r2, #16
 8002ab8:	631a      	str	r2, [r3, #48]	; 0x30
 8002aba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002abc:	f002 0210 	and.w	r2, r2, #16
 8002ac0:	9206      	str	r2, [sp, #24]
 8002ac2:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ac4:	9407      	str	r4, [sp, #28]
 8002ac6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ac8:	f042 0208 	orr.w	r2, r2, #8
 8002acc:	631a      	str	r2, [r3, #48]	; 0x30
 8002ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad0:	f003 0308 	and.w	r3, r3, #8
 8002ad4:	9307      	str	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002ad6:	4622      	mov	r2, r4
 8002ad8:	f244 0181 	movw	r1, #16513	; 0x4081
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002adc:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002ade:	f7fd ff0b 	bl	80008f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_RESET);
 8002ae2:	4622      	mov	r2, r4
 8002ae4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ae8:	4893      	ldr	r0, [pc, #588]	; (8002d38 <main+0x324>)
 8002aea:	f7fd ff05 	bl	80008f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET);
 8002aee:	2201      	movs	r2, #1
 8002af0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002af4:	4891      	ldr	r0, [pc, #580]	; (8002d3c <main+0x328>)
 8002af6:	f7fd feff 	bl	80008f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002afa:	4622      	mov	r2, r4
 8002afc:	2140      	movs	r1, #64	; 0x40
 8002afe:	4890      	ldr	r0, [pc, #576]	; (8002d40 <main+0x32c>)
 8002b00:	f7fd fefa 	bl	80008f8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002b04:	f44f 5800 	mov.w	r8, #8192	; 0x2000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002b08:	a916      	add	r1, sp, #88	; 0x58
 8002b0a:	488e      	ldr	r0, [pc, #568]	; (8002d44 <main+0x330>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0c:	9418      	str	r4, [sp, #96]	; 0x60

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0e:	2602      	movs	r6, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b10:	2703      	movs	r7, #3
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002b12:	f04f 090b 	mov.w	r9, #11
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b16:	e9cd 8b16 	strd	r8, fp, [sp, #88]	; 0x58
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002b1a:	f7fd fda9 	bl	8000670 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002b1e:	2332      	movs	r3, #50	; 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b20:	a916      	add	r1, sp, #88	; 0x58
 8002b22:	4888      	ldr	r0, [pc, #544]	; (8002d44 <main+0x330>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b24:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b26:	e9cd 3616 	strd	r3, r6, [sp, #88]	; 0x58
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002b2a:	e9cd 7919 	strd	r7, r9, [sp, #100]	; 0x64
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b2e:	f7fd fd9f 	bl	8000670 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8002b32:	2306      	movs	r3, #6
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b34:	a916      	add	r1, sp, #88	; 0x58
 8002b36:	4884      	ldr	r0, [pc, #528]	; (8002d48 <main+0x334>)
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8002b38:	9316      	str	r3, [sp, #88]	; 0x58

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b3a:	f04f 0a01 	mov.w	sl, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3e:	e9cd 6417 	strd	r6, r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002b42:	e9cd 7919 	strd	r7, r9, [sp, #100]	; 0x64
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b46:	f7fd fd93 	bl	8000670 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002b4a:	f244 0381 	movw	r3, #16513	; 0x4081
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b4e:	a916      	add	r1, sp, #88	; 0x58
 8002b50:	4877      	ldr	r0, [pc, #476]	; (8002d30 <main+0x31c>)
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002b52:	9316      	str	r3, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b54:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b58:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b5c:	f7fd fd88 	bl	8000670 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_IRQn_Pin */
  GPIO_InitStruct.Pin = DW_IRQn_Pin;
 8002b60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(DW_IRQn_GPIO_Port, &GPIO_InitStruct);
 8002b64:	a916      	add	r1, sp, #88	; 0x58
 8002b66:	4874      	ldr	r0, [pc, #464]	; (8002d38 <main+0x324>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b68:	f8cd b05c 	str.w	fp, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b6c:	9618      	str	r6, [sp, #96]	; 0x60
  GPIO_InitStruct.Pin = DW_IRQn_Pin;
 8002b6e:	9316      	str	r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(DW_IRQn_GPIO_Port, &GPIO_InitStruct);
 8002b70:	f7fd fd7e 	bl	8000670 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_RESET_Pin */
  GPIO_InitStruct.Pin = DW_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002b74:	2311      	movs	r3, #17
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8002b76:	a916      	add	r1, sp, #88	; 0x58
 8002b78:	486f      	ldr	r0, [pc, #444]	; (8002d38 <main+0x324>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002b7a:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pin = DW_RESET_Pin;
 8002b7c:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b80:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8002b84:	f7fd fd74 	bl	8000670 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO2_Pin GPIO4_Pin */
  GPIO_InitStruct.Pin = GPIO2_Pin|GPIO4_Pin;
 8002b88:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b8c:	a916      	add	r1, sp, #88	; 0x58
 8002b8e:	486a      	ldr	r0, [pc, #424]	; (8002d38 <main+0x324>)
  GPIO_InitStruct.Pin = GPIO2_Pin|GPIO4_Pin;
 8002b90:	9316      	str	r3, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b92:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b96:	f7fd fd6b 	bl	8000670 <HAL_GPIO_Init>

  /*Configure GPIO pins : M_PIN16_Pin M_PIN17_Pin USB_OverCurrent_Pin GPIO6_Pin 
                           GPIO5_Pin */
  GPIO_InitStruct.Pin = M_PIN16_Pin|M_PIN17_Pin|USB_OverCurrent_Pin|GPIO6_Pin 
 8002b9a:	f244 2383 	movw	r3, #17027	; 0x4283
                          |GPIO5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b9e:	a916      	add	r1, sp, #88	; 0x58
 8002ba0:	4867      	ldr	r0, [pc, #412]	; (8002d40 <main+0x32c>)
  GPIO_InitStruct.Pin = M_PIN16_Pin|M_PIN17_Pin|USB_OverCurrent_Pin|GPIO6_Pin 
 8002ba2:	9316      	str	r3, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba4:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ba8:	f7fd fd62 	bl	8000670 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO0_Pin GPIO1_Pin GPIO3_Pin */
  GPIO_InitStruct.Pin = GPIO0_Pin|GPIO1_Pin|GPIO3_Pin;
 8002bac:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bb0:	a916      	add	r1, sp, #88	; 0x58
 8002bb2:	4866      	ldr	r0, [pc, #408]	; (8002d4c <main+0x338>)
  GPIO_InitStruct.Pin = GPIO0_Pin|GPIO1_Pin|GPIO3_Pin;
 8002bb4:	9316      	str	r3, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb6:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bba:	f7fd fd59 	bl	8000670 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002bbe:	a916      	add	r1, sp, #88	; 0x58
 8002bc0:	485b      	ldr	r0, [pc, #364]	; (8002d30 <main+0x31c>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002bc2:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc6:	e9cd 8616 	strd	r8, r6, [sp, #88]	; 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bca:	e9cd 4718 	strd	r4, r7, [sp, #96]	; 0x60
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002bce:	f7fd fd4f 	bl	8000670 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_NSS_Pin */
  GPIO_InitStruct.Pin = DW_NSS_Pin;
 8002bd2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(DW_NSS_GPIO_Port, &GPIO_InitStruct);
 8002bd6:	a916      	add	r1, sp, #88	; 0x58
 8002bd8:	4858      	ldr	r0, [pc, #352]	; (8002d3c <main+0x328>)
  GPIO_InitStruct.Pin = DW_NSS_Pin;
 8002bda:	9316      	str	r3, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bdc:	e9cd a417 	strd	sl, r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be0:	9419      	str	r4, [sp, #100]	; 0x64
  HAL_GPIO_Init(DW_NSS_GPIO_Port, &GPIO_InitStruct);
 8002be2:	f7fd fd45 	bl	8000670 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002be6:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002be8:	a916      	add	r1, sp, #88	; 0x58
 8002bea:	4855      	ldr	r0, [pc, #340]	; (8002d40 <main+0x32c>)
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002bec:	9316      	str	r3, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bee:	e9cd a417 	strd	sl, r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf2:	9419      	str	r4, [sp, #100]	; 0x64
  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002bf4:	f04f 0a0a 	mov.w	sl, #10
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002bf8:	f7fd fd3a 	bl	8000670 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002bfc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c00:	a916      	add	r1, sp, #88	; 0x58
 8002c02:	4851      	ldr	r0, [pc, #324]	; (8002d48 <main+0x334>)
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002c04:	9316      	str	r3, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c06:	e9cd 6417 	strd	r6, r4, [sp, #92]	; 0x5c

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002c0a:	f44f 7b00 	mov.w	fp, #512	; 0x200
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c0e:	9719      	str	r7, [sp, #100]	; 0x64
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002c10:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c14:	f7fd fd2c 	bl	8000670 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002c18:	a916      	add	r1, sp, #88	; 0x58
 8002c1a:	484b      	ldr	r0, [pc, #300]	; (8002d48 <main+0x334>)
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002c1c:	f8cd b058 	str.w	fp, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c20:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002c24:	f7fd fd24 	bl	8000670 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002c28:	f44f 5320 	mov.w	r3, #10240	; 0x2800
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c2c:	a916      	add	r1, sp, #88	; 0x58
 8002c2e:	4844      	ldr	r0, [pc, #272]	; (8002d40 <main+0x32c>)
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002c30:	9316      	str	r3, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c32:	e9cd 6417 	strd	r6, r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002c36:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c3a:	9719      	str	r7, [sp, #100]	; 0x64
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c3c:	f7fd fd18 	bl	8000670 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002c40:	4622      	mov	r2, r4
 8002c42:	4621      	mov	r1, r4
 8002c44:	2028      	movs	r0, #40	; 0x28
 8002c46:	f7fd fca9 	bl	800059c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002c4a:	2028      	movs	r0, #40	; 0x28
 8002c4c:	f7fd fcdc 	bl	8000608 <HAL_NVIC_EnableIRQ>
  hspi1.Instance = SPI1;
 8002c50:	4b3f      	ldr	r3, [pc, #252]	; (8002d50 <main+0x33c>)
 8002c52:	4e40      	ldr	r6, [pc, #256]	; (8002d54 <main+0x340>)
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c54:	f8c3 b018 	str.w	fp, [r3, #24]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c58:	f44f 7182 	mov.w	r1, #260	; 0x104
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002c5c:	2210      	movs	r2, #16
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c5e:	4618      	mov	r0, r3
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c60:	e9c3 6100 	strd	r6, r1, [r3]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002c64:	61da      	str	r2, [r3, #28]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c66:	e9c3 4402 	strd	r4, r4, [r3, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c6a:	e9c3 4404 	strd	r4, r4, [r3, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c6e:	e9c3 4408 	strd	r4, r4, [r3, #32]
  hspi1.Init.CRCPolynomial = 10;
 8002c72:	e9c3 4a0a 	strd	r4, sl, [r3, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c76:	f7fe f98f 	bl	8000f98 <HAL_SPI_Init>
  huart3.Instance = USART3;
 8002c7a:	4937      	ldr	r1, [pc, #220]	; (8002d58 <main+0x344>)
  htim8.Instance = TIM8;
 8002c7c:	4e37      	ldr	r6, [pc, #220]	; (8002d5c <main+0x348>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002c7e:	60ac      	str	r4, [r5, #8]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002c80:	230c      	movs	r3, #12
  huart3.Init.BaudRate = 115200;
 8002c82:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002c86:	4628      	mov	r0, r5
  huart3.Init.BaudRate = 115200;
 8002c88:	e9c5 1200 	strd	r1, r2, [r5]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002c8c:	616b      	str	r3, [r5, #20]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002c8e:	e9c5 4403 	strd	r4, r4, [r5, #12]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c92:	e9c5 4406 	strd	r4, r4, [r5, #24]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002c96:	f7fe ff3d 	bl	8001b14 <HAL_UART_Init>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002c9a:	4621      	mov	r1, r4
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	a816      	add	r0, sp, #88	; 0x58
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002ca0:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ca2:	9408      	str	r4, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ca4:	940f      	str	r4, [sp, #60]	; 0x3c
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002ca6:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8002caa:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cae:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cb0:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
 8002cb4:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
 8002cb8:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002cbc:	f000 fc30 	bl	8003520 <memset>
  htim8.Init.Period = 65535;
 8002cc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
  htim8.Instance = TIM8;
 8002cc4:	4926      	ldr	r1, [pc, #152]	; (8002d60 <main+0x34c>)
 8002cc6:	6031      	str	r1, [r6, #0]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8002cc8:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002ccc:	4630      	mov	r0, r6
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8002cce:	e9c6 2303 	strd	r2, r3, [r6, #12]
  htim8.Init.Prescaler = 0;
 8002cd2:	6074      	str	r4, [r6, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cd4:	60b4      	str	r4, [r6, #8]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cd6:	e9c6 4405 	strd	r4, r4, [r6, #20]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002cda:	f7fe fca9 	bl	8001630 <HAL_TIM_Base_Init>
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8002cde:	4630      	mov	r0, r6
 8002ce0:	f7fe fcc2 	bl	8001668 <HAL_TIM_OC_Init>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8002ce4:	2306      	movs	r3, #6
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8002ce6:	a90a      	add	r1, sp, #40	; 0x28
 8002ce8:	4630      	mov	r0, r6
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002cea:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8002cee:	f7fe fb55 	bl	800139c <HAL_TIM_SlaveConfigSynchro>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002cf2:	a908      	add	r1, sp, #32
 8002cf4:	4630      	mov	r0, r6
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cf6:	e9cd 4408 	strd	r4, r4, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002cfa:	f7fe fd33 	bl	8001764 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cfe:	4622      	mov	r2, r4
 8002d00:	a90f      	add	r1, sp, #60	; 0x3c
 8002d02:	4630      	mov	r0, r6
  sConfigOC.Pulse = 0;
 8002d04:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002d08:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002d0c:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002d10:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d12:	f7fe fcf7 	bl	8001704 <HAL_TIM_OC_ConfigChannel>
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002d16:	a916      	add	r1, sp, #88	; 0x58
 8002d18:	4630      	mov	r0, r6
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d1a:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.DeadTime = 0;
 8002d1e:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d22:	e9cd 481a 	strd	r4, r8, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002d26:	941d      	str	r4, [sp, #116]	; 0x74
 8002d28:	e01e      	b.n	8002d68 <main+0x354>
 8002d2a:	bf00      	nop
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	40020400 	.word	0x40020400
 8002d34:	200004f8 	.word	0x200004f8
 8002d38:	40021400 	.word	0x40021400
 8002d3c:	40020c00 	.word	0x40020c00
 8002d40:	40021800 	.word	0x40021800
 8002d44:	40020800 	.word	0x40020800
 8002d48:	40020000 	.word	0x40020000
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	20000538 	.word	0x20000538
 8002d54:	40013000 	.word	0x40013000
 8002d58:	40004800 	.word	0x40004800
 8002d5c:	200004b8 	.word	0x200004b8
 8002d60:	40010400 	.word	0x40010400
 8002d64:	10110000 	.word	0x10110000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002d68:	f7fe fd1e 	bl	80017a8 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim8);
 8002d6c:	4630      	mov	r0, r6
 8002d6e:	f000 f89b 	bl	8002ea8 <HAL_TIM_MspPostInit>
  setup_DW1000RSTnIRQ(0);
 8002d72:	4620      	mov	r0, r4
 8002d74:	f000 fac6 	bl	8003304 <setup_DW1000RSTnIRQ>
  stdio_init(&huart3);
 8002d78:	4628      	mov	r0, r5
 8002d7a:	f000 fb67 	bl	800344c <stdio_init>
  dw_main();
 8002d7e:	f7ff fdbd 	bl	80028fc <dw_main>
 8002d82:	e7fe      	b.n	8002d82 <main+0x36e>

08002d84 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002d84:	6802      	ldr	r2, [r0, #0]
 8002d86:	4b03      	ldr	r3, [pc, #12]	; (8002d94 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d000      	beq.n	8002d8e <HAL_TIM_PeriodElapsedCallback+0xa>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002d8c:	4770      	bx	lr
    HAL_IncTick();
 8002d8e:	f7fd bbcf 	b.w	8000530 <HAL_IncTick>
 8002d92:	bf00      	nop
 8002d94:	40001000 	.word	0x40001000

08002d98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d98:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d9a:	4b0c      	ldr	r3, [pc, #48]	; (8002dcc <HAL_MspInit+0x34>)
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	9100      	str	r1, [sp, #0]
 8002da0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002da2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002da6:	645a      	str	r2, [r3, #68]	; 0x44
 8002da8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002daa:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002dae:	9200      	str	r2, [sp, #0]
 8002db0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002db2:	9101      	str	r1, [sp, #4]
 8002db4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002db6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002dba:	641a      	str	r2, [r3, #64]	; 0x40
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc2:	9301      	str	r3, [sp, #4]
 8002dc4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dc6:	b002      	add	sp, #8
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	40023800 	.word	0x40023800

08002dd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI1)
 8002dd2:	6802      	ldr	r2, [r0, #0]
 8002dd4:	4b21      	ldr	r3, [pc, #132]	; (8002e5c <HAL_SPI_MspInit+0x8c>)
{
 8002dd6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd8:	2400      	movs	r4, #0
  if(hspi->Instance==SPI1)
 8002dda:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ddc:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002de0:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8002de4:	9407      	str	r4, [sp, #28]
  if(hspi->Instance==SPI1)
 8002de6:	d001      	beq.n	8002dec <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002de8:	b009      	add	sp, #36	; 0x24
 8002dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002dec:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8002df0:	9400      	str	r4, [sp, #0]
 8002df2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002df4:	481a      	ldr	r0, [pc, #104]	; (8002e60 <HAL_SPI_MspInit+0x90>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002df6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002dfa:	645a      	str	r2, [r3, #68]	; 0x44
 8002dfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dfe:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002e02:	9200      	str	r2, [sp, #0]
 8002e04:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e06:	9401      	str	r4, [sp, #4]
 8002e08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e0a:	f042 0201 	orr.w	r2, r2, #1
 8002e0e:	631a      	str	r2, [r3, #48]	; 0x30
 8002e10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e12:	f002 0201 	and.w	r2, r2, #1
 8002e16:	9201      	str	r2, [sp, #4]
 8002e18:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e1a:	9402      	str	r4, [sp, #8]
 8002e1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e1e:	f042 0202 	orr.w	r2, r2, #2
 8002e22:	631a      	str	r2, [r3, #48]	; 0x30
 8002e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e2c:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002e2e:	2360      	movs	r3, #96	; 0x60
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e30:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e32:	2505      	movs	r5, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e34:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e36:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e38:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e3c:	e9cd 6506 	strd	r6, r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e40:	f7fd fc16 	bl	8000670 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002e44:	2320      	movs	r3, #32
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e46:	a903      	add	r1, sp, #12
 8002e48:	4806      	ldr	r0, [pc, #24]	; (8002e64 <HAL_SPI_MspInit+0x94>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e4a:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e4c:	e9cd 6506 	strd	r6, r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e50:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002e52:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e54:	f7fd fc0c 	bl	8000670 <HAL_GPIO_Init>
}
 8002e58:	b009      	add	sp, #36	; 0x24
 8002e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e5c:	40013000 	.word	0x40013000
 8002e60:	40020000 	.word	0x40020000
 8002e64:	40020400 	.word	0x40020400

08002e68 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM8)
 8002e68:	6802      	ldr	r2, [r0, #0]
 8002e6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ea4 <HAL_TIM_Base_MspInit+0x3c>)
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d000      	beq.n	8002e72 <HAL_TIM_Base_MspInit+0xa>
 8002e70:	4770      	bx	lr
{
 8002e72:	b500      	push	{lr}
 8002e74:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002e76:	2200      	movs	r2, #0
 8002e78:	f503 339a 	add.w	r3, r3, #78848	; 0x13400
 8002e7c:	9201      	str	r2, [sp, #4]
 8002e7e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002e80:	f041 0102 	orr.w	r1, r1, #2
 8002e84:	6459      	str	r1, [r3, #68]	; 0x44
 8002e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	9301      	str	r3, [sp, #4]
    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8002e8e:	4611      	mov	r1, r2
 8002e90:	202e      	movs	r0, #46	; 0x2e
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002e92:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8002e94:	f7fd fb82 	bl	800059c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8002e98:	202e      	movs	r0, #46	; 0x2e
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002e9a:	b003      	add	sp, #12
 8002e9c:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8002ea0:	f7fd bbb2 	b.w	8000608 <HAL_NVIC_EnableIRQ>
 8002ea4:	40010400 	.word	0x40010400

08002ea8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ea8:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM8)
 8002eaa:	6801      	ldr	r1, [r0, #0]
 8002eac:	4a11      	ldr	r2, [pc, #68]	; (8002ef4 <HAL_TIM_MspPostInit+0x4c>)
{
 8002eae:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb0:	2300      	movs	r3, #0
  if(htim->Instance==TIM8)
 8002eb2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb4:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8002eb8:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8002ebc:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM8)
 8002ebe:	d001      	beq.n	8002ec4 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002ec0:	b007      	add	sp, #28
 8002ec2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ec4:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ecc:	480a      	ldr	r0, [pc, #40]	; (8002ef8 <HAL_TIM_MspPostInit+0x50>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ece:	f043 0304 	orr.w	r3, r3, #4
 8002ed2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ed4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002ed6:	f003 0304 	and.w	r3, r3, #4
 8002eda:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002edc:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002ede:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ee0:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002ee2:	2440      	movs	r4, #64	; 0x40
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ee4:	9d00      	ldr	r5, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002ee6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee8:	e9cd 4201 	strd	r4, r2, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eec:	f7fd fbc0 	bl	8000670 <HAL_GPIO_Init>
}
 8002ef0:	b007      	add	sp, #28
 8002ef2:	bd30      	pop	{r4, r5, pc}
 8002ef4:	40010400 	.word	0x40010400
 8002ef8:	40020800 	.word	0x40020800

08002efc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002efc:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART3)
 8002efe:	6802      	ldr	r2, [r0, #0]
 8002f00:	4b1d      	ldr	r3, [pc, #116]	; (8002f78 <HAL_UART_MspInit+0x7c>)
{
 8002f02:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f04:	2400      	movs	r4, #0
  if(huart->Instance==USART3)
 8002f06:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f08:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002f0c:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8002f10:	9407      	str	r4, [sp, #28]
  if(huart->Instance==USART3)
 8002f12:	d001      	beq.n	8002f18 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002f14:	b008      	add	sp, #32
 8002f16:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f18:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8002f1c:	9401      	str	r4, [sp, #4]
 8002f1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f20:	4816      	ldr	r0, [pc, #88]	; (8002f7c <HAL_UART_MspInit+0x80>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f22:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002f26:	641a      	str	r2, [r3, #64]	; 0x40
 8002f28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f2a:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8002f2e:	9201      	str	r2, [sp, #4]
 8002f30:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f32:	9402      	str	r4, [sp, #8]
 8002f34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f36:	f042 0208 	orr.w	r2, r2, #8
 8002f3a:	631a      	str	r2, [r3, #48]	; 0x30
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002f44:	f44f 7240 	mov.w	r2, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f48:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f4a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002f4c:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f4e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f50:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f52:	2307      	movs	r3, #7
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f54:	2501      	movs	r5, #1
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f56:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f58:	e9cd 5205 	strd	r5, r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f5c:	9e02      	ldr	r6, [sp, #8]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f5e:	f7fd fb87 	bl	8000670 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002f62:	4622      	mov	r2, r4
 8002f64:	4621      	mov	r1, r4
 8002f66:	2027      	movs	r0, #39	; 0x27
 8002f68:	f7fd fb18 	bl	800059c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002f6c:	2027      	movs	r0, #39	; 0x27
 8002f6e:	f7fd fb4b 	bl	8000608 <HAL_NVIC_EnableIRQ>
}
 8002f72:	b008      	add	sp, #32
 8002f74:	bd70      	pop	{r4, r5, r6, pc}
 8002f76:	bf00      	nop
 8002f78:	40004800 	.word	0x40004800
 8002f7c:	40020c00 	.word	0x40020c00

08002f80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f80:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8002f82:	4601      	mov	r1, r0
{
 8002f84:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8002f86:	2200      	movs	r2, #0
 8002f88:	2036      	movs	r0, #54	; 0x36
 8002f8a:	f7fd fb07 	bl	800059c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8002f8e:	2036      	movs	r0, #54	; 0x36
 8002f90:	f7fd fb3a 	bl	8000608 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002f94:	2500      	movs	r5, #0
 8002f96:	4b16      	ldr	r3, [pc, #88]	; (8002ff0 <HAL_InitTick+0x70>)
 8002f98:	9502      	str	r5, [sp, #8]
 8002f9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002f9c:	4c15      	ldr	r4, [pc, #84]	; (8002ff4 <HAL_InitTick+0x74>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002f9e:	f042 0210 	orr.w	r2, r2, #16
 8002fa2:	641a      	str	r2, [r3, #64]	; 0x40
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa6:	f003 0310 	and.w	r3, r3, #16
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002faa:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002fac:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002fae:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002fb0:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002fb2:	f7fd ff5b 	bl	8000e6c <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002fb6:	f7fd ff39 	bl	8000e2c <HAL_RCC_GetPCLK1Freq>
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002fba:	4a0f      	ldr	r2, [pc, #60]	; (8002ff8 <HAL_InitTick+0x78>)
  htim6.Instance = TIM6;
 8002fbc:	490f      	ldr	r1, [pc, #60]	; (8002ffc <HAL_InitTick+0x7c>)
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 8002fbe:	6125      	str	r5, [r4, #16]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002fc0:	0043      	lsls	r3, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc6:	0c9b      	lsrs	r3, r3, #18
 8002fc8:	3b01      	subs	r3, #1
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002fca:	f240 32e7 	movw	r2, #999	; 0x3e7
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002fce:	4620      	mov	r0, r4
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fd0:	e9c4 3501 	strd	r3, r5, [r4, #4]
  htim6.Instance = TIM6;
 8002fd4:	6021      	str	r1, [r4, #0]
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002fd6:	60e2      	str	r2, [r4, #12]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002fd8:	f7fe fb2a 	bl	8001630 <HAL_TIM_Base_Init>
 8002fdc:	b110      	cbz	r0, 8002fe4 <HAL_InitTick+0x64>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002fde:	2001      	movs	r0, #1
}
 8002fe0:	b009      	add	sp, #36	; 0x24
 8002fe2:	bd30      	pop	{r4, r5, pc}
    return HAL_TIM_Base_Start_IT(&htim6);
 8002fe4:	4620      	mov	r0, r4
 8002fe6:	f7fe f9c7 	bl	8001378 <HAL_TIM_Base_Start_IT>
}
 8002fea:	b009      	add	sp, #36	; 0x24
 8002fec:	bd30      	pop	{r4, r5, pc}
 8002fee:	bf00      	nop
 8002ff0:	40023800 	.word	0x40023800
 8002ff4:	20000654 	.word	0x20000654
 8002ff8:	431bde83 	.word	0x431bde83
 8002ffc:	40001000 	.word	0x40001000

08003000 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop

08003004 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003004:	e7fe      	b.n	8003004 <HardFault_Handler>
 8003006:	bf00      	nop

08003008 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003008:	e7fe      	b.n	8003008 <MemManage_Handler>
 800300a:	bf00      	nop

0800300c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800300c:	e7fe      	b.n	800300c <BusFault_Handler>
 800300e:	bf00      	nop

08003010 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003010:	e7fe      	b.n	8003010 <UsageFault_Handler>
 8003012:	bf00      	nop

08003014 <SVC_Handler>:
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop

08003018 <DebugMon_Handler>:
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop

0800301c <PendSV_Handler>:
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop

08003020 <SysTick_Handler>:
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop

08003024 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003024:	4801      	ldr	r0, [pc, #4]	; (800302c <USART3_IRQHandler+0x8>)
 8003026:	f7fe be3d 	b.w	8001ca4 <HAL_UART_IRQHandler>
 800302a:	bf00      	nop
 800302c:	200004f8 	.word	0x200004f8

08003030 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003030:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003032:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003036:	f7fd fc63 	bl	8000900 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800303a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800303e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003042:	f7fd bc5d 	b.w	8000900 <HAL_GPIO_EXTI_IRQHandler>
 8003046:	bf00      	nop

08003048 <TIM8_CC_IRQHandler>:
void TIM8_CC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003048:	4801      	ldr	r0, [pc, #4]	; (8003050 <TIM8_CC_IRQHandler+0x8>)
 800304a:	f7fe b9d5 	b.w	80013f8 <HAL_TIM_IRQHandler>
 800304e:	bf00      	nop
 8003050:	200004b8 	.word	0x200004b8

08003054 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003054:	4801      	ldr	r0, [pc, #4]	; (800305c <TIM6_DAC_IRQHandler+0x8>)
 8003056:	f7fe b9cf 	b.w	80013f8 <HAL_TIM_IRQHandler>
 800305a:	bf00      	nop
 800305c:	20000654 	.word	0x20000654

08003060 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003060:	4910      	ldr	r1, [pc, #64]	; (80030a4 <SystemInit+0x44>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003062:	4b11      	ldr	r3, [pc, #68]	; (80030a8 <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003064:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003068:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 800306c:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800306e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8003072:	681a      	ldr	r2, [r3, #0]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003074:	4c0d      	ldr	r4, [pc, #52]	; (80030ac <SystemInit+0x4c>)
  RCC->CFGR = 0x00000000;
 8003076:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8003078:	f042 0201 	orr.w	r2, r2, #1
 800307c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800307e:	6098      	str	r0, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003086:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800308a:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 800308c:	605c      	str	r4, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800308e:	681a      	ldr	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003090:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003094:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003098:	601a      	str	r2, [r3, #0]
  RCC->CIR = 0x00000000;
 800309a:	60d8      	str	r0, [r3, #12]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800309c:	608c      	str	r4, [r1, #8]
#endif
}
 800309e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80030a2:	4770      	bx	lr
 80030a4:	e000ed00 	.word	0xe000ed00
 80030a8:	40023800 	.word	0x40023800
 80030ac:	24003010 	.word	0x24003010

080030b0 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 80030b0:	b500      	push	{lr}
 80030b2:	b083      	sub	sp, #12
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 80030b4:	f000 f9b6 	bl	8003424 <port_GetEXT_IRQStatus>

	if(s) {
 80030b8:	b118      	cbz	r0, 80030c2 <decamutexon+0x12>
 80030ba:	9001      	str	r0, [sp, #4]
		port_DisableEXT_IRQ(); //disable the external interrupt line
 80030bc:	f000 f9a2 	bl	8003404 <port_DisableEXT_IRQ>
 80030c0:	9801      	ldr	r0, [sp, #4]
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
}
 80030c2:	b003      	add	sp, #12
 80030c4:	f85d fb04 	ldr.w	pc, [sp], #4

080030c8 <decamutexoff>:
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 80030c8:	b900      	cbnz	r0, 80030cc <decamutexoff+0x4>
		port_EnableEXT_IRQ();
	}
}
 80030ca:	4770      	bx	lr
		port_EnableEXT_IRQ();
 80030cc:	f000 b9a2 	b.w	8003414 <port_EnableEXT_IRQ>

080030d0 <deca_sleep>:
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
	Sleep(time_ms);
 80030d0:	f000 b8ca 	b.w	8003268 <Sleep>

080030d4 <writetospi>:
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer)
{
 80030d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030d8:	4682      	mov	sl, r0
 80030da:	4689      	mov	r9, r1
 80030dc:	4690      	mov	r8, r2
 80030de:	461f      	mov	r7, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 80030e0:	f7ff ffe6 	bl	80030b0 <decamutexon>

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80030e4:	4d14      	ldr	r5, [pc, #80]	; (8003138 <writetospi+0x64>)
    stat = decamutexon() ;
 80030e6:	4606      	mov	r6, r0
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80030e8:	4628      	mov	r0, r5
 80030ea:	f7fe f853 	bl	8001194 <HAL_SPI_GetState>
 80030ee:	2801      	cmp	r0, #1
 80030f0:	4604      	mov	r4, r0
 80030f2:	d1f9      	bne.n	80030e8 <writetospi+0x14>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 80030f4:	2200      	movs	r2, #0
 80030f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80030fa:	4810      	ldr	r0, [pc, #64]	; (800313c <writetospi+0x68>)
 80030fc:	f7fd fbfc 	bl	80008f8 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 8003100:	4652      	mov	r2, sl
 8003102:	4649      	mov	r1, r9
 8003104:	f04f 33ff 	mov.w	r3, #4294967295
 8003108:	480b      	ldr	r0, [pc, #44]	; (8003138 <writetospi+0x64>)
 800310a:	f7fd ff85 	bl	8001018 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 800310e:	f04f 33ff 	mov.w	r3, #4294967295
 8003112:	fa1f f288 	uxth.w	r2, r8
 8003116:	4639      	mov	r1, r7
 8003118:	4807      	ldr	r0, [pc, #28]	; (8003138 <writetospi+0x64>)
 800311a:	f7fd ff7d 	bl	8001018 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 800311e:	4622      	mov	r2, r4
 8003120:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003124:	4805      	ldr	r0, [pc, #20]	; (800313c <writetospi+0x68>)
 8003126:	f7fd fbe7 	bl	80008f8 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 800312a:	4630      	mov	r0, r6
 800312c:	f7ff ffcc 	bl	80030c8 <decamutexoff>

    return 0;
} // end writetospi()
 8003130:	2000      	movs	r0, #0
 8003132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003136:	bf00      	nop
 8003138:	20000538 	.word	0x20000538
 800313c:	40020c00 	.word	0x40020c00

08003140 <readfromspi>:
#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength,
                const uint8_t *headerBuffer,
                uint32_t readlength,
                uint8_t *readBuffer)
{
 8003140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003144:	4680      	mov	r8, r0
 8003146:	460c      	mov	r4, r1
 8003148:	4617      	mov	r7, r2
 800314a:	461d      	mov	r5, r3
    int i;
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 800314c:	f7ff ffb0 	bl	80030b0 <decamutexon>

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8003150:	f8df 9078 	ldr.w	r9, [pc, #120]	; 80031cc <readfromspi+0x8c>
    stat = decamutexon() ;
 8003154:	4606      	mov	r6, r0
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8003156:	4648      	mov	r0, r9
 8003158:	f7fe f81c 	bl	8001194 <HAL_SPI_GetState>
 800315c:	2801      	cmp	r0, #1
 800315e:	d1fa      	bne.n	8003156 <readfromspi+0x16>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8003160:	2200      	movs	r2, #0
 8003162:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003166:	4818      	ldr	r0, [pc, #96]	; (80031c8 <readfromspi+0x88>)
 8003168:	f7fd fbc6 	bl	80008f8 <HAL_GPIO_WritePin>

    /* Send header */
    for(i=0; i<headerLength; i++)
 800316c:	f1b8 0f00 	cmp.w	r8, #0
 8003170:	d00c      	beq.n	800318c <readfromspi+0x4c>
    {
        HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 8003172:	f8df 9058 	ldr.w	r9, [pc, #88]	; 80031cc <readfromspi+0x8c>
 8003176:	44a0      	add	r8, r4
 8003178:	2201      	movs	r2, #1
 800317a:	4621      	mov	r1, r4
 800317c:	f04f 33ff 	mov.w	r3, #4294967295
 8003180:	4414      	add	r4, r2
 8003182:	4648      	mov	r0, r9
 8003184:	f7fd ff48 	bl	8001018 <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 8003188:	4544      	cmp	r4, r8
 800318a:	d1f5      	bne.n	8003178 <readfromspi+0x38>
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while(readlength-- > 0)
 800318c:	b17f      	cbz	r7, 80031ae <readfromspi+0x6e>
 800318e:	4c0f      	ldr	r4, [pc, #60]	; (80031cc <readfromspi+0x8c>)
 8003190:	19e9      	adds	r1, r5, r7
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
        {
        }

        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 8003192:	2000      	movs	r0, #0
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
 8003194:	6823      	ldr	r3, [r4, #0]
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	0797      	lsls	r7, r2, #30
 800319a:	d5fc      	bpl.n	8003196 <readfromspi+0x56>
        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 800319c:	60d8      	str	r0, [r3, #12]
        e.g. when waking up DW1000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	07d2      	lsls	r2, r2, #31
 80031a2:	d5fc      	bpl.n	800319e <readfromspi+0x5e>
        {
        }

        (*readBuffer++) = hspi1.Instance->DR;  //copy data read form (MISO)
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	f805 3b01 	strb.w	r3, [r5], #1
    while(readlength-- > 0)
 80031aa:	428d      	cmp	r5, r1
 80031ac:	d1f2      	bne.n	8003194 <readfromspi+0x54>
    }

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 80031ae:	2201      	movs	r2, #1
 80031b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80031b4:	4804      	ldr	r0, [pc, #16]	; (80031c8 <readfromspi+0x88>)
 80031b6:	f7fd fb9f 	bl	80008f8 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 80031ba:	4630      	mov	r0, r6
 80031bc:	f7ff ff84 	bl	80030c8 <decamutexoff>

    return 0;
} // end readfromspi()
 80031c0:	2000      	movs	r0, #0
 80031c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031c6:	bf00      	nop
 80031c8:	40020c00 	.word	0x40020c00
 80031cc:	20000538 	.word	0x20000538

080031d0 <__NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80031d0:	2800      	cmp	r0, #0
 80031d2:	db07      	blt.n	80031e4 <__NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031d4:	f000 011f 	and.w	r1, r0, #31
 80031d8:	2301      	movs	r3, #1
 80031da:	0940      	lsrs	r0, r0, #5
 80031dc:	4a02      	ldr	r2, [pc, #8]	; (80031e8 <__NVIC_EnableIRQ+0x18>)
 80031de:	408b      	lsls	r3, r1
 80031e0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	e000e100 	.word	0xe000e100

080031ec <__NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80031ec:	2800      	cmp	r0, #0
 80031ee:	db0d      	blt.n	800320c <__NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031f0:	0943      	lsrs	r3, r0, #5
 80031f2:	3320      	adds	r3, #32
 80031f4:	2201      	movs	r2, #1
 80031f6:	4906      	ldr	r1, [pc, #24]	; (8003210 <__NVIC_DisableIRQ+0x24>)
 80031f8:	f000 001f 	and.w	r0, r0, #31
 80031fc:	fa02 f000 	lsl.w	r0, r2, r0
 8003200:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003204:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003208:	f3bf 8f6f 	isb	sy
}
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	e000e100 	.word	0xe000e100

08003214 <usleep>:
/* @fn    usleep
 * @brief precise usleep() delay
 * */
#pragma GCC optimize ("O0")
void usleep(useconds_t usec)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
    int i,j;
#pragma GCC ivdep
    for(i=0;i<usec;i++)
 800321c:	2300      	movs	r3, #0
 800321e:	60fb      	str	r3, [r7, #12]
 8003220:	e012      	b.n	8003248 <usleep+0x34>
    {
#pragma GCC ivdep
        for(j=0;j<2;j++)
 8003222:	2300      	movs	r3, #0
 8003224:	60bb      	str	r3, [r7, #8]
 8003226:	e004      	b.n	8003232 <usleep+0x1e>
        {
            __NOP();
 8003228:	bf00      	nop
            __NOP();
 800322a:	bf00      	nop
        for(j=0;j<2;j++)
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	3301      	adds	r3, #1
 8003230:	60bb      	str	r3, [r7, #8]
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	2b01      	cmp	r3, #1
 8003236:	bfd4      	ite	le
 8003238:	2301      	movle	r3, #1
 800323a:	2300      	movgt	r3, #0
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f2      	bne.n	8003228 <usleep+0x14>
    for(i=0;i<usec;i++)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	3301      	adds	r3, #1
 8003246:	60fb      	str	r3, [r7, #12]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	429a      	cmp	r2, r3
 800324e:	bf8c      	ite	hi
 8003250:	2301      	movhi	r3, #1
 8003252:	2300      	movls	r3, #0
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1e3      	bne.n	8003222 <usleep+0xe>
        }
    }
}
 800325a:	bf00      	nop
 800325c:	3714      	adds	r7, #20
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop

08003268 <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f7fd f96f 	bl	8000554 <HAL_Delay>
}
 8003276:	bf00      	nop
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop

08003280 <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 8003288:	4a0b      	ldr	r2, [pc, #44]	; (80032b8 <EXTI_GetITEnStatus+0x38>)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	095b      	lsrs	r3, r3, #5
 800328e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f003 031f 	and.w	r3, r3, #31
 8003298:	fa22 f303 	lsr.w	r3, r2, r3
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	bf14      	ite	ne
 80032a4:	2301      	movne	r3, #1
 80032a6:	2300      	moveq	r3, #0
 80032a8:	b2db      	uxtb	r3, r3
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	e000e100 	.word	0xe000e100

080032bc <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef    GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RESET_Pin;
 80032c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032c6:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80032c8:	2311      	movs	r3, #17
 80032ca:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032cc:	2300      	movs	r3, #0
 80032ce:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 80032d0:	1d3b      	adds	r3, r7, #4
 80032d2:	4619      	mov	r1, r3
 80032d4:	480a      	ldr	r0, [pc, #40]	; (8003300 <reset_DW1000+0x44>)
 80032d6:	f7fd f9cb 	bl	8000670 <HAL_GPIO_Init>

    //drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_RESET);
 80032da:	2200      	movs	r2, #0
 80032dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032e0:	4807      	ldr	r0, [pc, #28]	; (8003300 <reset_DW1000+0x44>)
 80032e2:	f7fd fb09 	bl	80008f8 <HAL_GPIO_WritePin>

    usleep(1);
 80032e6:	2001      	movs	r0, #1
 80032e8:	f7ff ff94 	bl	8003214 <usleep>

    //put the pin back to output open-drain (not active)
    setup_DW1000RSTnIRQ(0);
 80032ec:	2000      	movs	r0, #0
 80032ee:	f000 f809 	bl	8003304 <setup_DW1000RSTnIRQ>



    Sleep(2);
 80032f2:	2002      	movs	r0, #2
 80032f4:	f7ff ffb8 	bl	8003268 <Sleep>
}
 80032f8:	bf00      	nop
 80032fa:	3718      	adds	r7, #24
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40021400 	.word	0x40021400

08003304 <setup_DW1000RSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b088      	sub	sp, #32
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if(enable)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d015      	beq.n	800333e <setup_DW1000RSTnIRQ+0x3a>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 8003312:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003316:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003318:	4b17      	ldr	r3, [pc, #92]	; (8003378 <setup_DW1000RSTnIRQ+0x74>)
 800331a:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331c:	2300      	movs	r3, #0
 800331e:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8003320:	f107 030c 	add.w	r3, r7, #12
 8003324:	4619      	mov	r1, r3
 8003326:	4815      	ldr	r0, [pc, #84]	; (800337c <setup_DW1000RSTnIRQ+0x78>)
 8003328:	f7fd f9a2 	bl	8000670 <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI0_IRQn);     //pin #0 -> EXTI #0
 800332c:	2006      	movs	r0, #6
 800332e:	f7fd f96b 	bl	8000608 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8003332:	2200      	movs	r2, #0
 8003334:	2105      	movs	r1, #5
 8003336:	2006      	movs	r0, #6
 8003338:	f7fd f930 	bl	800059c <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
    }
}
 800333c:	e017      	b.n	800336e <setup_DW1000RSTnIRQ+0x6a>
        HAL_NVIC_DisableIRQ(EXTI0_IRQn);    //pin #0 -> EXTI #0
 800333e:	2006      	movs	r0, #6
 8003340:	f7fd f970 	bl	8000624 <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 8003344:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003348:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800334a:	2311      	movs	r3, #17
 800334c:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334e:	2300      	movs	r3, #0
 8003350:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003352:	2302      	movs	r3, #2
 8003354:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8003356:	f107 030c 	add.w	r3, r7, #12
 800335a:	4619      	mov	r1, r3
 800335c:	4807      	ldr	r0, [pc, #28]	; (800337c <setup_DW1000RSTnIRQ+0x78>)
 800335e:	f7fd f987 	bl	8000670 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
 8003362:	2201      	movs	r2, #1
 8003364:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003368:	4804      	ldr	r0, [pc, #16]	; (800337c <setup_DW1000RSTnIRQ+0x78>)
 800336a:	f7fd fac5 	bl	80008f8 <HAL_GPIO_WritePin>
}
 800336e:	bf00      	nop
 8003370:	3720      	adds	r7, #32
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	10110000 	.word	0x10110000
 800337c:	40021400 	.word	0x40021400

08003380 <port_set_dw1000_slowrate>:
/* @fn      port_set_dw1000_slowrate
 * @brief   set 2.25MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_slowrate(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003384:	4b03      	ldr	r3, [pc, #12]	; (8003394 <port_set_dw1000_slowrate+0x14>)
 8003386:	2220      	movs	r2, #32
 8003388:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 800338a:	4802      	ldr	r0, [pc, #8]	; (8003394 <port_set_dw1000_slowrate+0x14>)
 800338c:	f7fd fe04 	bl	8000f98 <HAL_SPI_Init>
}
 8003390:	bf00      	nop
 8003392:	bd80      	pop	{r7, pc}
 8003394:	20000538 	.word	0x20000538

08003398 <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800339c:	4b03      	ldr	r3, [pc, #12]	; (80033ac <port_set_dw1000_fastrate+0x14>)
 800339e:	2208      	movs	r2, #8
 80033a0:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 80033a2:	4802      	ldr	r0, [pc, #8]	; (80033ac <port_set_dw1000_fastrate+0x14>)
 80033a4:	f7fd fdf8 	bl	8000f98 <HAL_SPI_Init>
}
 80033a8:	bf00      	nop
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	20000538 	.word	0x20000538

080033b0 <HAL_GPIO_EXTI_Callback>:
/* @fn      HAL_GPIO_EXTI_Callback
 * @brief   IRQ HAL call-back for all EXTI configured lines
 *          i.e. DW_RESET_Pin and DW_IRQn_Pin
 * */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	4603      	mov	r3, r0
 80033b8:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == DW_RESET_Pin)
 80033ba:	88fb      	ldrh	r3, [r7, #6]
 80033bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033c0:	d103      	bne.n	80033ca <HAL_GPIO_EXTI_Callback+0x1a>
    {
        signalResetDone = 1;
 80033c2:	4b07      	ldr	r3, [pc, #28]	; (80033e0 <HAL_GPIO_EXTI_Callback+0x30>)
 80033c4:	2201      	movs	r2, #1
 80033c6:	601a      	str	r2, [r3, #0]
        process_deca_irq();
    }
    else
    {
    }
}
 80033c8:	e005      	b.n	80033d6 <HAL_GPIO_EXTI_Callback+0x26>
    else if (GPIO_Pin == DW_IRQn_Pin)
 80033ca:	88fb      	ldrh	r3, [r7, #6]
 80033cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033d0:	d101      	bne.n	80033d6 <HAL_GPIO_EXTI_Callback+0x26>
        process_deca_irq();
 80033d2:	f000 f807 	bl	80033e4 <process_deca_irq>
}
 80033d6:	bf00      	nop
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	200004ac 	.word	0x200004ac

080033e4 <process_deca_irq>:
 * @brief   main call-back for processing of DW1000 IRQ
 *          it re-enters the IRQ routing and processes all events.
 *          After processing of all events, DW1000 will clear the IRQ line.
 * */
__INLINE void process_deca_irq(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
    while(port_CheckEXT_IRQ() != 0)
 80033e8:	e002      	b.n	80033f0 <process_deca_irq+0xc>
    {

        port_deca_isr();
 80033ea:	4b05      	ldr	r3, [pc, #20]	; (8003400 <process_deca_irq+0x1c>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4798      	blx	r3
    while(port_CheckEXT_IRQ() != 0)
 80033f0:	f000 f820 	bl	8003434 <port_CheckEXT_IRQ>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1f7      	bne.n	80033ea <process_deca_irq+0x6>

    } //while DW1000 IRQ line active
}
 80033fa:	bf00      	nop
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	200004a8 	.word	0x200004a8

08003404 <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 8003408:	2017      	movs	r0, #23
 800340a:	f7ff feef 	bl	80031ec <__NVIC_DisableIRQ>
}
 800340e:	bf00      	nop
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop

08003414 <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 8003418:	2017      	movs	r0, #23
 800341a:	f7ff fed9 	bl	80031d0 <__NVIC_EnableIRQ>
}
 800341e:	bf00      	nop
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop

08003424 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 8003428:	2017      	movs	r0, #23
 800342a:	f7ff ff29 	bl	8003280 <EXTI_GetITEnStatus>
 800342e:	4603      	mov	r3, r0
}
 8003430:	4618      	mov	r0, r3
 8003432:	bd80      	pop	{r7, pc}

08003434 <port_CheckEXT_IRQ>:

/* @fn      port_CheckEXT_IRQ
 * @brief   wrapper to read DW_IRQ input pin state
 * */
__INLINE uint32_t port_CheckEXT_IRQ(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(DECAIRQ_GPIO, DW_IRQn_Pin);
 8003438:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800343c:	4802      	ldr	r0, [pc, #8]	; (8003448 <port_CheckEXT_IRQ+0x14>)
 800343e:	f7fd fa55 	bl	80008ec <HAL_GPIO_ReadPin>
 8003442:	4603      	mov	r3, r0
}
 8003444:	4618      	mov	r0, r3
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40021400 	.word	0x40021400

0800344c <stdio_init>:
 * @brief Initialize stdio on the given UART
 *
 * @param[in] huart Pointer to the STM32 HAL UART peripheral instance
 */
void stdio_init(UART_HandleTypeDef* huart) {
    uart = huart;
 800344c:	4b01      	ldr	r3, [pc, #4]	; (8003454 <stdio_init+0x8>)
 800344e:	6018      	str	r0, [r3, #0]
}
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	200004b0 	.word	0x200004b0

08003458 <stdio_write>:
 *
 * @param[in] data Pointer to null terminated string
 * @return Number of bytes transmitted or -1 if an error occurred
 */
inline int stdio_write(const char *data)
{
 8003458:	b538      	push	{r3, r4, r5, lr}
 800345a:	4605      	mov	r5, r0
    uint16_t len = strlen(data);
 800345c:	f7fc fec6 	bl	80001ec <strlen>
    if (HAL_UART_Transmit(uart, (uint8_t*) data, len, HAL_MAX_DELAY) == HAL_OK) {
 8003460:	4b07      	ldr	r3, [pc, #28]	; (8003480 <stdio_write+0x28>)
    uint16_t len = strlen(data);
 8003462:	4604      	mov	r4, r0
    if (HAL_UART_Transmit(uart, (uint8_t*) data, len, HAL_MAX_DELAY) == HAL_OK) {
 8003464:	b282      	uxth	r2, r0
 8003466:	4629      	mov	r1, r5
 8003468:	6818      	ldr	r0, [r3, #0]
 800346a:	f04f 33ff 	mov.w	r3, #4294967295
 800346e:	f7fe fb81 	bl	8001b74 <HAL_UART_Transmit>
 8003472:	b908      	cbnz	r0, 8003478 <stdio_write+0x20>
        return len;
 8003474:	b2a0      	uxth	r0, r4
    }
    return -1;
}
 8003476:	bd38      	pop	{r3, r4, r5, pc}
    return -1;
 8003478:	f04f 30ff 	mov.w	r0, #4294967295
}
 800347c:	bd38      	pop	{r3, r4, r5, pc}
 800347e:	bf00      	nop
 8003480:	200004b0 	.word	0x200004b0

08003484 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003484:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034bc <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003488:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800348a:	e003      	b.n	8003494 <LoopCopyDataInit>

0800348c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800348c:	4b0c      	ldr	r3, [pc, #48]	; (80034c0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800348e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003490:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003492:	3104      	adds	r1, #4

08003494 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003494:	480b      	ldr	r0, [pc, #44]	; (80034c4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003496:	4b0c      	ldr	r3, [pc, #48]	; (80034c8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003498:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800349a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800349c:	d3f6      	bcc.n	800348c <CopyDataInit>
  ldr  r2, =_sbss
 800349e:	4a0b      	ldr	r2, [pc, #44]	; (80034cc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80034a0:	e002      	b.n	80034a8 <LoopFillZerobss>

080034a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80034a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80034a4:	f842 3b04 	str.w	r3, [r2], #4

080034a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80034a8:	4b09      	ldr	r3, [pc, #36]	; (80034d0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80034aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80034ac:	d3f9      	bcc.n	80034a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80034ae:	f7ff fdd7 	bl	8003060 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034b2:	f000 f811 	bl	80034d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034b6:	f7ff faad 	bl	8002a14 <main>
  bx  lr    
 80034ba:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80034bc:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80034c0:	08003740 	.word	0x08003740
  ldr  r0, =_sdata
 80034c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80034c8:	20000454 	.word	0x20000454
  ldr  r2, =_sbss
 80034cc:	20000454 	.word	0x20000454
  ldr  r3, = _ebss
 80034d0:	200006a0 	.word	0x200006a0

080034d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034d4:	e7fe      	b.n	80034d4 <ADC_IRQHandler>
	...

080034d8 <__libc_init_array>:
 80034d8:	b570      	push	{r4, r5, r6, lr}
 80034da:	4e0d      	ldr	r6, [pc, #52]	; (8003510 <__libc_init_array+0x38>)
 80034dc:	4c0d      	ldr	r4, [pc, #52]	; (8003514 <__libc_init_array+0x3c>)
 80034de:	1ba4      	subs	r4, r4, r6
 80034e0:	10a4      	asrs	r4, r4, #2
 80034e2:	2500      	movs	r5, #0
 80034e4:	42a5      	cmp	r5, r4
 80034e6:	d109      	bne.n	80034fc <__libc_init_array+0x24>
 80034e8:	4e0b      	ldr	r6, [pc, #44]	; (8003518 <__libc_init_array+0x40>)
 80034ea:	4c0c      	ldr	r4, [pc, #48]	; (800351c <__libc_init_array+0x44>)
 80034ec:	f000 f89c 	bl	8003628 <_init>
 80034f0:	1ba4      	subs	r4, r4, r6
 80034f2:	10a4      	asrs	r4, r4, #2
 80034f4:	2500      	movs	r5, #0
 80034f6:	42a5      	cmp	r5, r4
 80034f8:	d105      	bne.n	8003506 <__libc_init_array+0x2e>
 80034fa:	bd70      	pop	{r4, r5, r6, pc}
 80034fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003500:	4798      	blx	r3
 8003502:	3501      	adds	r5, #1
 8003504:	e7ee      	b.n	80034e4 <__libc_init_array+0xc>
 8003506:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800350a:	4798      	blx	r3
 800350c:	3501      	adds	r5, #1
 800350e:	e7f2      	b.n	80034f6 <__libc_init_array+0x1e>
 8003510:	08003734 	.word	0x08003734
 8003514:	08003734 	.word	0x08003734
 8003518:	08003734 	.word	0x08003734
 800351c:	0800373c 	.word	0x0800373c

08003520 <memset>:
 8003520:	4402      	add	r2, r0
 8003522:	4603      	mov	r3, r0
 8003524:	4293      	cmp	r3, r2
 8003526:	d100      	bne.n	800352a <memset+0xa>
 8003528:	4770      	bx	lr
 800352a:	f803 1b01 	strb.w	r1, [r3], #1
 800352e:	e7f9      	b.n	8003524 <memset+0x4>

08003530 <register_fini>:
 8003530:	4b02      	ldr	r3, [pc, #8]	; (800353c <register_fini+0xc>)
 8003532:	b113      	cbz	r3, 800353a <register_fini+0xa>
 8003534:	4802      	ldr	r0, [pc, #8]	; (8003540 <register_fini+0x10>)
 8003536:	f000 b805 	b.w	8003544 <atexit>
 800353a:	4770      	bx	lr
 800353c:	00000000 	.word	0x00000000
 8003540:	08003551 	.word	0x08003551

08003544 <atexit>:
 8003544:	2300      	movs	r3, #0
 8003546:	4601      	mov	r1, r0
 8003548:	461a      	mov	r2, r3
 800354a:	4618      	mov	r0, r3
 800354c:	f000 b816 	b.w	800357c <__register_exitproc>

08003550 <__libc_fini_array>:
 8003550:	b538      	push	{r3, r4, r5, lr}
 8003552:	4d07      	ldr	r5, [pc, #28]	; (8003570 <__libc_fini_array+0x20>)
 8003554:	4c07      	ldr	r4, [pc, #28]	; (8003574 <__libc_fini_array+0x24>)
 8003556:	1b64      	subs	r4, r4, r5
 8003558:	10a4      	asrs	r4, r4, #2
 800355a:	b91c      	cbnz	r4, 8003564 <__libc_fini_array+0x14>
 800355c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003560:	f000 b868 	b.w	8003634 <_fini>
 8003564:	3c01      	subs	r4, #1
 8003566:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800356a:	4798      	blx	r3
 800356c:	e7f5      	b.n	800355a <__libc_fini_array+0xa>
 800356e:	bf00      	nop
 8003570:	0800373c 	.word	0x0800373c
 8003574:	08003740 	.word	0x08003740

08003578 <__retarget_lock_acquire_recursive>:
 8003578:	4770      	bx	lr

0800357a <__retarget_lock_release_recursive>:
 800357a:	4770      	bx	lr

0800357c <__register_exitproc>:
 800357c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003580:	4c26      	ldr	r4, [pc, #152]	; (800361c <__register_exitproc+0xa0>)
 8003582:	4606      	mov	r6, r0
 8003584:	6820      	ldr	r0, [r4, #0]
 8003586:	4698      	mov	r8, r3
 8003588:	460f      	mov	r7, r1
 800358a:	4691      	mov	r9, r2
 800358c:	f7ff fff4 	bl	8003578 <__retarget_lock_acquire_recursive>
 8003590:	4b23      	ldr	r3, [pc, #140]	; (8003620 <__register_exitproc+0xa4>)
 8003592:	681d      	ldr	r5, [r3, #0]
 8003594:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 8003598:	b918      	cbnz	r0, 80035a2 <__register_exitproc+0x26>
 800359a:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 800359e:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 80035a2:	6843      	ldr	r3, [r0, #4]
 80035a4:	2b1f      	cmp	r3, #31
 80035a6:	dd19      	ble.n	80035dc <__register_exitproc+0x60>
 80035a8:	4b1e      	ldr	r3, [pc, #120]	; (8003624 <__register_exitproc+0xa8>)
 80035aa:	b933      	cbnz	r3, 80035ba <__register_exitproc+0x3e>
 80035ac:	6820      	ldr	r0, [r4, #0]
 80035ae:	f7ff ffe4 	bl	800357a <__retarget_lock_release_recursive>
 80035b2:	f04f 30ff 	mov.w	r0, #4294967295
 80035b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035ba:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80035be:	f3af 8000 	nop.w
 80035c2:	2800      	cmp	r0, #0
 80035c4:	d0f2      	beq.n	80035ac <__register_exitproc+0x30>
 80035c6:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 80035ca:	6003      	str	r3, [r0, #0]
 80035cc:	2200      	movs	r2, #0
 80035ce:	6042      	str	r2, [r0, #4]
 80035d0:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 80035d4:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 80035d8:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 80035dc:	6843      	ldr	r3, [r0, #4]
 80035de:	b19e      	cbz	r6, 8003608 <__register_exitproc+0x8c>
 80035e0:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 80035e4:	2201      	movs	r2, #1
 80035e6:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 80035ea:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 80035ee:	409a      	lsls	r2, r3
 80035f0:	4311      	orrs	r1, r2
 80035f2:	2e02      	cmp	r6, #2
 80035f4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 80035f8:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 80035fc:	bf02      	ittt	eq
 80035fe:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 8003602:	430a      	orreq	r2, r1
 8003604:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 8003608:	1c5a      	adds	r2, r3, #1
 800360a:	3302      	adds	r3, #2
 800360c:	6042      	str	r2, [r0, #4]
 800360e:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 8003612:	6820      	ldr	r0, [r4, #0]
 8003614:	f7ff ffb1 	bl	800357a <__retarget_lock_release_recursive>
 8003618:	2000      	movs	r0, #0
 800361a:	e7cc      	b.n	80035b6 <__register_exitproc+0x3a>
 800361c:	20000450 	.word	0x20000450
 8003620:	08003728 	.word	0x08003728
 8003624:	00000000 	.word	0x00000000

08003628 <_init>:
 8003628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800362a:	bf00      	nop
 800362c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800362e:	bc08      	pop	{r3}
 8003630:	469e      	mov	lr, r3
 8003632:	4770      	bx	lr

08003634 <_fini>:
 8003634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003636:	bf00      	nop
 8003638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800363a:	bc08      	pop	{r3}
 800363c:	469e      	mov	lr, r3
 800363e:	4770      	bx	lr
